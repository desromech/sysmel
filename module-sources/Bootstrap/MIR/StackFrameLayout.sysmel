public final class MIRStackFrameLayout superclass: Object; definition: {
    protected field compilationTarget => MIRCompilationTarget.

    public field stackFrameSize => UInt64.
    public field stackFrameAlignment => UInt64.

    public method isRequired => Boolean
        := stackFrameSize > 0u64.

    public method temporaryFrameSize => UInt64
        := stackFrameSize.

    public method buildLayoutForFunction: (function: MIRFunction) registerAllocator: (registerAllocator: MIRRegisterAllocator) withTarget: (target: MIRCompilationTarget) ::=> Void := {
        compilationTarget := target.

        stackFrameAlignment := compilationTarget stackFrameAlignment asUInt64.

        ## We might need to assign a local offset in case the argument is passed through a register and we need to spill it.
        function arguments do: {:(MIRArgumentVariable)eachArgument :: Void |
            eachArgument offset = 0i64 ifTrue: (self assignNextLocationToLocalVariable: eachArgument).
        }.

        function temporaries do: {:(MIRTemporaryVariable)eachLocal :: Void |
            self assignNextLocationToLocalVariable: eachLocal
        }.

        stackFrameSize := stackFrameSize alignedTo: stackFrameAlignment
    }.

    public method assignNextLocationToLocalVariable: (localVariable: MIRLocalVariable) ::=> Void := {
        localVariable needsStackAllocation ifFalse: (return: void).

        let localAlignment := localVariable alignment.
        stackFrameSize := stackFrameSize + localVariable size alignedTo: localAlignment.
        stackFrameAlignment := stackFrameAlignment max: localAlignment.
        localVariable offset: stackFrameSize asInt64 negated.
    }.
}.
