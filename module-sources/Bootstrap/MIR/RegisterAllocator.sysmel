   
public abstract class MIRRegisterAllocator superclass: Object; definition: {
    public field compilationTarget => MIRCompilationTarget.
    public field callingConvention => MIRCallingConvention.

    public abstract method addRequiredCalloutSize: (calloutSize: UInt64) withAlignment: (calloutAlignment: UInt64) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateRegistersIn: (function: MIRFunction) withTarget: (target: MIRCompilationTarget) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateRegister: (register: MIRPhysicalLocation) forInstructionResult: (instruction: MIRInstruction) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateRegister: (register: MIRPhysicalLocation) forInstructionResultPointer: (instruction: MIRInstruction) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateRegister: (register: MIRPhysicalLocation) forInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateRegister: (register: MIRPhysicalLocation) forInstruction: (instruction: MIRInstruction) operandPointerAt: (operandIndex: Size) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateCloberredRegister: (register: MIRPhysicalLocation) forInstructionResultPointer: (instruction: MIRInstruction) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateCloberredRegister: (register: MIRPhysicalLocation) forInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateCloberredRegister: (register: MIRPhysicalLocation) forInstruction: (instruction: MIRInstruction) operandPointerAt: (operandIndex: Size) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateRegister: (register: MIRPhysicalLocation) forInstruction: (instruction: MIRInstruction) scratchAt: (operandIndex: Size) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateIntegerRegisterForInstruction: (instruction: MIRInstruction) scratchAt: (operandIndex: Size) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateVectorRegisterForInstruction: (instruction: MIRInstruction) scratchAt: (operandIndex: Size) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateRegisterForInstructionResult: (instruction: MIRInstruction) ::=> Void
        := self subclassResponsibility.

    public virtual method allocateRegisterForInstructionResult: (instruction: MIRInstruction) trySharingWithOperandAt: (operandIndex: Size) ::=> Void
        := self allocateRegisterForInstructionResult: instruction.

    public abstract method allocateRegisterForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateRegister8ForInstructionResult: (instruction: MIRInstruction) ::=> Void
        := self subclassResponsibility.

    public virtual method allocateRegister8ForInstructionResult: (instruction: MIRInstruction) trySharingWithOperandAt: (operandIndex: Size)  ::=> Void
        := self allocateRegister8ForInstructionResult: instruction.

    public abstract method allocateRegister8ForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void
        := self subclassResponsibility.

    public abstract method freeAllocatedScratchRegisters => Void
        := self subclassResponsibility.

    public virtual method allocateRegisterOrDirectPointerForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand => MIRValue := instruction operands at: operandIndex.
        self allocateRegisterForInstruction: instruction operandAt: operandIndex.
        operand isLocalValue ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationValuePointerOrAssignedRegister for: operand)
        }.
    }.

    public virtual method allocateRegister8OrDirectPointerForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand => MIRValue := instruction operands at: operandIndex.
        self allocateRegister8ForInstruction: instruction operandAt: operandIndex.
        operand isLocalValue ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationValuePointerOrAssignedRegister for: operand)
        }
    }.

    public virtual method allocateRegister: (requiredRegister: MIRPhysicalLocation) orImmediateU8ForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediateU8 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self allocateRegister: requiredRegister forInstruction: instruction operandAt: operandIndex
        }
    }.

    public virtual method allocateRegisterOrImmediate8ForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediate8 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self allocateRegister8ForInstruction: instruction operandAt: operandIndex
        }
    }.

    public virtual method allocateRegisterImmediate8OrDirectPointerForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediate16 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self allocateRegister8OrDirectPointerForInstruction: instruction operandAt: operandIndex
        }
    }.

    public virtual method allocateRegisterOrImmediate16ForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediate16 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self allocateRegisterForInstruction: instruction operandAt: operandIndex
        }
    }.

    public virtual method allocateRegisterImmediate16OrDirectPointerForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediate16 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self allocateRegisterOrDirectPointerForInstruction: instruction operandAt: operandIndex
        }
    }.

    public virtual method allocateRegisterOrImmediate32ForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediate32 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self allocateRegisterForInstruction: instruction operandAt: operandIndex
        }
    }.

    public virtual method allocateRegisterImmediate32OrDirectPointerForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediate32 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self allocateRegisterOrDirectPointerForInstruction: instruction operandAt: operandIndex
        }
    }.

    public virtual method allocateRegisterImmediateS32OrDirectPointerForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediateS32 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self allocateRegisterOrDirectPointerForInstruction: instruction operandAt: operandIndex
        }
    }.

    public virtual method allocateRegisterImmediate64OrDirectPointerForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediate64 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self allocateRegisterOrDirectPointerForInstruction: instruction operandAt: operandIndex
        }
    }.

    public virtual method allocateRegisterOrImmediate32PointerForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediate32 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            operand isValuePointer ifTrue: {
                instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationValuePointer for: (operand downCastTo: MIRValuePointer) value)
            } ifFalse: {
                self allocateRegisterForInstruction: instruction operandAt: operandIndex.
                operand isProgramEntity ifTrue: {
                    instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationValuePointer for: operand)
                }
            }
        }
    }.

    public virtual method allocateRegisterOrImmediate64ForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediate64 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self allocateRegisterForInstruction: instruction operandAt: operandIndex
        }
    }.

    public virtual method allocateRegisterOrImmediateS32ForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediateS32 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self allocateRegisterForInstruction: instruction operandAt: operandIndex
        }
    }.

    public virtual method allocateImmediate32ForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isImmediate32 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self error: "An immediate32 operand is required here."
        }
    }.

    public virtual method allocateRegisterOrRelativeImmediate32ForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand := instruction operands at: operandIndex.
        operand isRelativeImmediate32 ifTrue: {
            instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationImmediate for: operand)
        } ifFalse: {
            self allocateRegisterForInstruction: instruction operandAt: operandIndex
        }
    }.

    public virtual method allocateMemoryForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        instruction operandRegisters at: operandIndex put: MIRPhysicalLocationMemory uniqueInstance
    }.

    public virtual method allocateMemoryForInstructionResult: (instruction: MIRInstruction) ::=> Void := {
        instruction resultRegister: MIRPhysicalLocationMemory uniqueInstance
    }.

    public virtual method allocateSpecificCallStackPointerOffset: (stackOffset: Int64) forInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) scratchRegister: (scratchRegister: MIRPhysicalLocation) ::=> Void := {
        instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationSpecificStackPointerOffset new
            isCallArgument: true;
            offset: stackOffset;
            scratchRegisters: (Array with: scratchRegister);
            yourself)
    }.

    public virtual method allocateSpecificCallStackPointerOffset: (stackOffset: Int64) forInstruction: (instruction: MIRInstruction) operandPointerAt: (operandIndex: Size) scratchRegister: (scratchRegister: MIRPhysicalLocation) ::=> Void := {
        let operand => MIRValue := instruction operands at: operandIndex.
        operand markCoalescedMemoryCopyRequired.
        instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationSpecificStackPointerOffset new
            isCallArgument: true;
            isPointer: true;
            offset: stackOffset;
            scratchRegisters: (Array with: scratchRegister);
            yourself)
    }.
    
    public virtual method allocateSpecificCallStackPointerOffset: (stackOffset: Int64) forInstruction: (instruction: MIRInstruction) structureOperandAt: (operandIndex: Size) ::=> Void := {
        instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationSpecificStackPointerOffset new
            isCallArgument: true;
            isStructure: true;
            offset: stackOffset;
            scratchRegisters: instruction scratchRegisters;
            yourself)
    }.

    public abstract method allocateCaptureVectorPointerRegisterForInstruction: (instruction: MIRInstruction) ::=> Void
        := self subclassResponsibility.

    public abstract method allocateIntegerRegisterForValue: (value: MIRValue) ::=> MIRPhysicalLocation
        := self subclassResponsibility.

    public abstract method allocateIntegerRegisterForValuePointer: (value: MIRValue) ::=> MIRPhysicalLocation
        := self subclassResponsibility.

    public abstract method allocateIntegerRegisterForResultValue: (value: MIRLocalValue) trySharingWith: (sharingValue: MIRValue) ::=> MIRPhysicalLocation
        := self subclassResponsibility.

    public abstract method allocateIntegerRegisterForResultValuePointer: (value: MIRLocalValue) ::=> MIRPhysicalLocation
        := self subclassResponsibility.

    public abstract method allocateIntegerRegister8ForValue: (value: MIRValue) ::=> MIRPhysicalLocation
        := self subclassResponsibility.

    public abstract method allocateIntegerRegister8ForResultValue: (value: MIRValue) trySharingWith: (sharingValue: MIRValue) ::=> MIRPhysicalLocation
        := self subclassResponsibility.

    public abstract method allocateFloatRegisterForValue: (value: MIRValue) ::=> MIRPhysicalLocation
        := self subclassResponsibility.

    public abstract method allocateFloatRegisterForResultValue: (value: MIRLocalValue) trySharingWith: (sharingValue: MIRValue) ::=> MIRPhysicalLocation
        := self subclassResponsibility.

    public abstract method allocateVectorRegisterForValue: (value: MIRValue) ::=> MIRPhysicalLocation
        := self subclassResponsibility.

    public abstract method allocateVectorRegisterForResultValue: (value: MIRLocalValue) trySharingWith: (sharingValue: MIRValue) ::=> MIRPhysicalLocation
        := self subclassResponsibility.

    public abstract method spillIntegerRegistersExceptFor: (registers: Array) ::=> Void
        := self subclassResponsibility.

    public method spillIfNeededAndAllocateRegister: (register: MIRPhysicalLocation) withValue: (value: MIRValue) ::=> Void := {
        register makeActiveWithValue: value inRegisterAllocator: self
    }.

    public method spillIfNeededAndAllocateRegister: (register: MIRPhysicalLocation) withValuePointer: (value: MIRValue) ::=> Void := {
        register makeActiveWithValuePointer: value inRegisterAllocator: self
    }.

    public method spillIfNeededAndAllocateRegister: (register: MIRPhysicalLocation) withResultValue: (value: MIRValue) ::=> Void := {
        register makeActiveWithResultValue: value inRegisterAllocator: self
    }.

    public abstract method spillIfNeededAndAllocateIntegerRegister: (register: MIRPhysicalIntegerRegister) withValue: (value: MIRValue) ::=> Void
        := self subclassResponsibility.

    public abstract method spillIfNeededAndAllocateIntegerRegister: (register: MIRPhysicalIntegerRegister) withValuePointer: (value: MIRValue) ::=> Void
        := self subclassResponsibility.

    public abstract method spillIfNeededAndAllocateIntegerRegister: (register: MIRPhysicalIntegerRegister) withResultValue: (value: MIRValue) ::=> Void
        := self subclassResponsibility.

    public abstract method spillIfNeededAndAllocateFloatRegister: (register: MIRPhysicalFloatRegister) withValue: (value: MIRValue) ::=> Void
        := self subclassResponsibility.

    public abstract method spillIfNeededAndAllocateFloatRegister: (register: MIRPhysicalFloatRegister) withValuePointer: (value: MIRValue) ::=> Void
        := self subclassResponsibility.

    public abstract method spillIfNeededAndAllocateFloatRegister: (register: MIRPhysicalFloatRegister) withResultValue: (value: MIRValue) ::=> Void
        := self subclassResponsibility.

    public abstract method spillIfNeededAndAllocateVectorRegister: (register: MIRPhysicalVectorRegister) withValue: (value: MIRValue) ::=> Void
        := self subclassResponsibility.

    public abstract method spillIfNeededAndAllocateVectorRegister: (register: MIRPhysicalVectorRegister) withValuePointer: (value: MIRValue) ::=> Void
        := self subclassResponsibility.

    public abstract method spillIfNeededAndAllocateVectorRegister: (register: MIRPhysicalVectorRegister) withResultValue: (value: MIRValue) ::=> Void
        := self subclassResponsibility.

    public virtual method allocateRegisterOrMemoryForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        self allocateRegisterForInstruction: instruction operandAt: operandIndex
    }.
}.

MIRPhysicalLocation extend: {
    __Meta__ extend: {
        public abstract method allocateRegisterForValue: (value: MIRValue) with: (registerAllocator: MIRRegisterAllocator) ::=> MIRPhysicalLocation
            := self subclassResponsibility.

        public abstract method allocateRegisterForResultValue: (value: MIRLocalValue) trySharingWith: (sharingValue: MIRValue) with: (registerAllocator: MIRRegisterAllocator) ::=> MIRPhysicalLocation
            := self subclassResponsibility.
    }.

    public abstract method makeActiveWithValue: (value: MIRValue) inRegisterAllocator: (registerAllocator: MIRRegisterAllocator) ::=> Void
        := self subclassResponsibility.

    public abstract method makeActiveWithValuePointer: (value: MIRValue) inRegisterAllocator: (registerAllocator: MIRRegisterAllocator) ::=> Void
        := self subclassResponsibility.

    public abstract method makeActiveWithResultValue: (value: MIRValue) inRegisterAllocator: (registerAllocator: MIRRegisterAllocator) ::=> Void
        := self subclassResponsibility.
}.

MIRPhysicalIntegerRegister extend: {
    __Meta__ extend: {
        public override method allocateRegisterForValue: (value: MIRValue) with: (registerAllocator: MIRRegisterAllocator) ::=> MIRPhysicalLocation
            := registerAllocator allocateIntegerRegisterForValue: value.

        public override method allocateRegisterForResultValue: (value: MIRLocalValue) trySharingWith: (sharingValue: MIRValue) with: (registerAllocator: MIRRegisterAllocator) ::=> MIRPhysicalLocation
            := registerAllocator allocateIntegerRegisterForResultValue: value  trySharingWith: sharingValue.
    }.

    public override method makeActiveWithValue: (value: MIRValue) inRegisterAllocator: (registerAllocator: MIRRegisterAllocator) ::=> Void := {
        registerAllocator spillIfNeededAndAllocateIntegerRegister: self withValue: value
    }.

    public override method makeActiveWithValuePointer: (value: MIRValue) inRegisterAllocator: (registerAllocator: MIRRegisterAllocator) ::=> Void := {
        registerAllocator spillIfNeededAndAllocateIntegerRegister: self withValuePointer: value
    }.

    public override method makeActiveWithResultValue: (value: MIRValue) inRegisterAllocator: (registerAllocator: MIRRegisterAllocator) ::=> Void := {
        registerAllocator spillIfNeededAndAllocateIntegerRegister: self withResultValue: value
    }.
}.

MIRPhysicalLocationMemory extend: {
    __Meta__ extend: {
        public override method allocateRegisterForValue: (value: MIRValue) with: (registerAllocator: MIRRegisterAllocator) ::=> MIRPhysicalLocation
            := registerAllocator allocateIntegerRegisterForValuePointer: value.

        public override method allocateRegisterForResultValue: (value: MIRLocalValue) trySharingWith: (sharingValue: MIRValue) with: (registerAllocator: MIRRegisterAllocator) ::=> MIRPhysicalLocation
            := registerAllocator allocateIntegerRegisterForResultValuePointer: value.
    }.
}.

MIRPhysicalFloatRegister extend: {
    __Meta__ extend: {
        public override method allocateRegisterForValue: (value: MIRValue) with: (registerAllocator: MIRRegisterAllocator) ::=> MIRPhysicalLocation
            := registerAllocator allocateFloatRegisterForValue: value.

        public override method allocateRegisterForResultValue: (value: MIRLocalValue) trySharingWith: (sharingValue: MIRValue) with: (registerAllocator: MIRRegisterAllocator) ::=> MIRPhysicalLocation
            := registerAllocator allocateFloatRegisterForResultValue: value trySharingWith: sharingValue.
    }.

    public override method makeActiveWithValue: (value: MIRValue) inRegisterAllocator: (registerAllocator: MIRRegisterAllocator) ::=> Void := {
        registerAllocator spillIfNeededAndAllocateFloatRegister: self withValue: value
    }.

    public override method makeActiveWithValuePointer: (value: MIRValue) inRegisterAllocator: (registerAllocator: MIRRegisterAllocator) ::=> Void := {
        registerAllocator spillIfNeededAndAllocateFloatRegister: self withValuePointer: value
    }.

    public override method makeActiveWithResultValue: (value: MIRValue) inRegisterAllocator: (registerAllocator: MIRRegisterAllocator) ::=> Void := {
        registerAllocator spillIfNeededAndAllocateFloatRegister: self withResultValue: value
    }.
}.

MIRPhysicalVectorRegister extend: {
    __Meta__ extend: {
        public override method allocateRegisterForValue: (value: MIRValue) with: (registerAllocator: MIRRegisterAllocator) ::=> MIRPhysicalLocation
            := registerAllocator allocateVectorRegisterForValue: value.

        public override method allocateRegisterForResultValue: (value: MIRLocalValue) trySharingWith: (sharingValue: MIRValue) with: (registerAllocator: MIRRegisterAllocator) ::=> MIRPhysicalLocation
            := registerAllocator allocateVectorRegisterForResultValue: value trySharingWith: sharingValue.
    }.

    public override method makeActiveWithValue: (value: MIRValue) inRegisterAllocator: (registerAllocator: MIRRegisterAllocator) ::=> Void := {
        registerAllocator spillIfNeededAndAllocateVectorRegister: self withValue: value
    }.

    public override method makeActiveWithValuePointer: (value: MIRValue) inRegisterAllocator: (registerAllocator: MIRRegisterAllocator) ::=> Void := {
        registerAllocator spillIfNeededAndAllocateVectorRegister: self withValuePointer: value
    }.

    public override method makeActiveWithResultValue: (value: MIRValue) inRegisterAllocator: (registerAllocator: MIRRegisterAllocator) ::=> Void := {
        registerAllocator spillIfNeededAndAllocateVectorRegister: self withResultValue: value
    }.
}.

MIROperation extend: {
    public method forTarget: (target: Symbol) registerConstraintsWith: (registerAssignmentBlock: (MIRInstruction, MIRRegisterAllocator) => Void) ::=> Void := {
        perTargetRegisterConstraints at: target put: registerAssignmentBlock
    }.

    public method forTargets: (targets: Array) registerConstraintsWith: (registerAssignmentBlock: (MIRInstruction, MIRRegisterAllocator) => Void) ::=> Void := {
        targets do: {:(Symbol)eachTarget :: Void |
            self forTarget: eachTarget registerConstraintsWith: registerAssignmentBlock
        }
    }.

    public method computeRegisterConstraintsOf: (instruction: MIRInstruction) with: (registerAllocator: MIRRegisterAllocator) ::=> Void := {
        let targetName := registerAllocator compilationTarget name.
        (perTargetRegisterConstraints at: targetName
            ifAbsent: {:: Void |
            self error: "Missing register constraints for MIR operation '" -- name printString -- "' in " -- targetName asString -- "."
        }) (instruction, registerAllocator)
    }.
}.

MIRCallingConvention extend: {
    public abstract method registerConstraintsOfCallInt8: (instruction: MIRInstruction) with: (registerAllocator: MIRRegisterAllocator) ::=> Void
        := self subclassResponsibility.

    public abstract method registerConstraintsOfCallInt16: (instruction: MIRInstruction) with: (registerAllocator: MIRRegisterAllocator) ::=> Void
        := self subclassResponsibility.

    public abstract method registerConstraintsOfCallInt32: (instruction: MIRInstruction) with: (registerAllocator: MIRRegisterAllocator) ::=> Void
        := self subclassResponsibility.

    public abstract method registerConstraintsOfCallInt64: (instruction: MIRInstruction) with: (registerAllocator: MIRRegisterAllocator) ::=> Void
        := self subclassResponsibility.

    public abstract method registerConstraintsOfCallPointer: (instruction: MIRInstruction) with: (registerAllocator: MIRRegisterAllocator) ::=> Void
        := self subclassResponsibility.

    public abstract method registerConstraintsOfCallFloat32: (instruction: MIRInstruction) with: (registerAllocator: MIRRegisterAllocator) ::=> Void
        := self subclassResponsibility.

    public abstract method registerConstraintsOfCallFloat64: (instruction: MIRInstruction) with: (registerAllocator: MIRRegisterAllocator) ::=> Void
        := self subclassResponsibility.

    public abstract method registerConstraintsOfCallStruct: (instruction: MIRInstruction) with: (registerAllocator: MIRRegisterAllocator) ::=> Void
        := self subclassResponsibility.

    public abstract method registerConstraintsOfCallVoid: (instruction: MIRInstruction) with: (registerAllocator: MIRRegisterAllocator) ::=> Void
        := self subclassResponsibility.
}.


