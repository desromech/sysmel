public final class MIRLinearScanRegisterAllocator superclass: MIRRegisterAllocator; definition: {
    protected field integerRegisterFile => MIRRegisterAllocationFile.
    protected field floatRegisterFile => MIRRegisterAllocationFile.
    protected field vectorRegisterFile => MIRRegisterAllocationFile.
    protected field captureVectorPointerValue => MIRCaptureVectorPointerValue.
    protected field gotPointerValue => MIRGotPointerValue.
    protected field threadLocalSegmentPointerValue => MIRThreadLocalSegmentPointerValue.
    protected field functionArguments => Array.

    protected field performsCallouts => Boolean.
    protected field maxCalloutSize => UInt64.
    protected field maxCalloutAlignment => UInt64.
    protected field isNoGC => Boolean.

    public override method addRequiredCalloutSize: (calloutSize: UInt64) withAlignment: (calloutAlignment: UInt64) ::=> Void := {
        performsCallouts := true.
        maxCalloutSize := maxCalloutSize max: calloutSize.
        maxCalloutAlignment := maxCalloutAlignment max: calloutAlignment.
    }.

    public override method allocateRegistersIn: (function: MIRFunction) withTarget: (target: MIRCompilationTarget) ::=> Void := {
        compilationTarget := target.
        callingConvention := function callingConvention.
        performsCallouts := false.
        maxCalloutSize := 0u64.
        maxCalloutAlignment := 1u64.

        integerRegisterFile := MIRRegisterAllocationFile for: function callingConvention allocableIntegerRegisters.
        vectorRegisterFile := MIRRegisterAllocationFile for: function callingConvention allocableVectorRegisters.
        target usesVectorRegistersForFloatOperations ifTrue: {
            floatRegisterFile := vectorRegisterFile
        } ifFalse: {
            floatRegisterFile := MIRRegisterAllocationFile for: function callingConvention allocableFloatRegisters.
        }.

        ## Compute the live intervals.
        function normalizeAndComputeLiveIntervals.
        captureVectorPointerValue := function captureVectorPointerValue.
        gotPointerValue := function gotPointerValue.
        threadLocalSegmentPointerValue := function threadLocalSegmentPointerValue.
        isNoGC := function isNoGC.

        ## Reset the register allocation state.
        function allLocalValuesDo: {:(MIRLocalValue)eachValue :: Void |
            eachValue resetRegisterAllocation.
        }.

        ## Precolor the the arguments.
        functionArguments := function arguments.
        functionArguments do: {:(MIRArgumentValue)eachArgument :: Void |
            self beginValueAtIndex: eachArgument index.
            eachArgument passingRegister ifNil: {
                self allocateRegisterForOperand: eachArgument.
            } ifNotNil: {
                self spillIfNeededAndAllocateRegister: eachArgument passingRegister withResultValue: eachArgument.
            }.
        }.

        captureVectorPointerValue ifNotNil: {
            self beginValueAtIndex: captureVectorPointerValue index.
            self assert: captureVectorPointerValue closure isNotNil.
            let preferredRegister := function callingConvention preferredRegisterForCaptureVectorPointer,
            preferredRegister ifNotNil: {
                captureVectorPointerValue loadRegister: preferredRegister.
                integerRegisterFile spillIfNeededAndAllocateRegister: preferredRegister withResultValue: captureVectorPointerValue.
                captureVectorPointerValue closureRegister: (integerRegisterFile allocateForValue: captureVectorPointerValue closure).
            } ifNil: {
                captureVectorPointerValue closureRegister: (integerRegisterFile allocateForValue: captureVectorPointerValue closure).
                captureVectorPointerValue loadRegister: (integerRegisterFile allocateForResultValue: captureVectorPointerValue trySharingWith: captureVectorPointerValue closure).
            }.
        }.

        function captures do: {:(MIRCaptureVariable)eachCapture :: Void |
            self beginValueAtIndex: eachCapture index.
            self allocateRegisterForOperand: eachCapture.
        }.

        gotPointerValue ifNotNil: {
            let preferredRegister := function callingConvention preferredRegisterForGotPointer.
            preferredRegister ifNotNil: {
                gotPointerValue loadRegister: preferredRegister.
                integerRegisterFile spillIfNeededAndAllocateRegister: preferredRegister withResultValue: gotPointerValue.
            } ifNil: {
                gotPointerValue loadRegister: (integerRegisterFile allocateForResultValue: gotPointerValue trySharingWith: nil).
            }.
        }.
        
        threadLocalSegmentPointerValue ifNotNil: {
            self beginValueAtIndex: threadLocalSegmentPointerValue index.
            let preferredRegister := function callingConvention preferredRegisterForThreadLocalSegmentPointer,
            preferredRegister ifNotNil: {
                threadLocalSegmentPointerValue loadRegister: preferredRegister.
                integerRegisterFile spillIfNeededAndAllocateRegister: preferredRegister withResultValue: threadLocalSegmentPointerValue.
            } ifNil: {
                threadLocalSegmentPointerValue loadRegister: (integerRegisterFile allocateForResultValue: threadLocalSegmentPointerValue trySharingWith: nil).
            }.
    
            threadLocalSegmentPointerValue segmentIndexRegister: threadLocalSegmentPointerValue loadRegister.
            threadLocalSegmentPointerValue segmentPointerVectorRegister: (integerRegisterFile allocateForValue: nil).
        }.
        
        function temporaries do: {:(MIRTemporaryVariable)eachTemporary :: Void |
            self beginValueAtIndex: eachTemporary index.
            self allocateRegisterForOperand: eachTemporary.
        }.

        function basicBlocksDo: {:(MIRBasicBlock)basicBlock :: Void |
            self allocateRegistersInBasicBlock: basicBlock
        }.

        function
            performsCallouts: performsCallouts;
            maxCalloutSize: maxCalloutSize;
            maxCalloutAlignment: maxCalloutAlignment;
            touchedCallPreservedRegisters: (function callingConvention integerCallPreservedRegisters select: {:(MIRPhysicalLocation)register | integerRegisterFile usesRegister: register }) asArray
    }.

    public method allocateRegistersInBasicBlock: (basicBlock: MIRBasicBlock) ::=> Void := {
        basicBlock instructionsDo: {:(MIRInstruction)instruction :: Void |
            self allocateInstructionRegisters: instruction
        }
    }.

    public method allocateInstructionRegisters: (instruction: MIRInstruction) ::=> Void := {
        self beginValueAtIndex: instruction index.
        instruction isDebug ifTrue: {
            return: void.
        }.

        instruction operation computeRegisterConstraintsOf: instruction with: self.
        self allocateCaptureVectorPointerRegisterForInstruction: instruction.
        self allocateGotPointerRegisterForInstruction: instruction.
        self allocateThreadLocalSegmentPointerRegisterForInstruction: instruction.
    }.

    public method beginValueAtIndex: (deadPoint: UInt32) ::=> Void := {
        integerRegisterFile beginValueAtIndex: deadPoint.
        floatRegisterFile ifNotNil: (floatRegisterFile beginValueAtIndex: deadPoint).
        vectorRegisterFile ifNotNil: (vectorRegisterFile beginValueAtIndex: deadPoint).
    }.

    public override method freeAllocatedScratchRegisters => Void := {
        integerRegisterFile freeAllocatedScratchRegisters.
        floatRegisterFile ifNotNil: (floatRegisterFile freeAllocatedScratchRegisters).
        vectorRegisterFile ifNotNil: (vectorRegisterFile freeAllocatedScratchRegisters).
    }.

    public override method allocateCaptureVectorPointerRegisterForInstruction: (instruction: MIRInstruction) ::=> Void := {
        instruction captureVectorPointerValue isNotNil && instruction captureVectorPointerRegister isNil ifTrue: {
            instruction captureVectorPointerRegister: (integerRegisterFile allocateForValue: instruction captureVectorPointerValue)
        }.
    }.

    public override method allocateGotPointerRegisterForInstruction: (instruction: MIRInstruction) ::=> Void := {
        instruction gotPointerValue isNotNil && instruction gotPointerRegister isNil ifTrue: {
            instruction gotPointerRegister: (integerRegisterFile allocateForValue: instruction gotPointerValue)
        }.
    }.

    public override method allocateThreadLocalSegmentPointerRegisterForInstruction: (instruction: MIRInstruction) ::=> Void := {
        instruction threadLocalSegmentPointerValue isNotNil && instruction threadLocalSegmentPointerRegister isNil ifTrue: {
            instruction threadLocalSegmentPointerRegister: (integerRegisterFile allocateForValue: instruction threadLocalSegmentPointerValue)
        }.
    }.

    public override method allocateRegisterForInstructionResult: (instruction: MIRInstruction) ::=> Void := {
        instruction hasValidType ifTrue: {
            instruction resultRegister: (instruction physicalLocationClass allocateRegisterForResultValue: instruction trySharingWith: nil with: self).
        }
    }.

    public override method allocateRegisterForInstructionResult: (instruction: MIRInstruction) trySharingWithOperandAt: (operandIndex: Size) ::=> Void := {
        instruction hasValidType ifTrue: {
            instruction resultRegister: (instruction physicalLocationClass allocateRegisterForResultValue: instruction trySharingWith: (instruction operands at: operandIndex) with: self).
        }
    }.

    public override method allocateRegister8ForInstructionResult: (instruction: MIRInstruction) trySharingWithOperandAt: (operandIndex: Size) ::=> Void := {
        instruction hasValidType ifTrue: {
            instruction resultRegister: (self allocateIntegerRegister8ForResultValue: instruction trySharingWith: (instruction operands at: operandIndex)).
        }
    }.

    public override method allocateRegister8ForInstructionResult: (instruction: MIRInstruction) ::=> Void := {
        instruction hasValidType ifTrue: {
            instruction resultRegister: (self allocateIntegerRegister8ForResultValue: instruction trySharingWith: nil).
        }
    }.

    public override method allocateRegister: (register: MIRPhysicalLocation) forInstructionResult: (instruction: MIRInstruction) ::=> Void := {
        instruction resultRegister: register.
        self spillIfNeededAndAllocateRegister: register withResultValue: instruction.
    }.

    public override method allocateRegister: (register: MIRPhysicalLocation) forInstructionResultPointer: (instruction: MIRInstruction) ::=> Void := {
        instruction resultRegister: (MIRPhysicalLocationRegisterWithPointer new register: register; yourself).
        instruction markCoalescedMemoryCopyRequired.
        self spillIfNeededAndAllocateRegister: register withValuePointer: instruction.
    }.

    public override method allocateRegister: (register: MIRPhysicalLocation) forInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        instruction operandRegisters at: operandIndex put: register.
        self spillIfNeededAndAllocateRegister: register withValue: (instruction operands at: operandIndex)
    }.

    public override method allocateRegister: (register: MIRPhysicalLocation) forInstruction: (instruction: MIRInstruction) operandPointerAt: (operandIndex: Size) ::=> Void := {
        let operand => MIRValue := instruction operands at: operandIndex.
        operand markCoalescedMemoryCopyRequired.
        instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationRegisterWithPointer new register: register; yourself).
        self spillIfNeededAndAllocateRegister: register withValuePointer: operand
    }.

    public override method allocateCloberredRegister: (register: MIRPhysicalLocation) forInstructionResultPointer: (instruction: MIRInstruction) ::=> Void := {
        instruction resultRegister: (MIRPhysicalLocationRegisterWithPointer new register: register; yourself).
        instruction markCoalescedMemoryCopyRequired.
        self spillIfNeededAndAllocateRegister: register withValuePointer: nil.
    }.

    public override method allocateCloberredRegister: (register: MIRPhysicalLocation) forInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        instruction operandRegisters at: operandIndex put: register.
        self spillIfNeededAndAllocateRegister: register withValue: nil
    }.

    public override method allocateCloberredRegister: (register: MIRPhysicalLocation) forInstruction: (instruction: MIRInstruction) operandPointerAt: (operandIndex: Size) ::=> Void := {
        instruction operandRegisters at: operandIndex put: (MIRPhysicalLocationRegisterWithPointer new register: register; yourself).
        let operand => MIRValue := instruction operands at: operandIndex.
        operand markCoalescedMemoryCopyRequired.
        self spillIfNeededAndAllocateRegister: register withValuePointer: nil
    }.

    public override method allocateRegister: (register: MIRPhysicalLocation) forInstruction: (instruction: MIRInstruction) scratchAt: (scratchIndex: Size) ::=> Void := {
        instruction scratchRegisters at: scratchIndex put: register.
        self spillIfNeededAndAllocateRegister: register withValue: nil
    }.

    public override method allocateIntegerRegisterForInstruction: (instruction: MIRInstruction) scratchAt: (scratchIndex: Size) ::=> Void := {
        instruction scratchRegisters at: scratchIndex put: (self allocateIntegerRegisterForValue: nil)
    }.

    public override method allocateVectorRegisterForInstruction: (instruction: MIRInstruction) scratchAt: (scratchIndex: Size) ::=> Void := {
        instruction scratchRegisters at: scratchIndex put: (self allocateVectorRegisterForValue: nil)
    }.

    public override method allocateRegisterForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand => MIRValue := instruction operands at: operandIndex.
        instruction operandRegisters at: operandIndex put: (self allocateRegisterForOperand: operand).
    }.
    
    public override method allocateRegister8ForInstruction: (instruction: MIRInstruction) operandAt: (operandIndex: Size) ::=> Void := {
        let operand => MIRValue  := instruction operands at: operandIndex.
        instruction operandRegisters at: operandIndex put: (self allocateRegister8ForOperand: operand).
    }.

    public method allocateRegisterForOperand: (operand: MIRValue) ::=> MIRPhysicalLocation := {
        operand physicalLocationClass allocateRegisterForValue: operand with: self
    }.

    public method allocateRegister8ForOperand: (operand: MIRValue) ::=> MIRPhysicalLocation
        := self allocateIntegerRegister8ForValue: operand.

    public override method allocateIntegerRegisterForValue: (value: MIRValue) ::=> MIRPhysicalLocation
        := integerRegisterFile allocateForValue: value.

    public override method allocateIntegerRegisterForValuePointer: (value: MIRValue) ::=> MIRPhysicalLocation
        := integerRegisterFile allocateForValuePointer: value.

    public override method allocateIntegerRegisterForResultValue: (value: MIRLocalValue) trySharingWith: (sharingValue: MIRValue)  ::=> MIRPhysicalLocation
        := integerRegisterFile allocateForResultValue: value trySharingWith: sharingValue.

    public override method allocateIntegerRegisterForResultValuePointer: (value: MIRLocalValue) ::=> MIRPhysicalLocation
        := integerRegisterFile allocateForResultValuePointer: value.

    public override method allocateIntegerRegister8ForValue: (value: MIRValue) ::=> MIRPhysicalLocation
        := integerRegisterFile allocateForByteValue: value.

    public override method allocateIntegerRegister8ForResultValue: (value: MIRValue) trySharingWith: (sharingValue: MIRValue) ::=> MIRPhysicalLocation
        := integerRegisterFile allocateForByteResultValue: value trySharingWith: sharingValue.

    public override method spillIntegerRegistersExceptFor: (registers: Array) ::=> Void := {
        integerRegisterFile spillRegistersIfNeededExceptFor: registers
    }.

    public override method spillGCRootsForCalling: (calledFunction: MIRValue) ::=> Void := {
        isNoGC || calledFunction isNoGC ifFalse: {
            integerRegisterFile spillGCRoots
        }.
    }.

    public override method spillIfNeededAndAllocateIntegerRegister: (register: MIRPhysicalIntegerRegister) withValue: (value: MIRValue) ::=> Void := {
        integerRegisterFile spillIfNeededAndAllocateRegister: register withValue: value
    }.

    public override method spillIfNeededAndAllocateIntegerRegister: (register: MIRPhysicalIntegerRegister) withValuePointer: (value: MIRValue) ::=> Void := {
        integerRegisterFile spillIfNeededAndAllocateRegister: register withValuePointer: value
    }.

    public override method spillIfNeededAndAllocateIntegerRegister: (register: MIRPhysicalIntegerRegister) withResultValue: (value: MIRValue) ::=> Void := {
        integerRegisterFile spillIfNeededAndAllocateRegister: register withResultValue: value
    }.

    public override method allocateFloatRegisterForValue: (value: MIRValue) ::=> MIRPhysicalLocation
        := floatRegisterFile allocateForValue: value.

    public override method allocateFloatRegisterForResultValue: (value: MIRLocalValue) trySharingWith: (sharingValue: MIRValue) ::=> MIRPhysicalLocation
        := floatRegisterFile allocateForResultValue: value trySharingWith: sharingValue.

    public override method spillIfNeededAndAllocateFloatRegister: (register: MIRPhysicalFloatRegister) withValue: (value: MIRValue) ::=> Void := {
        floatRegisterFile spillIfNeededAndAllocateRegister: register withValue: value
    }.

    public override method spillIfNeededAndAllocateFloatRegister: (register: MIRPhysicalFloatRegister) withResultValue: (value: MIRValue) ::=> Void := {
        floatRegisterFile spillIfNeededAndAllocateRegister: register withResultValue: value
    }.

    public override method allocateVectorRegisterForValue: (value: MIRValue) ::=> MIRPhysicalLocation
        := vectorRegisterFile allocateForValue: value.

    public override method allocateVectorRegisterForResultValue: (value: MIRLocalValue) trySharingWith: (sharingValue: MIRValue) ::=> MIRPhysicalLocation
        := vectorRegisterFile allocateForResultValue: value trySharingWith: sharingValue.

    public override method spillIfNeededAndAllocateVectorRegister: (register: MIRPhysicalVectorRegister) withValue: (value: MIRValue) ::=> Void := {
        vectorRegisterFile spillIfNeededAndAllocateRegister: register withValue: value
    }.

    public override method spillIfNeededAndAllocateVectorRegister: (register: MIRPhysicalVectorRegister) withResultValue: (value: MIRValue) ::=> Void := {
        vectorRegisterFile spillIfNeededAndAllocateRegister: register withResultValue: value
    }.
}.
