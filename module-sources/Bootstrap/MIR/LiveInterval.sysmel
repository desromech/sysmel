MIRLiveInterval definition: {
    public field value => MIRLocalValue.
    public field registerOrSequence => MIRPhysicalLocation.
    public field isSpilled => Boolean.
    public field start => UInt32.
    public field end => UInt32.

    __Meta__ definition: {
        public method for: (value: MIRLocalValue) from: (start: UInt32) until: (end: UInt32) ::=> self
            := self new value: value; start: start; end: end; yourself.

        public method for: (value: MIRLocalValue) ::=> self
            := self for: value from: 16rFFFF_FFFF u32 until: 0u32.

        public method empty ::=> self
            := self for: nil.

        public method from: (start: UInt32) until: (end: UInt32) ::=> self
            := self for: nil from: start until: end.
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream nextPut: '['c8; print: start; nextPutAll: ", "; print: end; nextPut: ']'c8
    }.

    public method insertUsage: (usage: UInt32) ::=> Void := {
        start := start min: usage.
        end := end max: usage.
    }.

    public method includes: (element: UInt32) ::=> Boolean
        := (start <= element) && (element <= end).

    public method isEmpty => Boolean := start > end.

    public method spill => Void := {
        value ifNotNil: {
            value
                clearCoalescedAssignedRegister;
                markCoalescedMemoryCopyRequired
        }.
        
        registerOrSequence := nil.
        isSpilled := true.
    }.

    public method markMemoryCopyRequired => Void := {
        value ifNotNil: {
            value markCoalescedMemoryCopyRequired
        }
    }.

    public method addRegistersOnto: (aCollection: OrderedCollection) ::=> Void := {
        registerOrSequence ifNotNil: {
            registerOrSequence addRegistersOnto: aCollection
        }.
    }.

    public method includesRegister: (register: MIRPhysicalLocation) ::=> Boolean
        := registerOrSequence isNotNil && (registerOrSequence includesRegister: register).

    public method includesRegisterInList: (register: Array) ::=> Boolean
        := registerOrSequence isNotNil && (registerOrSequence includesRegisterInList: register).

    public method includesRegisterOfSequence: (registerSequenceToTest: MIRPhysicalLocationRegisterSequence) ::=> Boolean
        := registerOrSequence isNotNil && (registerOrSequence includesRegisterOfSequence: registerSequenceToTest).
}.
