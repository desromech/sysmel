{
    ## validMethodDictionary
    let: #validMethodDictionary with: {:(Type)self :: MethodDictionary |
        let: #existent with: (self __slotNamedAt__: #methodDictionary).
        if: existent == nil then: {
            let: #newMethodDictionary with: MethodDictionary::new().
            self __slotNamedAt__: #methodDictionary put: newMethodDictionary.
            newMethodDictionary
        } else: {
            existent
        }.
    }.

    validMethodDictionary(Type) at: #validMethodDictionary put: validMethodDictionary.
    validMethodDictionary recordBindingWithOwner: Type andName: #validMethodDictionary.
}.

## Type::validVirtualMethodSelectorList
Type validMethodDictionary at: #validVirtualMethodSelectorList put: {:(Type)self :: OrderedCollection |
    let: #existent with: (self __slotNamedAt__: #virtualMethodSelectorList).
    if: existent == nil then: {
        let: #newList with: OrderedCollection::new().
        self __slotNamedAt__: #virtualMethodSelectorList put: newList.
        newList
    } else: {
        existent
    }.
}.
(Type validMethodDictionary at: #validVirtualMethodSelectorList) recordBindingWithOwner: Type andName: #validVirtualMethodSelectorList.

Type validMethodDictionary at: #lookupLocalSelector: put: {:(Type)self :(Symbol)selector |
    let: #methodDictionary with: (self __slotNamedAt__: #methodDictionary).
    if: methodDictionary == nil
        then: nil
        else: (methodDictionary atOrNil: selector)
}.
(Type validMethodDictionary at: #lookupLocalSelector:) recordBindingWithOwner: Type andName: #lookupLocalSelector:.

Type validMethodDictionary at: #checkNoOverridenSelector: put: {:(Type)self :(Symbol)selector |
    let: #method with: (self lookupLocalSelector: selector).
    if: method == nil then: {
        let: #supertype with: (self __slotNamedAt__: #supertype).
        if: supertype ~~ nil then: (supertype checkNoOverridenSelector: selector)
    } else: {
        error("Overriding non-virtual method with selector " -- selector printString)
    }
}.
(Type validMethodDictionary at: #checkNoOverridenSelector:) recordBindingWithOwner: Type andName: #checkNoOverridenSelector:.

Type validMethodDictionary at: #checkVirtualDispatchSelectorExistence: put: {:(Type)self :(Symbol)selector |
    let: #method with: (self lookupLocalSelector: selector).
    if: method == nil then: {
        let: #supertype with: (self __slotNamedAt__: #supertype).
        if: supertype ~~ nil
        then: (supertype checkVirtualDispatchSelectorExistence: selector)
        else: error(("Overriding method does not have declaration in supertype with selector " -- selector printString) -- ".")
    } else: {
        if: method hasVirtualDispatch not then: {
            error(((("Overriding method declaration with selector " -- selector printString) -- "does not have virtual dispatch in supertype ") -- self printString) -- ".")
        }
    }
}.
(Type validMethodDictionary at: #checkVirtualDispatchSelectorExistence:) recordBindingWithOwner: Type andName: #checkVirtualDispatchSelectorExistence:.

Type validMethodDictionary at: #checkConstraintsForAddingMethod:withSelector: put: {:(Type)self :newMethod :(Symbol)selector |
    let: #supertype with: (self __slotNamedAt__: #supertype).
    if: newMethod hasVirtualDispatch then: {
        if: newMethod hasOverrideDispatch then: {
            if: supertype ~~ nil then: {
                supertype checkVirtualDispatchSelectorExistence: selector
            }
        }.

        let: #virtualMethodSelectorList with: self validVirtualMethodSelectorList.
        if: (virtualMethodSelectorList identityIncludes: selector) not then: {
            virtualMethodSelectorList add: selector
        }
    } else: {
        if: supertype ~~ nil then: {
            supertype checkNoOverridenSelector: selector
        }
    }
}.
(Type validMethodDictionary at: #checkConstraintsForAddingMethod:withSelector:) recordBindingWithOwner: Type andName: #checkConstraintsForAddingMethod:withSelector:.

Type validMethodDictionary at: #withSelector:addMethod: put: {:(Type)self :(Symbol)selector :newMethod |
    let: #methodDict with: self validMethodDictionary.
    let: #existentMethod with: (methodDict atOrNil: selector).

    self checkConstraintsForAddingMethod: newMethod withSelector: selector.
    if: (if: existentMethod ~~ nil then: existentMethod isBootstrapPrimitive else: false) then: {
        existentMethod adoptDefinitionOf: newMethod.
    } else: {
        methodDict at: selector put: newMethod
    }.

    newMethod recordBindingWithOwner: self andName: selector.
    self flushLookupSelector: selector.
    newMethod
}.
(Type validMethodDictionary at: #withSelector:addMethod:) recordBindingWithOwner: Type andName: #withSelector:addMethod:.

Type
    withSelector: #validMacroMethodDictionary addMethod: {:(Type)self :: MethodDictionary |
        let: #existent with: (self __slotNamedAt__: #macroMethodDictionary).
        if: existent == nil then: {
            let: #newMethodDictionary with: MethodDictionary::new().
            self __slotNamedAt__: #macroMethodDictionary put: newMethodDictionary.
            newMethodDictionary
        } else: {
            existent
        }.
    };
    withSelector: #validFallbackMethodDictionary addMethod: {:(Type)self :: MethodDictionary |
        let: #existent with: (self __slotNamedAt__: #fallbackMethodDictionary).
        if: existent == nil then: {
            let: #newMethodDictionary with: MethodDictionary::new().
            self __slotNamedAt__: #fallbackMethodDictionary put: newMethodDictionary.
            newMethodDictionary
        } else: {
            existent
        }.
    };
    withSelector: #withSelector:addMacroMethod: addMethod: {:(Type)self :(Symbol)selector :method |
        method recordBindingWithOwner: self andName: selector.
        self validMacroMethodDictionary at: selector put: method.
        self flushMacroLookupSelector: selector.
        method
    };
    withSelector: #withSelector:addFallbackMethod: addMethod: {:(Type)self :(Symbol)selector :method |
        method recordBindingWithOwner: self andName: selector.
        self validFallbackMethodDictionary at: selector put: method.
        self flushFallbackLookupSelector: selector.
        method
    };
    withSelector: #withSelector:addFallbackMethod: addMethod: {:(Type)self :(Symbol)selector :method |
        method recordBindingWithOwner: self andName: selector.
        self validFallbackMethodDictionary at: selector put: method.
        self flushFallbackLookupSelector: selector.
        method
    };
    withSelector: #ensureAnalysisOfMethodWithSelector: addMethod: {:(Type)self :(Symbol)selector :: Void |
        ((self __slotNamedAt__: #methodDictionary) at: selector) ensureAnalysis
    };
    ensureAnalysisOfMethodWithSelector: #ensureAnalysisOfMethodWithSelector:;
    withSelector: #withSelector:replaceMethod: addMethod: {:(Type)self :selector :newMethod :: Void |
        ((self __slotNamedAt__: #methodDictionary) at: selector) adoptDefinitionOf: newMethod
    };
    ensureAnalysisOfMethodWithSelector: #withSelector:replaceMethod:;
    withSelector: #withSelector:addOrReplaceMethod: addMethod: {:(Type)self :selector :newMethod :: Void |
        let: #methodDictionary with: self validMethodDictionary.
        let: #existent with: (methodDictionary atOrNil: selector).
        if: existent == nil then: {
            methodDictionary at: selector put: newMethod.
            self flushLookupSelector: selector.
            newMethod recordBindingWithOwner: self andName: selector
        } else: {
            existent adoptDefinitionOf: newMethod
        }
    };
    ensureAnalysisOfMethodWithSelector: #withSelector:addOrReplaceMethod:;
    withSelector: #lookupLocalMacroSelector: addMethod: {:(Type)self :(Symbol)selector :: AnyValue |
        let: #methodDictionary with: (self __slotNamedAt__: #macroMethodDictionary).
        if: methodDictionary ~~ nil
            then: (methodDictionary atOrNil: selector)
            else: nil
    };
    withSelector: #lookupMacroSelector: addMethod: {:(Type)self :(Symbol)selector :: AnyValue |
        let: #method with: (self lookupLocalMacroSelector: selector).
        if: method ~~ nil
        then: method
        else: {
            let: #supertype with: (self __slotNamedAt__: #supertype).
            if: supertype ~~ nil
                then: (supertype lookupMacroSelector: selector)
                else: (nil)
        }
    };
    withSelector: #lookupLocalFallbackSelector: addMethod: {:(Type)self :(Symbol)selector :: AnyValue |
        let: #methodDictionary with: (self __slotNamedAt__: #fallbackMethodDictionary).
        if: methodDictionary ~~ nil
            then: (methodDictionary atOrNil: selector)
            else: nil
    };
    withSelector: #lookupSelector: addMethod: {:(Type)self :(Symbol)selector :: AnyValue |
        let: #method with: (self lookupLocalSelector: selector).
        if: method ~~ nil
        then: method
        else: {
            let: #supertype with: (self __slotNamedAt__: #supertype).
            if: supertype ~~ nil
                then: (supertype lookupSelector: selector)
                else: (nil)
        }
    };
    ensureAnalysisOfMethodWithSelector: #lookupSelector:;
    withSelector: #lookupFallbackSelector: addMethod: {:(Type)self :(Symbol)selector :: AnyValue |
        let: #method with: (self lookupLocalFallbackSelector: selector).
        if: method ~~ nil
        then: method
        else: {
            let: #supertype with: (self __slotNamedAt__: #supertype).
            if: supertype ~~ nil
                then: (supertype lookupFallbackSelector: selector)
                else: (nil)
        }
    };
    withSelector: #withSelector:addMaybeVirtualMethod: addMethod: {:(Type)self :selector :newMethod :: Void |
        let: #supertype with: (self __slotNamedAt__: #supertype).
        if: supertype ~~ nil then: {
            let: #supertypeMethod with: (supertype lookupSelector: selector).
            if: supertypeMethod ~~ nil then: {
                if: supertypeMethod hasVirtualDispatch then: {
                    newMethod makeVirtual
                }
            }
        }.

        self withSelector: selector addMethod: newMethod
    }.
