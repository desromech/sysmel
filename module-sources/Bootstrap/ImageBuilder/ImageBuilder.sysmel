public class ImageBuilder superclass: Object.
public abstract class ImageBuilderTarget superclass: Object.
public abstract class ImageBuilderTargetImage superclass: Object.

ImageBuilder definition: {
    public field target => ImageBuilderTarget.
    public field keepingInProcessDebugInformation => Boolean.
    public field targetImage => ImageBuilderTargetImage.
    public field entryPointFunction => Function.
    public field immediateTypeTable => Array.
    public field immediateTrivialTypeTable => Array.

    public field tracer => ImageTracer.

    public override method initialize => Void := {
        super initialize.
        target := ImageBuilderTarget default.
        keepingInProcessDebugInformation := true.
        tracer := ImageTracer new.
    }.

    public method useDefaultTypeTables => Void := {
        immediateTypeTable := ObjectModel::ImmediateTagTypeTable.
        immediateTrivialTypeTable := ObjectModel::ImmediateTrivialTypeTable.
    }.

    public method useDynamicMessaging => Void := {
        self useDefaultTypeTables.
        self addProgramEntities: ObjectModel::SendTrampolines.
    }.

    public method objectModel => ObjectModelVariant
        := target objectModel.

    public method beComplete => Void := {
        tracer beComplete
    }.

    public method beNoRTTI => Void := {
        tracer beNoRTTI
    }.

    public method beMinimal => Void := {
        tracer beMinimal
    }.

    public method beNoSourceDefinition => Void := {
        tracer beNoSourceDefinition
    }.

    public method addProgramEntity: (programEntity: ProgramEntity) ::=> Void := {
        tracer addRootObject: programEntity
    }.

    public method addProgramEntities: (programEntities: Collection) ::=> Void := {
        tracer addRootObjects: programEntities
    }.

    public method addNativeEntryPoint: (newEntryPointFunction: Function) ::=> Void := {
        self addProgramEntity: newEntryPointFunction.
        entryPointFunction := newEntryPointFunction.
    }.

    public method withoutInProcessDebugInformation => Void := {
        keepingInProcessDebugInformation := false
    }.

    public method withInProcessDebugInformation => Void := {
        keepingInProcessDebugInformation := true
    }.

    public method build => ImageBuilderTargetImage := {
        AnalysisQueue current waitPendingAnalysis.

        immediateTypeTable ifNotNil: (tracer addRootObject: immediateTypeTable).
        immediateTrivialTypeTable ifNotNil: (tracer addRootObject: immediateTrivialTypeTable).

        tracer
            objectModel: target objectModel;
            needsBytecode: target needsBytecode;
            keepingInProcessDebugInformation: keepingInProcessDebugInformation;
            traceObjectSet;
            emitTraceReport.

        targetImage := target buildTargetImageWith: self.
        targetImage
    }.

    public method saveTo: (filename: String) ::=> Boolean
        := targetImage saveTo: filename.
}.
