public abstract class ImageTracerStrategy superclass: Object.

public class ImageTracer superclass: Object; definition: {
    public field needsBytecode => Boolean.
    public field keepingInProcessDebugInformation => Boolean.
    public field objectModel => ObjectModelVariant.

    public field objectTrace => ImageObjectTrace.

    public field rootObjects => OrderedCollection.
    protected field rootObjectSet => IdentitySet.

    public field tracedProgramEntities => OrderedCollection.
    public field tracedFunctions => OrderedCollection.
    public field tracedFunctionDefinitions => OrderedCollection.

    public field strategy => ImageTracerStrategy.
    public field patchDictionary => IdentityDictionary.
    public field vtableSet => ImageBuilderVirtualTableSetSource.

    private field isMetatypeCache => IdentityDictionary.

    public override method initialize => Void := {
        super initialize.
        rootObjects := OrderedCollection new.
        rootObjectSet := IdentitySet new.
        patchDictionary := IdentityDictionary new.
        strategy := ImageTracerStrategy new.
        vtableSet := ImageBuilderVirtualTableSetSource new.
        isMetatypeCache := IdentityDictionary new.

        self beComplete.
    }.

    public method isMetatype: (type: Type) ::=> Boolean
        := isMetatypeCache at: type ifAbsentPut: {:: Boolean | type isSubtypeOf: Type}.

    public method beComplete => Void := {
        strategy := ImageTracerStrategy new.
    }.

    public method beNoRTTI => Void := {
        strategy := ImageTracerStrategyNoRTTI new.
    }.

    public method beMinimal => Void := {
        strategy := ImageTracerStrategyMinimal new.
    }.

    public method beNoSourceDefinition => Void := {
        strategy := ImageTracerStrategyNoSourceDefinition new.
    }.

    public method requiredTracedReflectiveFunctions => SequenceableCollection
        := strategy requiredTracedReflectiveFunctionsOf: self.
        
    public method requiredTracedReflectiveFunctionDefinitions => SequenceableCollection
        := strategy requiredTracedReflectiveFunctionDefinitionsOf: self.

    public method addRootObject: rootObject ::=> Void := {
        (rootObjectSet includes: rootObject) ifFalse: {
            rootObjectSet add: rootObject. 
            rootObjects add: rootObject.
        }.
    }.

    public method addRootObjects: (rootObjects: Collection) ::=> Void := {
        rootObjects do: {:each :: Void |
            self addRootObject: each
        }
    }.

    public method addUntypedRootObject: (rootObject: Untyped) ::=> Void := {
        (rootObjectSet untypedIncludes: rootObject) ifFalse: {
            rootObjectSet untypedAdd: rootObject. 
            rootObjects untypedAdd: rootObject.
        }.
    }.

    public method addUntypedRootObjects: (rootObjects: Collection) ::=> Void := {
        rootObjects do: {:each :: Void |
            self addUntypedRootObject: each
        }
    }.

    public method addObject: (object: Untyped) patch: (patch: ImageObjectTracePatch) ::=> Void := {
        patchDictionary untypedAt: object put: patch
    }.

    public method enqueueObjectTrace: (object: Untyped) ::=> Void := {
        (strategy shouldTraceObject: object with: self) ifTrue: {
            (objectTrace includesObject: object) ifFalse: {
                objectTrace addNewObject: object.

                (RawTuple::type(object) ifNil: Untyped) imageTracer::addObject: object intoSpecialTraceListIn: self
            }.
        }
    }.

    public method shouldEmitTypeSlot: (typeSlot: TypeSlot) ::=> Boolean := {
        keepingInProcessDebugInformation not && typeSlot isDebugInformation ifTrue: {return: false}.
        needsBytecode not && typeSlot isBytecode ifTrue: {return: false}.
        typeSlot isJitSpecific ifTrue: {return: true}.
        typeSlot isTargetGenerated ifTrue: {return: true}.

        strategy shouldEmitTypeSlot: typeSlot
    }.

    public method traceType: (type: Type) ::=> Void := {
        strategy traceType: type with: self
    }.

    public method traceObjectSet => Void := {
        objectTrace := ImageObjectTrace new
            patchDictionary: patchDictionary copy;
            vtableSet: vtableSet;
            yourself.
        tracedProgramEntities := OrderedCollection new.
        tracedFunctions := OrderedCollection new.
        tracedFunctionDefinitions := OrderedCollection new.

        rootObjects do: {:(Untyped)each :: Void |
            self enqueueObjectTrace: each
        }.

        objectTrace objectList do: {:(Untyped)each :: Void |
            strategy traceReferencesOf: each with: self
        }
    }.

    public method emitTraceReport => Void := {
        printLine("Image builder trace results:").
        printLine("Object set size ", objectTrace objectList size).
        printLine("Program entities ", tracedProgramEntities size).
        printLine("Functions ", tracedFunctions size).
        printLine("Function definitions ", tracedFunctionDefinitions size).

        let undefinedFunctionNames := OrderedCollection new.
        tracedFunctions do: {:(Function)each :: Void |
            each definition ifNil: {
                undefinedFunctionNames add: each printString.
            }
        }.

        undefinedFunctionNames isNotEmpty ifTrue: {
            printLine("Warning, functions without definition: ", undefinedFunctionNames size).
            undefinedFunctionNames sort.
            undefinedFunctionNames do: {:each :: Void |
                printLine("  ", each).
            }
        }.
    }.
}.
