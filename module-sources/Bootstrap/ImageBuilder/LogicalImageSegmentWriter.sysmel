public class LogicalImageSegmentWriter superclass: ImageSegmentWriter; definition: {
    public field objectModel => ObjectModelVariant.
    public field baseVirtualAddress => UInt64.

    public override method initialize => Void := {
        super initialize.
        baseVirtualAddress := 16r0100_0000 u64. ## Start one megabyte above the origin.
    }.

    public override method computeAlignmentOfObject: (object: Untyped) ::=> UInt64
        := 16u64.

    public method computeSizeOfObjectContent: (object: Untyped) ::=> UInt64 := {
        RawTuple::isDummyValue(object) ifTrue: {
            0u64
        } ifFalse: {
            RawTuple::isBytes(object)
                ifTrue: RawTuple::byteSize(object)
                ifFalse: RawTuple::size(object) * objectModel pointerSize
        }
    }.

    public abstract method computeSizeOfObject: (object: Untyped) ::=> UInt64
        := objectModel objectHeaderSize + (self computeSizeOfObjectContent: object).

    public override method writeObject: (object: Untyped) atOffset: (offset: Size) ::=> Void := {
        self writeObject: object headerAtOffset: offset.
        self writeObject: object contentAtOffset: offset + objectModel objectHeaderSize asSize
    }.

    public method writeObject: (object: Untyped) headerAtOffset: (offset: Size) ::=> Void := {
        objectModel logicalImageSegmentWriter::writeObject: object headerIn: self at: offset
    }.

    public method writeObject: (object: Untyped) contentAtOffset: (offset: Size) ::=> Void := {
        RawTuple::isDummyValue(object) ifTrue: (return: void).
        RawTuple::isBytes(object) ifTrue: {
            let byteSize := RawTuple::byteSize(object).
            let i mutable := 0sz.
            while: (i < byteSize) do: {
                segmentData at: offset + i put: (RawTuple::byteSlotAt:)(object, i)
            } continueWith: (i := i + 1sz)
        } ifFalse: {
            let pointerSize := objectModel pointerSize asSize.
            let slotCount := RawTuple::size(object).
            let i mutable := 0sz.
            let destOffset mutable := offset.
            while: (i < slotCount) do: {
                self writeReference: (RawTuple::slotAt:)(object, i) atOffset: destOffset.
                destOffset := destOffset + pointerSize
            } continueWith: {i := i + 1sz}
        }.
    }.

    public method writeReference: (reference: Untyped) atOffset: (offset: Size) ::=> Void := {
        objectModel logicalImageSegmentWriter::writeReference: reference in: self at: offset
    }.

    public method uint32At: (offset: Size) put: (value: UInt32) ::=> Void := {
        segmentData uint32At: offset put: value.
    }.

    public method uint64At: (offset: Size) put: (value: UInt64) ::=> Void := {
        segmentData uint64At: offset put: value.
    }.

    public method uint32PointerValueForObjectReference: (value: Untyped) ::=> UInt32 := {
        let indexOrNil := objectTrace objectIndexDictionary atOrNil: value.
        indexOrNil ifNil: {
            0u32
        } ifNotNil: {
            let index => UInt32 := indexOrNil.
            let offset => UInt64 := objectOffsetTable at: index asSize.
            baseVirtualAddress asUInt32 + offset asUInt32.
        }.
    }.

    public method uint32ReferenceAt: (offset: Size) put: (value: Untyped) ::=> Void := {
        segmentData uint32At: offset put: (self uint32PointerValueForObjectReference: value).
    }.

    public method uint64PointerValueForObjectReference: (value: Untyped) ::=> UInt64 := {
        let indexOrNil := objectTrace objectIndexDictionary atOrNil: value.
        indexOrNil ifNil: {
            0u64
        } ifNotNil: {
            let index => UInt32 := indexOrNil.
            let offset => UInt64 := objectOffsetTable at: index asSize.
            baseVirtualAddress asUInt64 + offset asUInt64.
        }.
    }.

    public method uint64ReferenceAt: (offset: Size) put: (value: Untyped) ::=> Void := {
        segmentData uint64At: offset put: (self uint64PointerValueForObjectReference: value)
    }.
}.

ObjectModelVariant definition: {
    public abstract method logicalImageSegmentWriter::writeReference: (reference: Untyped) in: (writer: LogicalImageSegmentWriter) at: (offset: Size) ::=> Void
        := self subclassResponsibility.

    public abstract method logicalImageSegmentWriter::writeObject: (reference: Untyped) headerIn: (writer: LogicalImageSegmentWriter) at: (offset: Size) ::=> Void
        := self subclassResponsibility.
}.

ObjectModelVariant32 definition: {
    public override method logicalImageSegmentWriter::writeObject: (object: Untyped) headerIn: (writer: LogicalImageSegmentWriter) at: (offset: Size) ::=> Void := {
        let type := RawTuple::type(object).
        let isBytes := RawTuple::isBytes(object).
        let isWeak := RawTuple::isWeak(object).
        let isDummyValue := RawTuple::isDummyValue(object).
        let headerSize := ObjectModel::TupleHeader32 valueSize.

        let header mutable => ObjectModel::TupleHeader32 := ObjectModel::TupleHeader32 new.
        header
            isBytes: isBytes;
            isWeak: isWeak;
            isDummyValue: isDummyValue;
            identityHashValue: identityHash(object) asUInt32;
            objectSize: (writer computeSizeOfObjectContent: object) asUInt32.
        header encodeInBytes: writer segmentData atOffset: offset.

        type ifNotNil: {
            let typePointerFlags := header typePointerAndFlags.
            let typeReferenceValue := writer uint32PointerValueForObjectReference: type.
            writer uint32At: offset put: typeReferenceValue | typePointerFlags
        }.
    }.

    public override method logicalImageSegmentWriter::writeReference: (reference: Untyped) in: (writer: LogicalImageSegmentWriter) at: (offset: Size) ::=> Void := {
        (self isImmediateReference: reference) ifTrue: {
            let immediateValue := RawTuple::type(reference) encodeImmediateReference32: reference.
            writer uint32At: offset put: immediateValue
        } ifFalse: {
            writer uint32ReferenceAt: offset put: reference
        }.
    }.
}.

ObjectModelVariant64 definition: {
    public override method logicalImageSegmentWriter::writeObject: (object: Untyped) headerIn: (writer: LogicalImageSegmentWriter) at: (offset: Size) ::=> Void := {
        let type := RawTuple::type(object).
        let isBytes := RawTuple::isBytes(object).
        let isWeak := RawTuple::isWeak(object).
        let isDummyValue := RawTuple::isDummyValue(object).
        let headerSize := ObjectModel::TupleHeader64 valueSize.

        let header mutable => ObjectModel::TupleHeader64 := ObjectModel::TupleHeader64 new.
        header
            isBytes: isBytes;
            isWeak: isWeak;
            isDummyValue: isDummyValue;
            identityHashValue: identityHash(object) asUInt64;
            objectSize: (writer computeSizeOfObjectContent: object).
        header encodeInBytes: writer segmentData atOffset: offset.

        type ifNotNil: {
            let typePointerFlags := header typePointerAndFlags.
            let typeReferenceValue := writer uint64PointerValueForObjectReference: type.
            writer uint64At: offset put: typeReferenceValue | typePointerFlags
        }.
    }.

    public override method logicalImageSegmentWriter::writeReference: (reference: Untyped) in: (writer: LogicalImageSegmentWriter) at: (offset: Size) ::=> Void := {
        (self isImmediateReference: reference) ifTrue: {
            let immediateValue := RawTuple::type(reference) encodeImmediateReference64: reference.
            writer uint64At: offset put: immediateValue
        } ifFalse: {
            writer uint64ReferenceAt: offset put: reference
        }.
    }.
}.
