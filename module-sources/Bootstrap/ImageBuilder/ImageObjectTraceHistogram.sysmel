Type definition: {
    public virtual method asImageObjectTraceHistogramCanonicalType => Type
        := self
}.

SimpleFunctionType definition: {
    public override method asImageObjectTraceHistogramCanonicalType => Type
        := SimpleFunctionType
}.

DependentFunctionType definition: {
    public override method asImageObjectTraceHistogramCanonicalType => Type
        := DependentFunctionType
}.

PointerType definition: {
    public override method asImageObjectTraceHistogramCanonicalType => Type
        := PointerType
}.

ReferenceType definition: {
    public override method asImageObjectTraceHistogramCanonicalType => Type
        := ReferenceType
}.

TemporaryReferenceType definition: {
    public override method asImageObjectTraceHistogramCanonicalType => Type
        := TemporaryReferenceType
}.

Metatype definition: {
    public override method asImageObjectTraceHistogramCanonicalType => Type
        := Metatype
}.

Metaclass definition: {
    public override method asImageObjectTraceHistogramCanonicalType => Type
        := Metaclass
}.

public class ImageObjectTraceHistogram superclass: Object; definition: {
    public field entryList => OrderedCollection.
    public field entryDictionary => MethodDictionary.

    public override method initialize => Void := {
        entryList := OrderedCollection new.
        entryDictionary := MethodDictionary new.
    }.

    public method getEntryForType: (type: Type) ::=> ImageObjectTraceHistogramEntry
        := entryDictionary at: type ifAbsentPut: {:: ImageObjectTraceHistogramEntry |
            let newEntry := ImageObjectTraceHistogramEntry new
                type: type;
                yourself.
            entryList add: newEntry.
            newEntry
        }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream string: "Type;Instance Count;Instance Data Size"; lf.
        entryList do: {:(ImageObjectTraceHistogramEntry)each :: Void |
            each printOn: stream.
            stream lf.
        }
    }
}.
