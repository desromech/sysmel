
ImageTracerStrategy definition: {
    public virtual method requiredTracedReflectiveFunctionsOf: (tracer: ImageTracer) ::=> SequenceableCollection
        := tracer tracedFunctions.

    public virtual method requiredTracedReflectiveFunctionDefinitionsOf: (tracer: ImageTracer) ::=> SequenceableCollection
        := tracer tracedFunctionDefinitions.

    public virtual method shouldTraceObject: (object: Untyped) with: (tracer: ImageTracer) ::=> Boolean
        := (tracer objectModel isImmediateReference: object) not.

    public method isTargetDefinedPrimitive: (object: Untyped) ::=> Boolean := {
        let objectType := RawTuple::type(object).
        ((objectType isSubtypeOf: Function) || (objectType isSubtypeOf: FunctionDefinition)) && object isTargetDefinedPrimitive
    }.

    public virtual method shouldEmitTypeSlot: (typeSlot: TypeSlot) ::=> Boolean
        := true.

    public virtual method traceType: (type: Type) with: (tracer: ImageTracer) ::=> Void := {
        tracer enqueueObjectTrace: type.
        tracer enqueueObjectTrace: (tracer vtableSet getVirtualTableLayoutFor: type).
        tracer enqueueObjectTrace: (tracer vtableSet getVirtualTableFor: type).
    }.

    public virtual method traceReferencesOf: (object: Untyped) with: (tracer: ImageTracer) ::=> Void := {
        (RawTuple::type(object) ifNil: Untyped) imageTracer::traceReferencesOf: object with: tracer
    }.
}.

public class ImageTracerStrategyNoRTTI superclass: ImageTracerStrategy; definition: {
    let BlacklistedTypes := (TypeSlot, Pragma).

    public virtual method shouldTraceObject: (object: Untyped) with: (tracer: ImageTracer) ::=> Boolean := {
        let type := RawTuple::type(object).
        (super shouldTraceObject: object with: tracer)
            && (self isTargetDefinedPrimitive: object) not
            && (BlacklistedTypes includes: type) not
    }.

    public override method shouldEmitTypeSlot: (typeSlot: TypeSlot) ::=> Boolean
        := typeSlot isNoRTTIExcluded not.

    public override method traceType: (type: Type) with: (tracer: ImageTracer) ::=> Void
        := {}.

    public override method traceReferencesOf: (object: Untyped) with: (tracer: ImageTracer) ::=> Void := {
        (RawTuple::type(object) ifNil: Untyped) imageTracer::traceNoRTTIReferencesOf: object with: tracer
    }.

    public override method requiredTracedReflectiveFunctionsOf: (tracer: ImageTracer) ::=> SequenceableCollection
        := #().

    public override method requiredTracedReflectiveFunctionDefinitionsOf: (tracer: ImageTracer) ::=> SequenceableCollection
        := #().
}.

public class ImageTracerStrategyMinimal superclass: ImageTracerStrategy; definition: {
    public virtual method shouldEmitTypeSlot: (typeSlot: TypeSlot) ::=> Boolean
        := typeSlot isMinRTTIExcluded not.

    public override method traceReferencesOf: (object: Untyped) with: (tracer: ImageTracer) ::=> Void := {
        (RawTuple::type(object) ifNil: Untyped) imageTracer::traceMinimalReferencesOf: object with: tracer
    }.
}.

public class ImageTracerStrategyNoSourceDefinition superclass: ImageTracerStrategy; definition: {
    public virtual method shouldEmitTypeSlot: (typeSlot: TypeSlot) ::=> Boolean
        := typeSlot isNoSourceDefinitionExcluded not.

    public override method traceReferencesOf: (object: Untyped) with: (tracer: ImageTracer) ::=> Void := {
        (RawTuple::type(object) ifNil: Untyped) imageTracer::traceNoSourceDefinitionReferencesOf: object with: tracer
    }.
}.

Type extend: {
    public virtual method imageTracer::traceNonLayoutReferencesOf: (object: Untyped) startingFrom: (startSlotIndex: Size) with: (tracer: ImageTracer) ::=> Void := {
        ## Do not tracer the weak references.
        RawTuple::isWeak(object) ifTrue: (return: void).

        let slotCount => Size := RawTuple::size(object).
        let i mutable := startSlotIndex.
        while: (i < slotCount) do: {
            tracer enqueueObjectTrace: (RawTuple::slotAt:)(object, i)
        } continueWith: (i := i + 1sz).
    }.

    public virtual method imageTracer::ordinaryTraceReferencesOf: (object: Untyped) with: (tracer: ImageTracer) ::=> Void := {
        tracer traceType: self.
        RawTuple::isDummyValue(object) || RawTuple::isBytes(object) ifTrue: {return: void}.

        (tracer isMetatype: self) ifTrue: (tracer traceType: object).

        self allValidSlots do: {:(TypeSlot)eachSlot :: Void |
            (tracer shouldEmitTypeSlot: eachSlot) ifTrue: {
                tracer enqueueObjectTrace: (RawTuple::typeSlotAt:)(object, eachSlot)
            }.
        }.

        self imageTracer::traceNonLayoutReferencesOf: object startingFrom: self totalSlotCount with: tracer
    }.

    public virtual method imageTracer::traceReferencesOf: (object: Untyped) with: (tracer: ImageTracer) ::=> Void := {
        self imageTracer::ordinaryTraceReferencesOf: object with: tracer
    }.

    public virtual method imageTracer::traceNoSourceDefinitionReferencesOf: (object: Untyped) with: (tracer: ImageTracer) ::=> Void := {
        self imageTracer::ordinaryTraceReferencesOf: object with: tracer
    }.

    public virtual method imageTracer::traceMinimalReferencesOf: (object: Untyped) with: (tracer: ImageTracer) ::=> Void := {
        self imageTracer::ordinaryTraceReferencesOf: object with: tracer
    }.

    public virtual method imageTracer::traceNoRTTIReferencesOf: (object: Untyped) with: (tracer: ImageTracer) ::=> Void := {
        self imageTracer::ordinaryTraceReferencesOf: object with: tracer
    }.

    public virtual method imageTracer::addObject: (object: Untyped) intoSpecialTraceListIn: (tracer: ImageTracer) ::=> Void := {
        ## By default do nothing.
    }.
}.

ProgramEntity definition: {
    __Meta__ definition: {
        public override method imageTracer::addObject: (object: Untyped) intoSpecialTraceListIn: (tracer: ImageTracer) ::=> Void := {
            super imageTracer::addObject: object intoSpecialTraceListIn: tracer.
            tracer tracedProgramEntities add: object
        }.
    }
}.

FunctionDefinition definition: {
    __Meta__ definition: {
        public override method imageTracer::traceNoSourceDefinitionReferencesOf: (object: Untyped) with: (tracer: ImageTracer) ::=> Void := {
            RawTuple::isDummyValue(object) ifTrue: {return: void}.
            object ensureAnalysis.
            super imageTracer::traceMinimalReferencesOf: object with: tracer.

            let functionDefinition => FunctionDefinition := object.
            functionDefinition allLiteralDependenciesDo: {:(Untyped)dependency :(Boolean)isAnalysisIndirect :: Void |
                tracer enqueueObjectTrace: dependency
            }.
        }.

        public override method imageTracer::traceMinimalReferencesOf: (object: Untyped) with: (tracer: ImageTracer) ::=> Void := {
            RawTuple::isDummyValue(object) ifTrue: {return: void}.
            object ensureAnalysis.
            super imageTracer::traceMinimalReferencesOf: object with: tracer.

            let functionDefinition => FunctionDefinition := object.
            functionDefinition allLiteralDependenciesDo: {:(Untyped)dependency :(Boolean)isAnalysisIndirect :: Void |
                isAnalysisIndirect ifFalse: {
                    tracer enqueueObjectTrace: dependency
                }.
            }.
        }.

        public override method imageTracer::traceNoRTTIReferencesOf: (object: Untyped) with: (tracer: ImageTracer) ::=> Void := {
            RawTuple::isDummyValue(object) ifTrue: {return: void}.
            super imageTracer::traceNoRTTIReferencesOf: object with: tracer.

            let functionDefinition => FunctionDefinition := object.
            functionDefinition allLiteralDependenciesDo: {:(Untyped)dependency :(Boolean)isAnalysisIndirect :: Void |
                isAnalysisIndirect ifFalse: {
                    tracer enqueueObjectTrace: dependency                
                }.
            }.
        }.

        public override method imageTracer::addObject: (object: Untyped) intoSpecialTraceListIn: (tracer: ImageTracer) ::=> Void := {
            super imageTracer::addObject: object intoSpecialTraceListIn: tracer.
            tracer tracedFunctionDefinitions add: object
        }.
    }.
}.

Function definition: {
    __Meta__ definition: {
        public override method imageTracer::addObject: (object: Untyped) intoSpecialTraceListIn: (tracer: ImageTracer) ::=> Void := {
            super imageTracer::addObject: object intoSpecialTraceListIn: tracer.
            tracer tracedFunctions add: object
        }.
    }.
}.

FunctionType definition: {
    public override method imageTracer::addObject: (object: Untyped) intoSpecialTraceListIn: (tracer: ImageTracer) ::=> Void := {
        super imageTracer::addObject: object intoSpecialTraceListIn: tracer.
        tracer tracedFunctions add: object
    }.
}.

