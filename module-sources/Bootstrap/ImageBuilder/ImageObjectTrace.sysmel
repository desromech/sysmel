public class ImageObjectTrace superclass: Object; definition: {
    public field objectList => OrderedCollection.
    public field objectIndexDictionary => MethodDictionary.
    public field vtableSet => ImageBuilderVirtualTableSetSource.
    public field patchDictionary => MethodDictionary.

    public override method initialize => Void := {
        super initialize.

        objectList := OrderedCollection new.
        objectIndexDictionary := MethodDictionary new.
        patchDictionary := MethodDictionary new.
        vtableSet := ImageBuilderVirtualTableSetSource new.
    }.

    public method addObject: (object: Untyped) patch: (patch: ImageObjectTracePatch) ::=> Void := {
        patchDictionary untypedAt: object put: patch
    }.

    public method includesObject: (object: Untyped) ::=> Boolean
        := objectIndexDictionary untypedIncludesKey: object.

    public method addNewObject: (object: Untyped) ::=> UInt32 := {
        let index := objectList size asUInt32.
        objectList untypedAdd: object.
        objectIndexDictionary untypedAt: object put: index.
        index
    }.

    public method addObject: (object: Untyped) ::=> UInt32 := {
        objectIndexDictionary untypedAt: object ifAbsentPut: { :: UInt32 |
            let index := objectList size asUInt32.
            objectList add: object.
            index
        }.
    }.

    public method indexOfObject: (object: Untyped) ifPresent: presentBlock ifAbsent: absentBlock := {
        (objectIndexDictionary untypedIncludesKey: object) ifTrue: {
            presentBlock(objectIndexDictionary untypedAt: object)
        } ifFalse: {
            absentBlock()
        }
    }.

    public method buildHistogram => ImageObjectTraceHistogram := {
        let result := ImageObjectTraceHistogram new.
        let i mutable := 0sz.
        let objectCount := objectList size.
        while: i < objectCount do: {
            let object := objectList untypedAt: i.
            (result getEntryForType: RawTuple::type(object) asImageObjectTraceHistogramCanonicalType) countObject: object
        } continueWith: (i := i + 1sz).

        result
    }.
}.
