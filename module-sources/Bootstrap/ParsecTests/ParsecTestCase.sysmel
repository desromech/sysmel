public class ParsecTestCase superclass: TestCase; definition: {
    public method testEpsilon => Void := {
        let parser := MonadicEpsilonParser new.
        self assert: (parser parse: "") isValid.
    }.

    public method testSingleCharacter => Void := {
        let parser := 'a'c8 asMonadicElementParser.
        self assert: (parser parse: "b") isError.
        self assert: (parser parse: "a") isValid.
    }.

    public method testTwoCharacterSequence => Void := {
        let parser := 'a'c8 asMonadicElementParser -- 'b'c8 asMonadicElementParser.
        self assert: (parser parse: "b") isError.
        self assert: (parser parse: "ba") isError.
        self assert: (parser parse: "a") isError.
        self assert: (parser parse: "ab") isValid.
    }.

    public method testTwoCharacterAlternatives => Void := {
        let parser := 'a'c8 asMonadicElementParser | 'b'c8 asMonadicElementParser.
        self assert: (parser parse: "a") isValid.
        self assert: (parser parse: "b") isValid.
        self assert: (parser parse: "c") isError.
    }.

    public method testStringSequence => Void := {
        let parser := "abra" asParsec.
        self assert: (parser parse: "abbra") isError.
        self assert: (parser parse: "abra") isValid.
    }.

    public method testEnd => Void := {
        let parser := Parsec end.
        self assert: (parser parse: "") isValid.
        self assert: (parser parse: "a") isError.
    }.

    public method testCharacterSet => Void := {
        let parser := "+-/\\*~<>=@%|&?!^" asMonadicSetParser.
        self assert: (parser parse: "+") isValid.
        self assert: (parser parse: "-") isValid.
        self assert: (parser parse: "a") isError.
    }.

    public method testCharacterSetList => Void := {
        let parser := "+-/\\*~<>=@%|&?!^" asMonadicSetParser plus.
        self assert: (parser parse: "+-") isValid.
        self assert: (parser parse: "-/") isValid.
    }.

    public method testStar => Void := {
        let parser := "abra" asParsec star -- Parsec end.
        self assert: (parser parse: "") isValid.
        self assert: (parser parse: "abra") isValid.
        self assert: (parser parse: "abraabra") isValid.
        self assert: (parser parse: "abrc") isError.
        self assert: (parser parse: "abraabrc") isError.
    }.

    public method testPlus => Void := {
        let parser := "abra" asParsec plus.
        self assert: (parser parse: "") isError.
        self assert: (parser parse: "abra") isValid.
        self assert: (parser parse: "abrc") isError.
        self assert: (parser parse: "abraabra") isValid.
    }.

    public method testIdentifierStart => Void := {
        let parser := Parsec identifierStart.
        self assert: (parser parse: "A") isValid.
        self assert: (parser parse: "b") isValid.
        self assert: (parser parse: "z") isValid.
        self assert: (parser parse: "_") isValid.
        self assert: (parser parse: "3") isError.
    }.
}.
