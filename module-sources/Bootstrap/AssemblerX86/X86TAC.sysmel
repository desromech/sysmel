TACPhysicalLocation extend: {
    public virtual method x86::int8For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 register with int8 section.".

    public virtual method x86::int16For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 register with int16 section.".

    public virtual method x86::int32For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 register with int32 section.".

    public virtual method x86::int64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 register with int64 section.".

    public virtual method x86::float32For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 register with float32 section.".

    public virtual method x86::float64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 register with float64 section.".

    public virtual method x86::vectorFor: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 register with vector128 section.".

    public virtual method x86::int8PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 pointer.".

    public virtual method x86::int16PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 pointer.".

    public virtual method x86::int32PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 pointer.".

    public virtual method x86::int64PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 pointer.".

    public virtual method x86::float32PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 pointer.".

    public virtual method x86::float64PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 pointer.".

    public virtual method x86::vector128PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 pointer.".

    public virtual method x86::immediate32For: (codegen: TACAsmCodeGenerator) ::=> AsmImmediate
        := self error: "Not an immediate 32".

    public virtual method x86::immediateS32OrInt64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not an immediate S32 or int64 register".

    public virtual method x86::rel32OrInt32For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 relative32 immediate or int32 register".

    public virtual method x86::rel32OrInt64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 relative32 immediate or int64 register".

    public virtual method x86::relCall32OrInt32For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 relativeCall32 immediate or int32 register".

    public virtual method x86::relCall32OrInt64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := self error: "Not a x86 relativeCall32 immediate or int64 register".

    public virtual method x86::loadFromLocal: (local: TACLocalVariable) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void
        := self shouldBeImplemented.

    public virtual method x86::storeInLocal: (local: TACLocalVariable) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void
        := self shouldBeImplemented.

    public virtual method x86_64::loadFromLocal: (local: TACLocalVariable) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void
        := self shouldBeImplemented.

    public virtual method x86_64::storeInLocal: (local: TACLocalVariable) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void
        := self shouldBeImplemented.
}.

TACPhysicalLocationImmediate extend: {
    public override method x86::int8For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := value asm::immediate8For: codegen.

    public override method x86::int16For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := value asm::immediate16For: codegen.

    public override method x86::int32For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := value asm::immediate32For: codegen.

    public override method x86::immediate32For: (codegen: TACAsmCodeGenerator) ::=> AsmImmediate
        := value asm::immediate32For: codegen.

    public override method x86::immediateS32OrInt64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := value asm::immediateS32For: codegen.

    public override method x86::int64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := value asm::immediate64For: codegen.

    public override method x86::rel32OrInt32For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := value asm::immediate32For: codegen.

    public override method x86::rel32OrInt64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := value asm::immediate32For: codegen.

    public override method x86::relCall32OrInt32For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := value asm::immediateCall32For: codegen.

    public override method x86::relCall32OrInt64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := value asm::immediateCall32For: codegen.
}.

public final class TACX86IntegerRegister superclass: TACPhysicalIntegerRegister; definition: {
    public field int8 => AsmX86Int8Register.
    public field int16 => AsmX86Int16Register.
    public field int32 => AsmX86Int32Register.

    public method x86::int8 => AsmX86Int8Register := int8.
    public method x86::int16 => AsmX86Int16Register := int16.
    public method x86::int32 => AsmX86Int32Register := int32.
    
    public override method x86::int8For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand := int8.
    public override method x86::int16For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand := int16.
    public override method x86::int32For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand := int32.

    public override method x86::rel32OrInt32For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand := int32.

    __Meta__ definition: {
        public method int8: (int8: AsmX86Int8Register) int16: (int16: AsmX86Int16Register) int32: (int32: AsmX86Int32Register) ::=> self
            := self new int8: int8; int16: int16; int32: int32; yourself.
    }.

    public override method x86::loadFromLocal: (local: TACLocalVariable) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        let localSize := local size.
        let isSignedExtended := local isSignedExtended.
        self assert: (localSize = 1sz) || (localSize = 2sz) || (localSize = 4sz).

        ## TODO: Support the lambda captures.
        let localPointer := AsmX86RegisterAddress base: X86::RBP size: localSize asUInt8 displacement: local offset asInt32 asAsmImmediate.
        localSize = 1u64 && isSignedExtended ifTrue: (codegen textSection x86::movsx: self x86::int32 src: localPointer).
        localSize = 1u64 && isSignedExtended not ifTrue: (codegen textSection x86::movzx: self x86::int32 src: localPointer).
        localSize = 2u64 && isSignedExtended ifTrue: (codegen textSection x86::movsx: self x86::int32 src: localPointer).
        localSize = 2u64 && isSignedExtended not ifTrue: (codegen textSection x86::movzx: self x86::int32 src: localPointer).
        localSize = 4u64 ifTrue: (codegen textSection x86::mov: self x86::int32 src: localPointer).
    }.

    public override method x86::storeInLocal: (local: TACLocalVariable) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        let localSize := local size.
        self assert: (localSize = 1u64) || (localSize = 2u64) || (localSize = 4u64).
        
        ## TODO: Support the lambda captures.
        let localPointer := AsmX86RegisterAddress base: X86::RBP size: localSize asUInt8 displacement: local offset asInt32 asAsmImmediate.
        localSize = 1u64 ifTrue: (codegen textSection x86::mov: localPointer src: self x86::int8).
        localSize = 2u64 ifTrue: (codegen textSection x86::mov: localPointer src: self x86::int16).
        localSize = 4u64 ifTrue: (codegen textSection x86::mov: localPointer src: self x86::int32).
    }.
}.

public final class TACX86_64IntegerRegister superclass: TACPhysicalIntegerRegister; definition: {
    public field int8 => AsmX86Int8Register.
    public field int16 => AsmX86Int16Register.
    public field int32 => AsmX86Int32Register.
    public field int64 => AsmX86Int64Register.

    public method x86::int8 => AsmX86Int8Register := int8.
    public method x86::int16 => AsmX86Int16Register := int16.
    public method x86::int32 => AsmX86Int32Register := int32.
    public method x86::int64 => AsmX86Int64Register := int64.

    public override method x86::int8For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand := int8.
    public override method x86::int16For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand := int16.
    public override method x86::int32For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand := int32.
    public override method x86::int64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand := int64.

    public override method x86::immediateS32OrInt64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := int64.

    public override method x86::int8PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := AsmX86RegisterAddress base: int64 size: 1u8 displacement: (offset x86::immediate32For: codegen).

    public override method x86::int16PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := AsmX86RegisterAddress base: int64 size: 2u8 displacement: (offset x86::immediate32For: codegen).

    public override method x86::int32PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := AsmX86RegisterAddress base: int64 size: 4u8 displacement: (offset x86::immediate32For: codegen).

    public override method x86::int64PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := AsmX86RegisterAddress base: int64 size: 8u8 displacement: (offset x86::immediate32For: codegen).

    public virtual method x86::float32PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := AsmX86RegisterAddress base: int64 size: 4u8 displacement: (offset x86::immediate32For: codegen).

    public virtual method x86::float64PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := AsmX86RegisterAddress base: int64 size: 8u8 displacement: (offset x86::immediate32For: codegen).

    public virtual method x86::vector128PointerWithOffset: (offset: TACPhysicalLocation) for: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := AsmX86RegisterAddress base: int64 size: 16u8 displacement: (offset x86::immediate32For: codegen).

    public override method x86::rel32OrInt64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := int64.
    public override method x86::relCall32OrInt32For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := int32.
    public override method x86::relCall32OrInt64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := int64.

    __Meta__ definition: {
        public method int8: (int8: AsmX86Int8Register) int16: (int16: AsmX86Int16Register) int32: (int32: AsmX86Int32Register) int64: (int64: AsmX86Int64Register) ::=> self
            := self new int8: int8; int16: int16; int32: int32; int64: int64; yourself.
    }.

    public override method x86_64::loadFromLocal: (local: TACLocalVariable) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        let localSize := local size.
        localSize = 0sz ifTrue: {return: void}.

        let isSignedExtended := local isSignedExtended.
        self assert: (localSize = 1sz) || (localSize = 2sz) || (localSize = 4sz) || (localSize = 8sz).

        ## TODO: Support the lambda captures.
        let localPointer := AsmX86RegisterAddress base: X86::RBP size: localSize asUInt8 displacement: local offset asInt32 asAsmImmediate.
        localSize = 1u64 && isSignedExtended ifTrue: (codegen textSection x86::movsx: self x86::int32 src: localPointer).
        localSize = 1u64 && isSignedExtended not ifTrue: (codegen textSection x86::movzx: self x86::int32 src: localPointer).
        localSize = 2u64 && isSignedExtended ifTrue: (codegen textSection x86::movsx: self x86::int32 src: localPointer).
        localSize = 2u64 && isSignedExtended not ifTrue: (codegen textSection x86::movzx: self x86::int32 src: localPointer).
        localSize = 4u64 ifTrue: (codegen textSection x86::mov: self x86::int32 src: localPointer).
        localSize = 8u64 ifTrue: (codegen textSection x86::mov: self x86::int64 src: localPointer).
    }.

    public override method x86_64::storeInLocal: (local: TACLocalVariable) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        let localSize := local size.
        localSize = 0sz ifTrue: {return: void}.

        (localSize = 1u64) || (localSize = 2u64) || (localSize = 4u64) || (localSize = 8u64) ifFalse: {
            self error: (local printString -- " " -- local type printString -- " invalid local size " -- localSize asString -- " for integer register")
        }.

        ## TODO: Support the lambda captures.
        let localPointer := AsmX86RegisterAddress base: X86::RBP size: localSize asUInt8 displacement: local offset asInt32 asAsmImmediate.
        localSize = 1u64 ifTrue: (codegen textSection x86::mov: localPointer src: self x86::int8).
        localSize = 2u64 ifTrue: (codegen textSection x86::mov: localPointer src: self x86::int16).
        localSize = 4u64 ifTrue: (codegen textSection x86::mov: localPointer src: self x86::int32).
        localSize = 8u64 ifTrue: (codegen textSection x86::mov: localPointer src: self x86::int64).
    }.
}.

public final class TACX86VectorRegister superclass: TACPhysicalVectorRegister; definition: {
    public field register => AsmX86VectorRegister.

    __Meta__ definition: {
        public method register: (reg: AsmX86VectorRegister) ::=> self
            := self new register: reg; yourself.
    }.

    public virtual method x86::float32For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := register.

    public virtual method x86::float64For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := register.

    public virtual method x86::vector128For: (codegen: TACAsmCodeGenerator) ::=> AsmInstructionOperand
        := register.

    public override method x86_64::loadFromLocal: (local: TACLocalVariable) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        let localSize := local size.
        localSize = 0sz ifTrue: {return: void}.

        (localSize = 4u64) || (localSize = 8u64) || (localSize = 16u64) ifFalse: {
            self error: (local printString -- " " -- local type printString -- " invalid local size " -- localSize asString -- " for vector register")
        }.

        ## TODO: Support the lambda captures.
        let localPointer := AsmX86RegisterAddress base: X86::RBP size: localSize asUInt8 displacement: local offset asInt32 asAsmImmediate.
        localSize = 4u64 ifTrue: (codegen textSection x86::movss: self register src: localPointer).
        localSize = 8u64 ifTrue: (codegen textSection x86::movsd: self register src: localPointer).
        localSize = 16u64 ifTrue: (codegen textSection x86::movaps: self register src: localPointer).
    }.

    public virtual method x86_64::storeInLocal: (local: TACLocalVariable) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        let localSize := local size.
        localSize = 0sz ifTrue: {return: void}.

        (localSize = 4u64) || (localSize = 8u64) || (localSize = 16u64) ifFalse: {
            self error: (local printString -- " " -- local type printString -- " invalid local size " -- localSize asString -- " for vector register")
        }.

        ## TODO: Support the lambda captures.
        let localPointer := AsmX86RegisterAddress base: X86::RBP size: localSize asUInt8 displacement: local offset asInt32 asAsmImmediate.
        localSize = 4u64 ifTrue: (codegen textSection x86::movss: localPointer src: register).
        localSize = 8u64 ifTrue: (codegen textSection x86::movsd: localPointer src: register).
        localSize = 16u64 ifTrue: (codegen textSection x86::movaps: localPointer src: register).
    }.
}.

public global TAC::X86::EAX => TACX86IntegerRegister := TACX86IntegerRegister int8: X86::AL int16: X86::AX int32: X86::EAX.
public global TAC::X86::ECX => TACX86IntegerRegister := TACX86IntegerRegister int8: X86::CL int16: X86::CX int32: X86::ECX.
public global TAC::X86::EDX => TACX86IntegerRegister := TACX86IntegerRegister int8: X86::DL int16: X86::DX int32: X86::EDX.
public global TAC::X86::EBX => TACX86IntegerRegister := TACX86IntegerRegister int8: X86::BL int16: X86::BX int32: X86::EBX.
public global TAC::X86::ESP => TACX86IntegerRegister := TACX86IntegerRegister int8: nil int16: X86::SP int32: X86::ESP.
public global TAC::X86::EBP => TACX86IntegerRegister := TACX86IntegerRegister int8: nil int16: X86::BP int32: X86::EBP.
public global TAC::X86::ESI => TACX86IntegerRegister := TACX86IntegerRegister int8: nil int16: X86::SI int32: X86::ESI.
public global TAC::X86::EDI => TACX86IntegerRegister := TACX86IntegerRegister int8: nil int16: X86::DI int32: X86::EDI.

public global TAC::X86::XMM0 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM0.
public global TAC::X86::XMM1 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM1.
public global TAC::X86::XMM2 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM2.
public global TAC::X86::XMM3 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM3.
public global TAC::X86::XMM4 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM4.
public global TAC::X86::XMM5 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM5.
public global TAC::X86::XMM6 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM6.
public global TAC::X86::XMM7 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM7.

public global TAC::X86::IntegerRegisters => Array := (TAC::X86::EAX, TAC::X86::ECX, TAC::X86::EDX, TAC::X86::EBX, TAC::X86::ESP, TAC::X86::EBP, TAC::X86::ESI, TAC::X86::EDI).
public global TAC::X86::AllocableIntegerRegisters => Array := (TAC::X86::EAX, TAC::X86::ECX, TAC::X86::EDX, TAC::X86::EBX, TAC::X86::ESI, TAC::X86::EDI).

public global TAC::X86::VectorRegisters => Array := (TAC::X86::XMM0, TAC::X86::XMM1, TAC::X86::XMM2, TAC::X86::XMM3, TAC::X86::XMM4, TAC::X86::XMM5, TAC::X86::XMM6, TAC::X86::XMM7).
public global TAC::X86::AllocableVectorRegisters => Array := TAC::X86::VectorRegisters.

public global TAC::X86_64::RAX => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::RAXB int16: X86::AX int32: X86::EAX int64: X86::RAX.
public global TAC::X86_64::RCX => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::RCXB int16: X86::CX int32: X86::ECX int64: X86::RCX.
public global TAC::X86_64::RDX => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::RDXB int16: X86::DX int32: X86::EDX int64: X86::RDX.
public global TAC::X86_64::RBX => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::RBXB int16: X86::BX int32: X86::EBX int64: X86::RBX.
public global TAC::X86_64::RSP => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::RSPB int16: X86::SP int32: X86::ESP int64: X86::RSP.
public global TAC::X86_64::RBP => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::RBPB int16: X86::BP int32: X86::EBP int64: X86::RBP.
public global TAC::X86_64::RSI => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::RSIB int16: X86::SI int32: X86::ESI int64: X86::RSI.
public global TAC::X86_64::RDI => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::RDIB int16: X86::DI int32: X86::EDI int64: X86::RDI.
public global TAC::X86_64::R8 => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::R8B int16: X86::R8W int32: X86::R8D int64: X86::R8.
public global TAC::X86_64::R9 => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::R9B int16: X86::R9W int32: X86::R9D int64: X86::R9.
public global TAC::X86_64::R10 => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::R10B int16: X86::R10W int32: X86::R10D int64: X86::R10.
public global TAC::X86_64::R11 => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::R11B int16: X86::R11W int32: X86::R11D int64: X86::R11.
public global TAC::X86_64::R12 => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::R12B int16: X86::R12W int32: X86::R12D int64: X86::R12.
public global TAC::X86_64::R13 => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::R13B int16: X86::R13W int32: X86::R13D int64: X86::R13.
public global TAC::X86_64::R14 => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::R14B int16: X86::R14W int32: X86::R14D int64: X86::R14.
public global TAC::X86_64::R15 => TACX86_64IntegerRegister := TACX86_64IntegerRegister int8: X86::R15B int16: X86::R15W int32: X86::R15D int64: X86::R15.

public global TAC::X86_64::XMM8 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM8.
public global TAC::X86_64::XMM9 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM9.
public global TAC::X86_64::XMM10 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM10.
public global TAC::X86_64::XMM11 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM11.
public global TAC::X86_64::XMM12 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM12.
public global TAC::X86_64::XMM13 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM13.
public global TAC::X86_64::XMM14 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM14.
public global TAC::X86_64::XMM15 => TACX86VectorRegister := TACX86VectorRegister register: X86::XMM15.

public global TAC::X86_64::VectorRegisters => Array := (
    TAC::X86::XMM0, TAC::X86::XMM1, TAC::X86::XMM2, TAC::X86::XMM3,
    TAC::X86::XMM4, TAC::X86::XMM5, TAC::X86::XMM6, TAC::X86::XMM7,
    TAC::X86_64::XMM8, TAC::X86_64::XMM9, TAC::X86_64::XMM10, TAC::X86_64::XMM11,
    TAC::X86_64::XMM12, TAC::X86_64::XMM13, TAC::X86_64::XMM14, TAC::X86_64::XMM15).
public global TAC::X86_64::AllocableVectorRegisters => Array := TAC::X86_64::VectorRegisters.

public global TAC::X86_64::IntegerRegisters => Array := (
    TAC::X86_64::RAX, TAC::X86_64::RCX, TAC::X86_64::RDX, TAC::X86_64::RBX,
    TAC::X86_64::RSP, TAC::X86_64::RBP, TAC::X86_64::RSI, TAC::X86_64::RDI,
    TAC::X86_64::R8, TAC::X86_64::R9, TAC::X86_64::R10, TAC::X86_64::R11,
    TAC::X86_64::R12, TAC::X86_64::R13, TAC::X86_64::R14, TAC::X86_64::R15
).

public global TAC::X86_64::AllocableIntegerRegisters => Array := (
    TAC::X86_64::RAX, TAC::X86_64::RCX, TAC::X86_64::RDX, TAC::X86_64::RBX,
    TAC::X86_64::RSI, TAC::X86_64::RDI,
    TAC::X86_64::R8, TAC::X86_64::R9, TAC::X86_64::R10, TAC::X86_64::R11,
    TAC::X86_64::R12, TAC::X86_64::R13, TAC::X86_64::R14, TAC::X86_64::R15
).

public abstract class TACSX86StackBasedCallingConvention superclass: TACCallingConvention; definition: {
    public method asm::generateCall: (instruction: TACInstruction) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection
            x86::call: (instruction firstOperandRegister x86::rel32OrInt32For: codegen)
    }.
}.

public final class TACSX86CDeclCallingConvention superclass: TACSX86StackBasedCallingConvention; definition: {
}.

public global TAC::X86::CDeclCallingConvention := TACSX86CDeclCallingConvention new.

public final class TACX86CompilationTarget superclass: TACAsmCompilationTarget; definition: {
    public override method name => Symbol
        := #x86.

    public override method allIntegerRegisters => Array
        := TAC::X86::IntegerRegisters.

    public override method allocableIntegerRegisters => Array
        := TAC::X86::AllocableIntegerRegisters.

    public override method allVectorRegisters => Array
        := TAC::X86::VectorRegisters.

    public override method allocableVectorRegisters => Array
        := TAC::X86::AllocableVectorRegisters.

    public override method usesVectorRegistersForFloatOperations => Boolean
        := true.

    public override method defaultCallingConvention => TACCallingConvention
        := TAC::X86::CDeclCallingConvention.

    public override method emitFunctionPrologueWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::endbr32.

        codegen stackFrameLayout isRequired ifTrue: {
            codegen textSection
                x86::push: X86::EBP;
                cfiPushRegister: X86::EBP;
                x86::mov: X86::EBP src: X86::ESP;
                cfiSaveFramePointer: X86::EBP.
        }.

    }.

    public override method emitStackFrameConstructionWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {

        codegen textSection cfiEndPrologue
    }.

    public override method emitFunctionEpilogueWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen stackFrameLayout isRequired ifTrue: {
            codegen textSection
                x86::mov: X86::ESP src: X86::EBP;
                x86::pop: X86::EBP.
        }.
    }.

    public override method emitMoveValue: (value: TACValue) intoLocation: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        value x86::moveIntoRegister: register with: codegen
    }.

    public override method emitMoveRegister: (register: TACPhysicalLocation) intoValue: (value: TACValue) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        value x86::moveFromRegister: register with: codegen
    }.
}.

public global X86_64::SysV::IntegerArgumentRegisters := (
    TAC::X86_64::RDI, TAC::X86_64::RSI, TAC::X86_64::RDX, TAC::X86_64::RCX, TAC::X86_64::R8, TAC::X86_64::R9
).

public global X86_64::SysV::VectorArgumentRegisters := (
    TAC::X86::XMM0, TAC::X86::XMM1, TAC::X86::XMM2, TAC::X86::XMM3, TAC::X86::XMM4, TAC::X86::XMM5, TAC::X86::XMM6, TAC::X86::XMM7
).

public final class TACSysVX86_64RegisterAssignmentState superclass: Object; definition: {
    public field usedIntegerRegisterCount => Size.
    public field usedVectorRegisterCount => Size.

    public method allocateIntegerRegister => TACPhysicalLocation := {
        usedIntegerRegisterCount < X86_64::SysV::IntegerArgumentRegisters size ifTrue: {
            let register := X86_64::SysV::IntegerArgumentRegisters at: usedIntegerRegisterCount.
            usedIntegerRegisterCount := usedIntegerRegisterCount + 1sz.
            register
        } ifFalse: {
            nil
        }
    }.

    public method allocateVectorRegister => TACPhysicalLocation := {
        usedVectorRegisterCount < X86_64::SysV::IntegerArgumentRegisters size ifTrue: {
            let register := X86_64::SysV::VectorArgumentRegisters at: usedVectorRegisterCount.
            usedVectorRegisterCount := usedVectorRegisterCount + 1sz.
            register
        } ifFalse: {
            nil
        }
    }.

    public method allocateIntegerOfSize: (size: UInt64) alignment: (alignment: UInt64) ::=> TACPhysicalLocation
        := size <= 8u64 ifTrue: (self allocateIntegerRegister) ifFalse: nil.

    public method allocateVectorOfSize: (size: UInt64) alignment: (alignment: UInt64) ::=> TACPhysicalLocation
        := size <= 16u64 ifTrue: (self allocateVectorRegister) ifFalse: nil.

    public method assignRegisterToValue: (value: TACValue) ::=> TACPhysicalLocation := {
        (value isFloatingPoint || value isVector)
            ifTrue: (self allocateVectorOfSize: value size alignment: value alignment)
            ifFalse: (self allocateIntegerOfSize: value size alignment: value alignment).
    }.
}.

public final class TACSysVX86_64CallingConvention superclass: TACCallingConvention; definition: {
    public method registerConstraintsOfCall: (instruction: TACInstruction) with: (allocator: TACRegisterAllocator) ::=> Void := {
        allocator
            allocateRegister: TAC::X86_64::RBX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 0sz.
        
        let registerAssignmentState := TACSysVX86_64RegisterAssignmentState new.
        1sz until: instruction operands size do: {:(Size)operandIndex :: Void |
            let operand := instruction operands at: operandIndex.
            let register := registerAssignmentState assignRegisterToValue: operand.
            register
                ifNotNil: (allocator allocateRegister: register forInstruction: instruction operandAt: operandIndex)
                ifNil: (allocator allocateMemoryForInstruction: instruction operandAt: operandIndex)
        }.
    }.

    public override method computeArgumentPassingLayoutOf: (function: TACFunction) ::=> Void := {
        let registerAssignmentState := TACSysVX86_64RegisterAssignmentState new.
        let stackSize mutable := 0u64.
        let argumentBaseOffset := 16u64.
        let stackArgumentAlignment := 8u64.

        function arguments do: {:(TACArgumentVariable)argument :: Void |
            let register := registerAssignmentState assignRegisterToValue: argument.
            register ifNotNil: {
                argument passingRegister: register
            } ifNil: {
                let argumentAlignment := argument alignment max: stackArgumentAlignment.
                let argumentSize := argument size alignedTo: argumentAlignment.
                let argumentOffset := stackSize alignedTo: argumentAlignment.

                argument offset: (stackSize + argumentBaseOffset) asInt64.
                stackSize := argumentOffset + argumentSize
            }
        }
    }.

    public override method registerConstraintsOfCallInt8: (instruction: TACInstruction) with: (allocator: TACRegisterAllocator) ::=> Void := {
        self registerConstraintsOfCall: instruction with: allocator.
        allocator allocateRegister: TAC::X86_64::RAX forInstructionResult: instruction.
    }.

    public override method registerConstraintsOfCallInt16: (instruction: TACInstruction) with: (allocator: TACRegisterAllocator) ::=> Void := {
        self registerConstraintsOfCall: instruction with: allocator.
        allocator allocateRegister: TAC::X86_64::RAX forInstructionResult: instruction.
    }.

    public override method registerConstraintsOfCallInt32: (instruction: TACInstruction) with: (allocator: TACRegisterAllocator) ::=> Void := {
        self registerConstraintsOfCall: instruction with: allocator.
        allocator allocateRegister: TAC::X86_64::RAX forInstructionResult: instruction.
    }.

    public override method registerConstraintsOfCallInt64: (instruction: TACInstruction) with: (allocator: TACRegisterAllocator) ::=> Void := {
        self registerConstraintsOfCall: instruction with: allocator.
        allocator allocateRegister: TAC::X86_64::RAX forInstructionResult: instruction.
    }.

    public override method registerConstraintsOfCallFloat32: (instruction: TACInstruction) with: (allocator: TACRegisterAllocator) ::=> Void := {
        self registerConstraintsOfCall: instruction with: allocator.
        allocator allocateRegister: TAC::X86::XMM0 forInstructionResult: instruction.
    }.

    public override method registerConstraintsOfCallFloat64: (instruction: TACInstruction) with: (allocator: TACRegisterAllocator) ::=> Void := {
        self registerConstraintsOfCall: instruction with: allocator.
        allocator allocateRegister: TAC::X86::XMM0 forInstructionResult: instruction.
    }.

    public override method registerConstraintsOfCallStruct: (instruction: TACInstruction) with: (allocator: TACRegisterAllocator) ::=> Void := {
        self registerConstraintsOfCall: instruction with: allocator.
        allocator allocateMemoryForInstructionResult: instruction.
    }.

    public override method registerConstraintsOfCallVoid: (instruction: TACInstruction) with: (allocator: TACRegisterAllocator) ::=> Void := {
        self registerConstraintsOfCall: instruction with: allocator
    }.

    public method asm::generateCall: (instruction: TACInstruction) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        let stackArguments := OrderedCollection new.
        let stackArgumentAlignment := 8u64.
        let stackSize mutable := 0u64.
        let stackAlignment mutable := 16u64.

        ## Select the arguments that are passed through the stack.
        1sz until: instruction operands size do: {:(Size)operandIndex :: Void |
            let argument => TACValue := instruction operands at: operandIndex.
            let register => TACPhysicalLocation := instruction operandRegisters at: operandIndex.
            register isMemory ifTrue: {
                let operandAlignment := argument alignment max: stackArgumentAlignment.
                let operandSize := argument size alignedTo: operandAlignment.
                let argumentOffset := stackSize alignedTo: operandAlignment.

                stackSize := argumentOffset + operandSize.
                stackAlignment := stackAlignment max: operandAlignment.
                
                stackArguments add: argument
            }.
        }.

        ## Compute the required argument padding.
        let alignedStackSize := stackSize alignedTo: stackAlignment.
        let stackPadding := alignedStackSize - stackSize.
        stackPadding > 0u64 ifTrue: {
            codegen textSection x86::sub: X86::RSP with: stackPadding asInt32 asAsmImmediate
        }.

        ## Push the arguments onto the stack.
        stackArguments reverseDo: {:(TACValue)argument :: Void |
            argument x86_64::pushWith: codegen scratchRegister: X86::RBX
        }.

        ## Perform the call.
        codegen textSection x86::call: (instruction firstOperandRegister x86::relCall32OrInt64For: codegen).

        ## Clear the stack arguments.
        alignedStackSize > 0u64 ifTrue: {
            codegen textSection
                x86::add: X86::RSP with: alignedStackSize asInt32 asAsmImmediate;
                cfiStackSizeAdvance: alignedStackSize asInt64 negated
        }.
    }.

    public override method asm::generateCallInt8: (instruction: TACInstruction) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        self asm::generateCall: instruction with: codegen
    }.

    public override method asm::generateCallInt16: (instruction: TACInstruction) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        self asm::generateCall: instruction with: codegen
    }.

    public override method asm::generateCallInt32: (instruction: TACInstruction) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        self asm::generateCall: instruction with: codegen
    }.

    public override method asm::generateCallInt64: (instruction: TACInstruction) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        self asm::generateCall: instruction with: codegen
    }.

    public override method asm::generateCallFloat32: (instruction: TACInstruction) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        self asm::generateCall: instruction with: codegen
    }.

    public override method asm::generateCallFloat64: (instruction: TACInstruction) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        self asm::generateCall: instruction with: codegen
    }.

    public override method asm::generateCallStruct: (instruction: TACInstruction) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        self asm::generateCall: instruction with: codegen
    }.

    public override method asm::generateCallVoid: (instruction: TACInstruction) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        self asm::generateCall: instruction with: codegen
    }.
}.

public global TAC::X86_64::SysVCallingConvention := TACSysVX86_64CallingConvention new.

public final class TACX86_64CompilationTarget superclass: TACAsmCompilationTarget; definition: {
    public override method name => Symbol
        := #x86_64.

    public override method allIntegerRegisters => Array
        := TAC::X86_64::IntegerRegisters.

    public override method allocableIntegerRegisters => Array
        := TAC::X86_64::AllocableIntegerRegisters.

    public override method allVectorRegisters => Array
        := TAC::X86::VectorRegisters.

    public override method allocableVectorRegisters => Array
        := TAC::X86::AllocableVectorRegisters.

    public override method usesVectorRegistersForFloatOperations => Boolean
        := true.

    public override method defaultCallingConvention => TACCallingConvention
        := TAC::X86_64::SysVCallingConvention.

    public override method emitFunctionPrologueWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::endbr64.

        let stackFrameLayout := codegen stackFrameLayout.
        stackFrameLayout isRequired ifTrue: {
            codegen textSection
                x86::push: X86::RBP;
                cfiPushRegister: X86::RBP;
                x86::mov: X86::RBP src: X86::RSP;
                cfiSaveFramePointer: X86::RBP.
        }.

    }.

    public override method emitStackFrameConstructionWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        let stackFrameLayout := codegen stackFrameLayout.
        stackFrameLayout isRequired ifTrue: {
            codegen stackMap frameBase: (AsmStackMapLocationRegister for: X86::RBP)
        }.

        let frameSize := stackFrameLayout temporaryFrameSize.
        frameSize > 0u64 ifTrue: {
            codegen textSection
                x86::sub: X86::RSP with: codegen stackFrameLayout temporaryFrameSize asInt32 asAsmImmediate;
                cfiStackSizeAdvance: frameSize asInt64
        }.
        codegen textSection cfiEndPrologue.
        
        codegen emitSpillRegisterArgumentsInStackFrame.
    }.

    public override method emitFunctionEpilogueWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        let stackFrameLayout := codegen stackFrameLayout.
        stackFrameLayout isRequired ifTrue: {
            codegen textSection
                cfiBeginEpilogue;
                x86::mov: X86::RSP src: X86::RBP;
                cfiRestoreFramePointer: X86::RBP offset: 0i64;
                x86::pop: X86::RBP;
                cfiPopRegister: X86::RBP.
        }.
    }.

    public override method emitMoveValue: (value: TACValue) intoLocation: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        value x86_64::moveIntoRegister: register with: codegen
    }.

    public override method emitMoveRegister: (register: TACPhysicalLocation) intoValue: (value: TACValue) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        value x86_64::moveFromRegister: register with: codegen
    }.
}.

TACValue extend: {
    public abstract method x86::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void
        := self subclassResponsibility.

    public abstract method x86::moveFromRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void
        := self subclassResponsibility.

    public abstract method x86::pushWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void
        := self subclassResponsibility.

    public virtual method x86_64::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void
        := self x86::moveIntoRegister: register with: codegen.

    public virtual method x86_64::moveFromRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void
        := self x86::moveFromRegister: register with: codegen.

    public virtual method x86_64::pushWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void
        := self subclassResponsibility.

    public virtual method x86_64::pushWith: (codegen: TACFunctionAsmCodeGenerator) scratchRegister: (scratchRegister: AsmInstructionOperand)::=> Void := {
        self x86_64::pushWith: codegen
    }.
}.

TACProgramEntity extend: {
    public override method x86::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::mov: (register x86::int32For: codegen) src: (codegen symbolForProgramEntity: self) dword
    }.

    public override method x86_64::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::lea: (register x86::int64For: codegen) src: (codegen symbolForProgramEntity: self) x86::qwordPtr
    }.
}.

TACLocalVariable extend: {
    public override method x86::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        register x86::loadFromLocal: self with: codegen
    }.

    public override method x86::moveFromRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        register x86::storeInLocal: self with: codegen
    }.

    public override method x86_64::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        register x86_64::loadFromLocal: self with: codegen
    }.

    public override method x86_64::moveFromRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        register x86_64::storeInLocal: self with: codegen
    }.

    public override method x86_64::pushWith: (codegen: TACFunctionAsmCodeGenerator) scratchRegister: (scratchRegister: AsmInstructionOperand)::=> Void := {
        let localSize := self size.
        (localSize = 1sz) || (localSize = 2sz) || (localSize = 4sz) || (localSize = 8sz) ifTrue: {
            let isSignedExtended := self isSignedExtended.

            ## TODO: Support the lambda captures.
            let localPointer := AsmX86RegisterAddress base: X86::RBP size: localSize asUInt8 displacement: self offset asInt32 asAsmImmediate.
            localSize = 1u64 && isSignedExtended ifTrue: (codegen textSection x86::movsx: scratchRegister src: localPointer).
            localSize = 1u64 && isSignedExtended not ifTrue: (codegen textSection x86::movzx: scratchRegister src: localPointer).
            localSize = 2u64 && isSignedExtended ifTrue: (codegen textSection x86::movsx: scratchRegister src: localPointer).
            localSize = 2u64 && isSignedExtended not ifTrue: (codegen textSection x86::movzx: scratchRegister src: localPointer).
            localSize = 4u64 ifTrue: (codegen textSection x86::mov: scratchRegister src: localPointer).
            localSize = 8u64 ifTrue: {
                codegen textSection x86::push: localPointer
            } ifFalse: {
                codegen textSection x86::push: scratchRegister
            }.
            codegen textSection cfiStackSizeAdvance: 8i64.
        } ifFalse: {
            ## TODO: Implement this
            codegen textSection x86::int3; x86::nop
        }
    }.

}.

TACConstant extend: {
    public override method x86_64::moveFromRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void
        := self error: "Cannot move into constant.".
}.

TACConstantInt8 extend: {
    public override method x86::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::mov: (register x86::int32For: codegen) src: value asUInt32 asAsmImmediate.
    }.

    public override method x86_64::pushWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::push: value asInt32 asAsmImmediate
    }.
}.

TACConstantUInt8 extend: {
    public override method x86::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::mov: (register x86::int32For: codegen) src: value asUInt32 asAsmImmediate.
    }.

    public override method x86_64::pushWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::push: value asInt32 asAsmImmediate
    }.
}.

TACConstantInt16 extend: {
    public override method x86::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::mov: (register x86::int32For: codegen) src: value asUInt32 asAsmImmediate.
    }.

    public override method x86_64::pushWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::push: value asInt32 asAsmImmediate
    }.
}.

TACConstantUInt16 extend: {
    public override method x86::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::mov: (register x86::int32For: codegen) src: value asUInt32 asAsmImmediate.
    }.

    public override method x86_64::pushWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::push: value asInt32 asAsmImmediate
    }.
}.

TACConstantInt32 extend: {
    public override method x86::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::mov: (register x86::int32For: codegen) src: value asAsmImmediate.
    }.

    public override method x86_64::pushWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::push: value asAsmImmediate
    }.
}.

TACConstantUInt32 extend: {
    public override method x86::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::mov: (register x86::int32For: codegen) src: value asAsmImmediate.
    }.

    public override method x86_64::pushWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::push: value asAsmImmediate
    }.
}.

TACConstantInt64 extend: {
    public override method x86_64::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::mov: (register x86::int64For: codegen) src: value asAsmImmediate.
    }.
}.

TACConstantUInt64 extend: {
    public override method x86_64::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::mov: (register x86::int64For: codegen) src: value asAsmImmediate.
    }.
}.

TACConstantFloat32 extend: {
    public override method x86::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        ## TODO: Implement this
        codegen textSection x86::int3; x86::nop
    }.

    public override method x86::moveFromRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        ## TODO: Implement this
        codegen textSection x86::int3; x86::nop
    }.

    public override method x86_64::pushWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::push: value asIEEEFloat32Encoding asAsmImmediate
    }.
}.

TACConstantFloat64 extend: {
    public override method x86::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        ## TODO: Implement this
        codegen textSection x86::int3; x86::nop
    }.

    public override method x86::moveFromRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        ## TODO: Implement this
        codegen textSection x86::int3; x86::nop
    }.

    public override method x86_64::pushWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::push: value asIEEEFloat64Encoding asAsmImmediate
    }.
}.

TACGenericObjectPointerConstant extend: {
    public override method x86_64::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::mov: (register x86::int64For: codegen) src: (codegen x86_64::pointerForGCRootObjectTableEntryFor: self object).
    }.

    public override method x86::pushWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::push: (codegen x86_64::pointerForGCRootObjectTableEntryFor: self object)
    }.
}.

TACStringLiteralPointerConstant extend: {
    public override method x86_64::moveIntoRegister: (register: TACPhysicalLocation) with: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::lea: (register x86::int64For: codegen) src: (codegen symbolOfStringLiteral: string nullTerminated: nullTerminated) x86::qwordPtr
    }.

    public override method x86::pushWith: (codegen: TACFunctionAsmCodeGenerator) ::=> Void := {
        codegen textSection x86::push: (codegen symbolOfStringLiteral: string nullTerminated: nullTerminated) dword
    }.
}.

TACFunctionAsmCodeGenerator extend: {
    public method x86::pointerForGCRootObjectTableEntryFor: (object: Untyped) ::=> AsmInstructionOperand := {
        let offset := moduleGenerator offsetOfGCRootObjectTableEntryFor: object.
        AsmX86RegisterAddress size: target pointerSize asUInt8 displacement: moduleGenerator gcRootObjectTableSymbol dword + offset asInt64
    }.

    public method x86_64::pointerForGCRootObjectTableEntryFor: (object: Untyped) ::=> AsmInstructionOperand := {
        moduleGenerator imageObjectTrace isLocked && (moduleGenerator imageObjectTrace includesObject: object) not ifTrue: {
            0u32 asAsmImmediate
        } ifFalse: {
            let offset := moduleGenerator offsetOfGCRootObjectTableEntryFor: object.
            AsmX86RegisterAddress size: target pointerSize asUInt8 displacement: moduleGenerator gcRootObjectTableSymbol qword + offset asInt64
        }.
    }.
}.

let x86::integerAluUnaryInt8RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz
}.

let x86::integerAluUnaryInt16RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz
}.

let x86::integerAluUnaryInt32RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz
}.

let x86::integerAluUnaryInt64RegisterConstraints := x86::integerAluUnaryInt32RegisterConstraints.

let x86::integerAluInt8RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediate8ForInstruction: instruction operandAt: 1sz
}.

let x86::integerAluInt16RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediate16ForInstruction: instruction operandAt: 1sz
}.

let x86::integerAluInt32RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 1sz
}.

let x86::integerAluInt64RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate64ForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediateS32ForInstruction: instruction operandAt: 1sz
}.

TAC::Operation::Int8Negate
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluUnaryInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::neg: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8BitNot
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluUnaryInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::not: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8Add
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::add: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8Sub
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::sub: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8BitAnd
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::and: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8BitOr
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::or: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8BitXor
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::xor: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int16Negate
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluUnaryInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::neg: (instruction resultRegister x86::int16For: codegen)
    }.

TAC::Operation::Int16BitNot
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluUnaryInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::not: (instruction resultRegister x86::int16For: codegen)
    }.

TAC::Operation::Int16Add
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::add: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::Int16Sub
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::sub: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::Int16BitAnd
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::and: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::Int16BitOr
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::or: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::Int16BitXor
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::xor: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::Int32Negate
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluUnaryInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::neg: (instruction resultRegister x86::int32For: codegen)
    }.

TAC::Operation::Int32BitNot
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluUnaryInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::not: (instruction resultRegister x86::int32For: codegen)
    }.

TAC::Operation::Int32Add
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::add: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int32Sub
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::sub: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int32BitAnd
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::and: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int32BitOr
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::or: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int32BitXor
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerAluInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::xor: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int64Negate
    forTarget: #x86_64 registerConstraintsWith: x86::integerAluUnaryInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::neg: (instruction resultRegister x86::int64For: codegen)
    }.

TAC::Operation::Int64BitNot
    forTarget: #x86_64 registerConstraintsWith: x86::integerAluUnaryInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::not: (instruction resultRegister x86::int64For: codegen)
    }.

TAC::Operation::Int64Add
    forTarget: #x86_64 registerConstraintsWith: x86::integerAluInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::add: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen)
    }.

TAC::Operation::Int64Sub
    forTarget: #x86_64 registerConstraintsWith: x86::integerAluInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::sub: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen)
    }.

TAC::Operation::Int64BitAnd
    forTarget: #x86_64 registerConstraintsWith: x86::integerAluInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::and: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen)
    }.

TAC::Operation::Int64BitOr
    forTarget: #x86_64 registerConstraintsWith: x86::integerAluInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::or: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen)
    }.

TAC::Operation::Int64BitXor
    forTarget: #x86_64 registerConstraintsWith: x86::integerAluInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::xor: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen)
    }.

let x86::integerMul32RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz;
        allocateRegisterForInstruction: instruction operandAt: 1sz
}.

let x86::integerMul64RegisterConstraints := x86::integerMul32RegisterConstraints.

TAC::Operation::Int32Mul
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerMul32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::imul: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int64Mul
    forTarget: #x86_64 registerConstraintsWith: x86::integerMul64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::imul: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::int64For: codegen)
    }.

TAC::Operation::Int16UDiv
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86::EAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86::EAX forInstructionResult: instruction;
            allocateRegister: TAC::X86::EDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86_64::RAX forInstructionResult: instruction;
            allocateRegister: TAC::X86_64::RDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::xor: X86::DX with: X86::DX;
            x86::div: (instruction secondOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::Int16URem
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86::EAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86::EDX forInstructionResult: instruction;
            allocateRegister: TAC::X86::EDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86_64::RDX forInstructionResult: instruction;
            allocateRegister: TAC::X86_64::RDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::xor: X86::DX with: X86::DX;
            x86::div: (instruction secondOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::Int16SDiv
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86::EAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86::EAX forInstructionResult: instruction;
            allocateRegister: TAC::X86::EDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86_64::RAX forInstructionResult: instruction;
            allocateRegister: TAC::X86_64::RDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cwd;
            x86::div: (instruction secondOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::Int16SRem
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86::EAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86::EDX forInstructionResult: instruction;
            allocateRegister: TAC::X86::EDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86_64::RDX forInstructionResult: instruction;
            allocateRegister: TAC::X86_64::RDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cwd;
            x86::div: (instruction secondOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::Int32UDiv
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86::EAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86::EAX forInstructionResult: instruction;
            allocateRegister: TAC::X86::EDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86_64::RAX forInstructionResult: instruction;
            allocateRegister: TAC::X86_64::RDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::xor: X86::EDX with: X86::EDX;
            x86::div: (instruction secondOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int32URem
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86::EAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86::EDX forInstructionResult: instruction;
            allocateRegister: TAC::X86::EDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86_64::RDX forInstructionResult: instruction;
            allocateRegister: TAC::X86_64::RDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::xor: X86::EDX with: X86::EDX;
            x86::div: (instruction secondOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int32SDiv
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86::EAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86::EAX forInstructionResult: instruction;
            allocateRegister: TAC::X86::EDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86_64::RAX forInstructionResult: instruction;
            allocateRegister: TAC::X86_64::RDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cdq;
            x86::idiv: (instruction secondOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int32SRem
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86::EAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86::EDX forInstructionResult: instruction;
            allocateRegister: TAC::X86::EDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86_64::RDX forInstructionResult: instruction;
            allocateRegister: TAC::X86_64::RDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cdq;
            x86::idiv: (instruction secondOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int64UDiv
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86_64::RAX forInstructionResult: instruction;
            allocateRegister: TAC::X86_64::RDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::xor: X86::RDX with: X86::RDX;
            x86::div: (instruction secondOperandRegister x86::int64For: codegen)
    }.

TAC::Operation::Int64URem
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86_64::RDX forInstructionResult: instruction;
            allocateRegister: TAC::X86_64::RDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::xor: X86::RDX with: X86::RDX;
            x86::div: (instruction secondOperandRegister x86::int64For: codegen)
    }.

TAC::Operation::Int64SDiv
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86_64::RAX forInstructionResult: instruction;
            allocateRegister: TAC::X86_64::RDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cqo;
            x86::idiv: (instruction secondOperandRegister x86::int64For: codegen)
    }.

TAC::Operation::Int64SRem
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz;
            allocateRegister: TAC::X86_64::RDX forInstructionResult: instruction;
            allocateRegister: TAC::X86_64::RDX forInstruction: instruction scratchAt: 0sz;
            allocateRegisterForInstruction: instruction operandAt: 1sz
    };
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cqo;
            x86::idiv: (instruction secondOperandRegister x86::int64For: codegen)
    }.

let x86::integerShift8RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegister: TAC::X86::ECX orImmediateU8ForInstruction: instruction operandAt: 1sz;
        allocateRegister8ForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz
}.

let x86::integerShiftRegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegister: TAC::X86::ECX orImmediateU8ForInstruction: instruction operandAt: 1sz;
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz
}.

let x86_64::integerShiftRegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegister: TAC::X86_64::RCX orImmediateU8ForInstruction: instruction operandAt: 1sz;
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate64ForInstruction: instruction operandAt: 0sz
}.

TAC::Operation::Int8ArithmeticShiftRight
    forTarget: #x86 registerConstraintsWith: x86::integerShift8RegisterConstraints;
    forTarget: #x86_64 registerConstraintsWith: x86_64::integerShiftRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::sar: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8LogicalShiftLeft
    forTarget: #x86 registerConstraintsWith: x86::integerShift8RegisterConstraints;
    forTarget: #x86_64 registerConstraintsWith: x86_64::integerShiftRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::sal: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8LogicalShiftRight
    forTarget: #x86 registerConstraintsWith: x86::integerShift8RegisterConstraints;
    forTarget: #x86_64 registerConstraintsWith: x86_64::integerShiftRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::shr: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int16ArithmeticShiftRight
    forTarget: #x86 registerConstraintsWith: x86::integerShiftRegisterConstraints;
    forTarget: #x86_64 registerConstraintsWith: x86_64::integerShiftRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::sar: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int16LogicalShiftLeft
    forTarget: #x86 registerConstraintsWith: x86::integerShiftRegisterConstraints;
    forTarget: #x86_64 registerConstraintsWith: x86_64::integerShiftRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::sal: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int16LogicalShiftRight
    forTarget: #x86 registerConstraintsWith: x86::integerShiftRegisterConstraints;
    forTarget: #x86_64 registerConstraintsWith: x86_64::integerShiftRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::shr: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int32ArithmeticShiftRight
    forTarget: #x86 registerConstraintsWith: x86::integerShiftRegisterConstraints;
    forTarget: #x86_64 registerConstraintsWith: x86_64::integerShiftRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::sar: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int32LogicalShiftLeft
    forTarget: #x86 registerConstraintsWith: x86::integerShiftRegisterConstraints;
    forTarget: #x86_64 registerConstraintsWith: x86_64::integerShiftRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::sal: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int32LogicalShiftRight
    forTarget: #x86 registerConstraintsWith: x86::integerShiftRegisterConstraints;
    forTarget: #x86_64 registerConstraintsWith: x86_64::integerShiftRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::shr: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int64ArithmeticShiftRight
    forTarget: #x86_64 registerConstraintsWith: x86_64::integerShiftRegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::sar: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int64LogicalShiftLeft
    forTarget: #x86_64 registerConstraintsWith: x86_64::integerShiftRegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::sal: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::Int64LogicalShiftRight
    forTarget: #x86_64 registerConstraintsWith: x86_64::integerShiftRegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::shr: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen)
    }.


let x86::integerComparisonInt8RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediate8ForInstruction: instruction operandAt: 1sz
}.

TAC::Operation::Int8Equals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::sete: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8NotEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::setne: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8LessThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::setl: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8LessOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::setle: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8GreaterThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::setg: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int8GreaterOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::setge: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt8LessThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::setb: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt8LessOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::setbe: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt8GreaterThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::seta: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt8GreaterOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::setae: (instruction resultRegister x86::int8For: codegen)
    }.

let x86::integerComparisonBranchInt8RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediate8ForInstruction: instruction operandAt: 1sz;
        allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 2sz;
        allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 3sz
}.

TAC::Operation::Int8EqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jnz: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int8NotEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jz: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int8LessThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jge: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int8LessOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jg: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int8GreaterThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jle: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int8GreaterOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jl: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int8LessThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jge: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int8LessOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jg: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int8GreaterThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jle: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int8GreaterOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jl: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt8LessThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jae: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt8LessOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::ja: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt8GreaterThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jbe: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt8GreaterOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt8RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int8For: codegen) with: (instruction secondOperandRegister x86::int8For: codegen);
            x86::jb: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

let x86::integerComparisonInt16RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediate16ForInstruction: instruction operandAt: 1sz
}.

TAC::Operation::Int16Equals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::sete: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int16NotEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::setne: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int16LessThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::setl: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int16LessOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::setle: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int16GreaterThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::setg: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int16GreaterOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::setge: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt16LessThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::setb: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt16LessOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::setbe: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt16GreaterThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::seta: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt16GreaterOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::setae: (instruction resultRegister x86::int8For: codegen)
    }.

let x86::integerComparisonBranchInt16RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediate16ForInstruction: instruction operandAt: 1sz;
        allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 2sz;
        allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 3sz
}.

TAC::Operation::Int16EqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jnz: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int16NotEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jz: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int16LessThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jge: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int16LessOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jg: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int16GreaterThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jle: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int16GreaterOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jl: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int16LessThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jge: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int16LessOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jg: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int16GreaterThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jle: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int16GreaterOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jl: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt16LessThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jae: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt16LessOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::ja: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt16GreaterThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jbe: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt16GreaterOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt16RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int16For: codegen) with: (instruction secondOperandRegister x86::int16For: codegen);
            x86::jb: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

let x86::integerComparisonInt32RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 1sz
}.

TAC::Operation::Int32Equals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::sete: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int32NotEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::setne: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int32LessThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::setl: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int32LessOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::setle: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int32GreaterThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::setg: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int32GreaterOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::setge: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt32LessThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::setb: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt32LessOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::setbe: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt32GreaterThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::seta: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt32GreaterOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen);
            x86::cmp: (instruction resultRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::setae: (instruction resultRegister x86::int8For: codegen)
    }.

let x86::integerComparisonBranchInt32RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 1sz;
        allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 2sz;
        allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 3sz
}.

TAC::Operation::Int32EqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jnz: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int32NotEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jz: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int32LessThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jge: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int32LessOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jg: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int32GreaterThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jle: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int32GreaterOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jl: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int32LessThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jge: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int32LessOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jg: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int32GreaterThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jle: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int32GreaterOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jl: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt32LessThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jae: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt32LessOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::ja: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt32GreaterThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jbe: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt32GreaterOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::integerComparisonBranchInt32RegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int32For: codegen) with: (instruction secondOperandRegister x86::int32For: codegen);
            x86::jb: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

## Int64 comparisons
let x86::integerComparisonInt64RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate64ForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediateS32ForInstruction: instruction operandAt: 1sz
}.

TAC::Operation::Int64Equals
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::cmp: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::sete: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int64NotEquals
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::cmp: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::setne: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int64LessThan
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::cmp: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::setl: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int64LessOrEquals
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::cmp: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::setle: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int64GreaterThan
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::cmp: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::setg: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Int64GreaterOrEquals
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::cmp: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::setge: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt64LessThan
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::cmp: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::setb: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt64LessOrEquals
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::cmp: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::setbe: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt64GreaterThan
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::cmp: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::seta: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::UInt64GreaterOrEquals
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen);
            x86::cmp: (instruction resultRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::setae: (instruction resultRegister x86::int8For: codegen)
    }.

let x86::integerComparisonBranchInt64RegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediateS32ForInstruction: instruction operandAt: 1sz;
        allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 2sz;
        allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 3sz
}.

TAC::Operation::Int64EqualsBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jnz: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int64NotEqualsBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jz: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int64LessThanBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jge: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int64LessOrEqualsBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jg: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int64GreaterThanBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jle: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int64GreaterOrEqualsBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jl: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int64LessThanBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jge: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int64LessOrEqualsBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jg: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int64GreaterThanBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jle: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Int64GreaterOrEqualsBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jl: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt64LessThanBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jae: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt64LessOrEqualsBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::ja: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt64GreaterThanBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jbe: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::UInt64GreaterOrEqualsBranch
    forTarget: #x86_64 registerConstraintsWith: x86::integerComparisonBranchInt64RegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::cmp: (instruction firstOperandRegister x86::int64For: codegen) with: (instruction secondOperandRegister x86::immediateS32OrInt64For: codegen);
            x86::jb: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

let x86::moveIntegerRegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz
}.

let x86::moveIntegerRegister16Constraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate16ForInstruction: instruction operandAt: 0sz
}.

let x86::moveIntegerRegister8Constraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate8ForInstruction: instruction operandAt: 0sz
}.

TAC::Operation::MoveInt8
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::MoveInt16
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::MoveInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::MoveInt64
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen)
    }.

let x86::loadPointerRegisterContraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz;
        allocateImmediate32ForInstruction: instruction operandAt: 1sz
}.

TAC::Operation::LoadInt8
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::loadPointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movsx: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int8PointerWithOffset: instruction secondOperandRegister for: codegen)
    }.

TAC::Operation::LoadUInt8
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::loadPointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movzx: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int8PointerWithOffset: instruction secondOperandRegister for: codegen)
    }.

TAC::Operation::LoadInt16
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::loadPointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movsx: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int16PointerWithOffset: instruction secondOperandRegister for: codegen)
    }.

TAC::Operation::LoadUInt16
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::loadPointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movzx: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int16PointerWithOffset: instruction secondOperandRegister for: codegen)
    }.

TAC::Operation::LoadInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::loadPointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32PointerWithOffset: instruction secondOperandRegister for: codegen)
    }.

TAC::Operation::LoadUInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::loadPointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32PointerWithOffset: instruction secondOperandRegister for: codegen)
    }.

TAC::Operation::LoadInt64
    forTarget: #x86_64 registerConstraintsWith: x86::loadPointerRegisterContraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64PointerWithOffset: instruction secondOperandRegister for: codegen)
    }.

TAC::Operation::LoadUInt64
    forTarget: #x86_64 registerConstraintsWith: x86::loadPointerRegisterContraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int64PointerWithOffset: instruction secondOperandRegister for: codegen)
    }.

TAC::Operation::LoadStruct
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateMemoryForInstructionResult: instruction;
            allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz;
            allocateImmediate32ForInstruction: instruction operandAt: 1sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::int3; x86::nop
    }.

let x86::storePointerRegisterContraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 1sz;
        allocateImmediate32ForInstruction: instruction operandAt: 2sz
}.

TAC::Operation::StoreInt8
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::storePointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction secondOperandRegister x86::int8PointerWithOffset: instruction thirdOperandRegister for: codegen) src: (instruction firstOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::StoreInt16
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::storePointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction secondOperandRegister x86::int16PointerWithOffset: instruction thirdOperandRegister for: codegen) src: (instruction firstOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::StoreInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::storePointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction secondOperandRegister x86::int32PointerWithOffset: instruction thirdOperandRegister for: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::StoreInt64
    forTarget: #x86_64 registerConstraintsWith: x86::storePointerRegisterContraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction secondOperandRegister x86::int64PointerWithOffset: instruction thirdOperandRegister for: codegen) src: (instruction firstOperandRegister x86::int64For: codegen)
    }.

TAC::Operation::StoreStruct
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateMemoryForInstruction: instruction operandAt: 0sz;
            allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 1sz;
            allocateImmediate32ForInstruction: instruction operandAt: 2sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::int3; x86::nop
    }.

TAC::Operation::TruncateInt64ToInt32
    forTarget: #x86_64 registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::TruncateInt64ToInt16
    forTarget: #x86_64 registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int16For: codegen) src: (instruction firstOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::TruncateInt64ToInt8
    forTarget: #x86_64 registerConstraintsWith: x86::moveIntegerRegister8Constraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int8For: codegen) src: (instruction firstOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::TruncateInt32ToInt16
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int16For: codegen) src: (instruction firstOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::TruncateInt32ToInt8
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegister8Constraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int8For: codegen) src: (instruction firstOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::TruncateInt16ToInt8
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegister8Constraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::mov: (instruction resultRegister x86::int16For: codegen) src: (instruction firstOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::SignExtendInt32ToInt64
    forTarget: #x86_64 registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movsxd: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::SignExtendInt16ToInt64
    forTarget: #x86_64 registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movsx: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::SignExtendInt8ToInt64
    forTarget: #x86_64 registerConstraintsWith: x86::moveIntegerRegister8Constraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movsx: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::SignExtendInt16ToInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movsx: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::SignExtendInt8ToInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegister8Constraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movsx: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::SignExtendInt8ToInt16
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegister8Constraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movsx: (instruction resultRegister x86::int16For: codegen) src: (instruction firstOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::ZeroExtendInt32ToInt64
    forTarget: #x86_64 registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::direct::mov: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::ZeroExtendInt16ToInt64
    forTarget: #x86_64 registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movzx: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::ZeroExtendInt8ToInt64
    forTarget: #x86_64 registerConstraintsWith: x86::moveIntegerRegister8Constraints;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movzx: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::int16For: codegen)
    }.

TAC::Operation::ZeroExtendInt16ToInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movsx: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::ZeroExtendInt8ToInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegister8Constraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movzx: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int8For: codegen)
    }.

TAC::Operation::ZeroExtendInt8ToInt16
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::moveIntegerRegister8Constraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movzx: (instruction resultRegister x86::int16For: codegen) src: (instruction firstOperandRegister x86::int8For: codegen)
    }.

let x86::vectorMoveRegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrMemoryForInstruction: instruction operandAt: 0sz
}.

let x86::vectorStorePointerRegisterContraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrImmediate32ForInstruction: instruction operandAt: 1sz;
        allocateImmediate32ForInstruction: instruction operandAt: 2sz
}.

TAC::Operation::MoveFloat32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorMoveRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::MoveFloat64
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorMoveRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movsd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen)
    }.

TAC::Operation::LoadFloat32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::loadPointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::float32PointerWithOffset: instruction secondOperandRegister for: codegen)
    }.

TAC::Operation::LoadFloat64
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::loadPointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movsd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::float64PointerWithOffset: instruction secondOperandRegister for: codegen)
    }.

TAC::Operation::StoreFloat32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorStorePointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movss: (instruction secondOperandRegister x86::float32PointerWithOffset: instruction thirdOperandRegister for: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::StoreFloat64
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorStorePointerRegisterContraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movsd: (instruction secondOperandRegister x86::float64PointerWithOffset: instruction thirdOperandRegister for: codegen) src: (instruction firstOperandRegister x86::float64For: codegen)
    }.

let x86::vectorUnaryAluRegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrMemoryForInstruction: instruction operandAt: 0sz
}.

let x86::vectorAluRegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrMemoryForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrMemoryForInstruction: instruction operandAt: 1sz
}.

let x86::vectorScalarComparisonRegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrMemoryForInstruction: instruction operandAt: 1sz
}.

let x86::vectorScalarComparisonBranchRegisterConstraints := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstruction: instruction operandAt: 0sz;
        allocateRegisterOrMemoryForInstruction: instruction operandAt: 1sz;
        allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 2sz;
        allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 3sz
}.

TAC::Operation::Float32Add
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorAluRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen);
            x86::addss: (instruction resultRegister x86::float32For: codegen) with: (instruction secondOperandRegister x86::float32For: codegen).
    }.

TAC::Operation::Float32Negate
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorUnaryAluRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::xorps: (instruction resultRegister x86::float32For: codegen) with: (instruction resultRegister x86::float32For: codegen);
            x86::subss: (instruction resultRegister x86::float32For: codegen) with: (instruction firstOperandRegister x86::float32For: codegen).
    }.

TAC::Operation::Float32Sub
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorAluRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen);
            x86::subss: (instruction resultRegister x86::float32For: codegen) with: (instruction secondOperandRegister x86::float32For: codegen).
    }.

TAC::Operation::Float32Mul
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorAluRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen);
            x86::mulss: (instruction resultRegister x86::float32For: codegen) with: (instruction secondOperandRegister x86::float32For: codegen).
    }.

TAC::Operation::Float32Div
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorAluRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen);
            x86::divss: (instruction resultRegister x86::float32For: codegen) with: (instruction secondOperandRegister x86::float32For: codegen).
    }.

TAC::Operation::Float32Sqrt
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorUnaryAluRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::sqrtss: (instruction resultRegister x86::float32For: codegen) with: (instruction firstOperandRegister x86::float32For: codegen).
    }.

TAC::Operation::Float32UnorderedEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomiss: (instruction firstOperandRegister x86::float32For: codegen) src: (instruction secondOperandRegister x86::float32For: codegen);
            x86::sete: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Float32UnorderedNotEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomiss: (instruction firstOperandRegister x86::float32For: codegen) src: (instruction secondOperandRegister x86::float32For: codegen);
            x86::setne: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Float32UnorderedLessThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomiss: (instruction firstOperandRegister x86::float32For: codegen) src: (instruction secondOperandRegister x86::float32For: codegen);
            x86::setl: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Float32UnorderedLessOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomiss: (instruction firstOperandRegister x86::float32For: codegen) src: (instruction secondOperandRegister x86::float32For: codegen);
            x86::setle: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Float32UnorderedGreaterThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomiss: (instruction firstOperandRegister x86::float32For: codegen) src: (instruction secondOperandRegister x86::float32For: codegen);
            x86::setg: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Float32UnorderedGreaterOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomiss: (instruction firstOperandRegister x86::float32For: codegen) src: (instruction secondOperandRegister x86::float32For: codegen);
            x86::setge: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Float32UnorderedEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonBranchRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomiss: (instruction firstOperandRegister x86::float32For: codegen) src: (instruction secondOperandRegister x86::float32For: codegen);
            x86::jnz: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Float32UnorderedNotEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonBranchRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomiss: (instruction firstOperandRegister x86::float32For: codegen) src: (instruction secondOperandRegister x86::float32For: codegen);
            x86::jz: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Float32UnorderedLessThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonBranchRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomiss: (instruction firstOperandRegister x86::float32For: codegen) src: (instruction secondOperandRegister x86::float32For: codegen);
            x86::jge: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.
TAC::Operation::Float32UnorderedLessOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonBranchRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomiss: (instruction firstOperandRegister x86::float32For: codegen) src: (instruction secondOperandRegister x86::float32For: codegen);
            x86::jg: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Float32UnorderedGreaterThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonBranchRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomiss: (instruction firstOperandRegister x86::float32For: codegen) src: (instruction secondOperandRegister x86::float32For: codegen);
            x86::jle: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.
TAC::Operation::Float32UnorderedGreaterOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonBranchRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomiss: (instruction firstOperandRegister x86::float32For: codegen) src: (instruction secondOperandRegister x86::float32For: codegen);
            x86::jl: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Float64Add
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorAluRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movsd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen);
            x86::addsd: (instruction resultRegister x86::float64For: codegen) with: (instruction secondOperandRegister x86::float64For: codegen).
    }.

TAC::Operation::Float64Negate
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorUnaryAluRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::xorpd: (instruction resultRegister x86::float64For: codegen) with: (instruction resultRegister x86::float64For: codegen);
            x86::subsd: (instruction resultRegister x86::float64For: codegen) with: (instruction firstOperandRegister x86::float64For: codegen).
    }.

TAC::Operation::Float64Sub
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorAluRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movsd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen);
            x86::subsd: (instruction resultRegister x86::float64For: codegen) with: (instruction secondOperandRegister x86::float64For: codegen).
    }.

TAC::Operation::Float64Mul
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorAluRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movsd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen);
            x86::mulsd: (instruction resultRegister x86::float64For: codegen) with: (instruction secondOperandRegister x86::float64For: codegen).
    }.

TAC::Operation::Float64Div
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorAluRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movsd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen);
            x86::divsd: (instruction resultRegister x86::float64For: codegen) with: (instruction secondOperandRegister x86::float64For: codegen).
    }.

TAC::Operation::Float64Sqrt
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorUnaryAluRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::addsd: (instruction resultRegister x86::float64For: codegen) with: (instruction firstOperandRegister x86::float64For: codegen).
    }.

TAC::Operation::Float64UnorderedEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomisd: (instruction firstOperandRegister x86::float64For: codegen) src: (instruction secondOperandRegister x86::float64For: codegen);
            x86::sete: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Float64UnorderedNotEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomisd: (instruction firstOperandRegister x86::float64For: codegen) src: (instruction secondOperandRegister x86::float64For: codegen);
            x86::setne: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Float64UnorderedLessThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomisd: (instruction firstOperandRegister x86::float64For: codegen) src: (instruction secondOperandRegister x86::float64For: codegen);
            x86::setl: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Float64UnorderedLessOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomisd: (instruction firstOperandRegister x86::float64For: codegen) src: (instruction secondOperandRegister x86::float64For: codegen);
            x86::setle: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Float64UnorderedGreaterThan
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomisd: (instruction firstOperandRegister x86::float64For: codegen) src: (instruction secondOperandRegister x86::float64For: codegen);
            x86::setg: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Float64UnorderedGreaterOrEquals
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomisd: (instruction firstOperandRegister x86::float64For: codegen) src: (instruction secondOperandRegister x86::float64For: codegen);
            x86::setge: (instruction resultRegister x86::int8For: codegen)
    }.

TAC::Operation::Float64UnorderedEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonBranchRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomisd: (instruction firstOperandRegister x86::float64For: codegen) src: (instruction secondOperandRegister x86::float64For: codegen);
            x86::jnz: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Float64UnorderedNotEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonBranchRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomisd: (instruction firstOperandRegister x86::float64For: codegen) src: (instruction secondOperandRegister x86::float64For: codegen);
            x86::jz: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Float64UnorderedLessThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonBranchRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomisd: (instruction firstOperandRegister x86::float64For: codegen) src: (instruction secondOperandRegister x86::float64For: codegen);
            x86::jge: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.
TAC::Operation::Float64UnorderedLessOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonBranchRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomisd: (instruction firstOperandRegister x86::float64For: codegen) src: (instruction secondOperandRegister x86::float64For: codegen);
            x86::jg: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

TAC::Operation::Float64UnorderedGreaterThanBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonBranchRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomisd: (instruction firstOperandRegister x86::float64For: codegen) src: (instruction secondOperandRegister x86::float64For: codegen);
            x86::jle: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.
TAC::Operation::Float64UnorderedGreaterOrEqualsBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarComparisonBranchRegisterConstraints;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::ucomisd: (instruction firstOperandRegister x86::float64For: codegen) src: (instruction secondOperandRegister x86::float64For: codegen);
            x86::jl: (instruction fourthOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen)
    }.

let x86::vectorScalarIntegerConversionRegisterConstrations := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterOrMemoryForInstruction: instruction operandAt: 0sz
}.

let x86::vectorScalarInteger8WithExtensionConversionRegisterConstrations := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegister8ForInstruction: instruction operandAt: 0sz
}.

let x86::vectorScalarIntegerWithExtensionConversionRegisterConstrations := {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
    allocator
        allocateRegisterForInstructionResult: instruction;
        allocateRegisterForInstruction: instruction operandAt: 0sz
}.

TAC::Operation::Float32ToFloat64
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtss2sd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::Float32ToInt8
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtss2si: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::Float32ToUInt8
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtss2si: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::Float32ToInt16
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtss2si: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::Float32ToUInt16
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtss2si: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::Float32ToInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtss2si: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::Float32ToUInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtss2si: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::Float32ToIEEEUInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movd: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::Float32ToInt64
    forTarget: #x86_64 registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtss2si: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::Float32ToUInt64
    forTarget: #x86_64 registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtss2si: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::Float64ToFloat32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsd2ss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen)
    }.

TAC::Operation::Float64ToInt8
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsd2si: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen)
    }.

TAC::Operation::Float64ToUInt8
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsd2si: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen)
    }.

TAC::Operation::Float64ToInt16
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsd2si: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen)
    }.

TAC::Operation::Float64ToUInt16
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsd2si: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen)
    }.

TAC::Operation::Float64ToInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsd2si: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen)
    }.

TAC::Operation::Float64ToUInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsd2si: (instruction resultRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen)
    }.

TAC::Operation::Float64ToInt64
    forTarget: #x86_64 registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsd2si: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen)
    }.

TAC::Operation::Float64ToUInt64
    forTarget: #x86_64 registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsd2si: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::float64For: codegen)
    }.

TAC::Operation::Float64ToIEEEUInt64
    forTarget: #x86_64 registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movq: (instruction resultRegister x86::int64For: codegen) src: (instruction firstOperandRegister x86::float32For: codegen)
    }.

TAC::Operation::Int8ToFloat32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarInteger8WithExtensionConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movsx: (instruction firstOperandRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int8For: codegen);
            x86::cvtsi2ss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int8ToFloat64
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarInteger8WithExtensionConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movsx: (instruction firstOperandRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int8For: codegen);
            x86::cvtsi2sd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::UInt8ToFloat32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarInteger8WithExtensionConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movzx: (instruction firstOperandRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int8For: codegen);
            x86::cvtsi2ss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::UInt8ToFloat64
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarInteger8WithExtensionConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movzx: (instruction firstOperandRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int8For: codegen);
            x86::cvtsi2sd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int16ToFloat32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerWithExtensionConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movsx: (instruction firstOperandRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int16For: codegen);
            x86::cvtsi2ss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int16ToFloat64
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerWithExtensionConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movsx: (instruction firstOperandRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int16For: codegen);
            x86::cvtsi2sd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::UInt16ToFloat32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerWithExtensionConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movzx: (instruction firstOperandRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int16For: codegen);
            x86::cvtsi2ss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::UInt16ToFloat64
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerWithExtensionConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::movzx: (instruction firstOperandRegister x86::int32For: codegen) src: (instruction firstOperandRegister x86::int16For: codegen);
            x86::cvtsi2sd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int32ToFloat32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsi2ss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int32ToFloat64
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsi2sd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::UInt32ToFloat32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsi2ss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::IEEEUInt32ToFloat32
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movd: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::UInt32ToFloat64
    forTargets: #(x86 x86_64) registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsi2sd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::int32For: codegen)
    }.

TAC::Operation::Int64ToFloat32
    forTarget: #x86_64 registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsi2ss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen)
    }.

TAC::Operation::Int64ToFloat64
    forTarget: #x86_64 registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsi2sd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen)
    }.

TAC::Operation::UInt64ToFloat32
    forTarget: #x86_64 registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsi2ss: (instruction resultRegister x86::float32For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen)
    }.

TAC::Operation::UInt64ToFloat64
    forTarget: #x86_64 registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::cvtsi2sd: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen)
    }.

TAC::Operation::IEEEUInt64ToFloat64
    forTarget: #x86_64 registerConstraintsWith: x86::vectorScalarIntegerConversionRegisterConstrations;
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::movq: (instruction resultRegister x86::float64For: codegen) src: (instruction firstOperandRegister x86::int64For: codegen)
    }.

TAC::Operation::Branch
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 0sz
    };
    forTarget: #x86 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::jmp: (instruction firstOperandRegister x86::relCall32OrInt32For: codegen)
    };
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::jmp: (instruction firstOperandRegister x86::relCall32OrInt64For: codegen)
    }.

TAC::Operation::ConditionalBranch
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator
            allocateRegisterForInstruction: instruction operandAt: 0sz;
            allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 1sz;
            allocateRegisterOrRelativeImmediate32ForInstruction: instruction operandAt: 2sz
    };
    forTarget: #x86 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::test: (instruction firstOperandRegister x86::int8For: codegen) with: 16rff u8 asAsmImmediate;
            x86::jz: (instruction thirdOperandRegister x86::relCall32OrInt32For: codegen);
            x86::jmp: (instruction secondOperandRegister x86::relCall32OrInt32For: codegen)
    };
    forTarget: #x86_64 generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection
            x86::test: (instruction firstOperandRegister x86::int8For: codegen) with: 16rff u8 asAsmImmediate;
            x86::jz: (instruction thirdOperandRegister x86::relCall32OrInt64For: codegen);
            x86::jmp: (instruction secondOperandRegister x86::relCall32OrInt64For: codegen)
    }.

TAC::Operation::CallInt8
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        instruction callingConvention registerConstraintsOfCallInt8: instruction with: allocator
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        instruction callingConvention asm::generateCallInt8: instruction with: codegen
    }.

TAC::Operation::CallInt16
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        instruction callingConvention registerConstraintsOfCallInt16: instruction with: allocator
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        instruction callingConvention asm::generateCallInt16: instruction with: codegen
    }.

TAC::Operation::CallInt32
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        instruction callingConvention registerConstraintsOfCallInt32: instruction with: allocator
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        instruction callingConvention asm::generateCallInt32: instruction with: codegen
    }.

TAC::Operation::CallInt64
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        instruction callingConvention registerConstraintsOfCallInt64: instruction with: allocator
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        instruction callingConvention asm::generateCallInt64: instruction with: codegen
    }.

TAC::Operation::CallFloat32
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        instruction callingConvention registerConstraintsOfCallFloat32: instruction with: allocator
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        instruction callingConvention asm::generateCallFloat32: instruction with: codegen
    }.

TAC::Operation::CallFloat64
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        instruction callingConvention registerConstraintsOfCallFloat64: instruction with: allocator
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        instruction callingConvention asm::generateCallFloat64: instruction with: codegen
    }.

TAC::Operation::CallStruct
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        instruction callingConvention registerConstraintsOfCallStruct: instruction with: allocator
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        instruction callingConvention asm::generateCallStruct: instruction with: codegen
    }.

TAC::Operation::CallVoid
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        instruction callingConvention registerConstraintsOfCallVoid: instruction with: allocator
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        instruction callingConvention asm::generateCallVoid: instruction with: codegen
    }.

TAC::Operation::ReturnInt8
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateRegister: TAC::X86::EAX forInstruction: instruction operandAt: 0sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen emitEpilogue.
        codegen textSection x86::ret.
        codegen stackFrameLayout isRequired ifTrue: (codegen textSection cfiEndEpilogue).
    }.

TAC::Operation::ReturnInt16
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateRegister: TAC::X86::EAX forInstruction: instruction operandAt: 0sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen emitEpilogue.
        codegen textSection x86::ret.
        codegen stackFrameLayout isRequired ifTrue: (codegen textSection cfiEndEpilogue).
    }.

TAC::Operation::ReturnInt32
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateRegister: TAC::X86::EAX forInstruction: instruction operandAt: 0sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen emitEpilogue.
        codegen textSection x86::ret.
        codegen stackFrameLayout isRequired ifTrue: (codegen textSection cfiEndEpilogue).
    }.

TAC::Operation::ReturnInt64
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateRegister: TAC::X86_64::RAX forInstruction: instruction operandAt: 0sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen emitEpilogue.
        codegen textSection x86::ret.
        codegen stackFrameLayout isRequired ifTrue: (codegen textSection cfiEndEpilogue).
    }.

TAC::Operation::ReturnFloat32
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateRegister: TAC::X86::XMM0 forInstruction: instruction operandAt: 0sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateRegister: TAC::X86::XMM0 forInstruction: instruction operandAt: 0sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen emitEpilogue.
        codegen textSection x86::ret.
        codegen stackFrameLayout isRequired ifTrue: (codegen textSection cfiEndEpilogue).
    }.

TAC::Operation::ReturnFloat64
    forTarget: #x86 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateRegister: TAC::X86::XMM0 forInstruction: instruction operandAt: 0sz
    };
    forTarget: #x86_64 registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateRegister: TAC::X86::XMM0 forInstruction: instruction operandAt: 0sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen emitEpilogue.
        codegen textSection x86::ret.
        codegen stackFrameLayout isRequired ifTrue: (codegen textSection cfiEndEpilogue).
    }.

TAC::Operation::ReturnStruct
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void |
        allocator allocateMemoryForInstruction: instruction operandAt: 0sz
    };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen emitEpilogue.
        codegen textSection x86::ret.
        codegen stackFrameLayout isRequired ifTrue: (codegen textSection cfiEndEpilogue).
    }.

TAC::Operation::ReturnVoid
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void | };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen emitEpilogue.
        codegen textSection x86::ret.
        codegen stackFrameLayout isRequired ifTrue: (codegen textSection cfiEndEpilogue).
    }.

TAC::Operation::Trap
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void | };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::int3
    }.

TAC::Operation::UnreachableTrap
    forTargets: #(x86 x86_64) registerConstraintsWith: {:(TACInstruction)instruction :(TACRegisterAllocator)allocator :: Void | };
    forTargets: #(x86 x86_64) generateWith: {:(TACInstruction)instruction :(TACFunctionAsmCodeGenerator)codegen :: Void |
        codegen textSection x86::ud2
    }.

AsmX86CompilationTarget extend: {
    public method asTacCompilationTarget => TACX86CompilationTarget
        := TACX86CompilationTarget new asmCompilationTarget: self; yourself
}.

AsmX86_64CompilationTarget extend: {
    public method asTacCompilationTarget => TACX86_64CompilationTarget
        := TACX86_64CompilationTarget new asmCompilationTarget: self; yourself.
}.
