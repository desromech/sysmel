AnyValue
    withSelector: #initialize addMethod: {:self :: Void | void };
    withSelector: #yourself addMethod: {:self :: self __type__ | self }.

Object
    withSelector: #class addMethod: {:self :: self __type__ __type__ | self __type__ }.

Type
    withSelector: #basicNew addMethod: {:self :: self |
        let: #result with: RawTuple::new(self totalSlotCount).
        (RawTuple::type:)(result, self).
        result
    };
    withSelector: #new addMethod: {:self :: self |
        self basicNew initialize; yourself
    }.

ValueBox class
    withSelector: #with: addMethod: {:self :value |
        self basicNew
            _: value;
            yourself
    }.

ValueBox
    withSelector: #_ addMethod: {:self | self value };
    withSelector: #_: addMethod: {:self :newValue | self value: newValue. newValue }.

SequenceableCollection
    withSelector: #do: addMethod: {:self :aBlock :: Void |
        let: #index with: (ValueBox with: 0).
        let: #size with: self size.

        while: index _ < self size do: (
            aBlock(self at: index _)
        ) continueWith: (index _: index _ + 1).
        void
    };
    withSelector: #doWithIndex: addMethod: {:self :aBlock :: Void |
        let: #index with: (ValueBox with: 0).
        let: #size with: self size.

        while: index _ < self size do: {
            let: #i with: index _.
            aBlock(self at: i, i)
         } continueWith: (index _: index _ + 1).
        void
    };
    withSelector: #first addMethod: {:self | self at: 0 };
    withSelector: #second addMethod: {:self | self at: 1 };
    withSelector: #third addMethod: {:self | self at: 2 };
    withSelector: #fourth addMethod: {:self | self at: 3 }.

Array
    withSelector: #at: addMethod: {:self :(Integer)index |
        self __slotAt__: index
    };
    withSelector: #at:put: addMethod: {:self :(Integer)index :value :: Void |
        self __slotAt__: index put: value.
        void
    };
    withSelector: #size addMethod: {:self :: Integer |
        self __size__
    }.

ArraySlice
    withSelector: #at: addMethod: {:self :(Integer)index |
        if: index < self size then: {
            self elements at: index + self offset
        } else: {
            error("Index out of bounds.")
        }
    };
    withSelector: #at:put: addMethod: {:self :(Integer)index :value :: Void |
        if: index < self size then: {
            self elements at: index + self offset put: value
        } else: {
            error("Index out of bounds.").
            void.
        }
    }.
