Array
    withSelector: #at: addMethod: {:self :(Integer)index |
        self __slotAt__: index
    };
    withSelector: #at:put: addMethod: {:self :(Integer)index :value :: Void |
        self __slotAt__: index put: value.
        void
    };
    withSelector: #do: addMethod: {:self :aBlock :: Void |
        let: #index with: (ValueBox with: 0).
        let: #size with: self size.

        while: index _ < self size do: (
            aBlock(self at: index _)
        ) continueWith: (index _: index _ + 1).
        void
    }.

ArraySlice
    withSelector: #at: addMethod: {:self :(Integer)index |
        if: index < self size then: {
            self elements at: index + self offset
        } else: {
            error("Index out of bounds.")
        }
    };
    withSelector: #at:put: addMethod: {:self :(Integer)index :value :: Void |
        if: index < self size then: {
            self elements at: index + self offset put: value
        } else: {
            error("Index out of bounds.").
            void.
        }
    };
    withSelector: #first addMethod: {:self | self at: 0 };
    withSelector: #second addMethod: {:self | self at: 1 };
    withSelector: #third addMethod: {:self | self at: 2 };
    withSelector: #fourth addMethod: {:self | self at: 3 }.

#*(Array, ArraySlice) do: {:CollectionType :: Void |
    void
}.
*#