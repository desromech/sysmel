AnySequenceTuple definition: {
    public override method size => Size
        := self class slots size.

    public override method at: (index: Size)
        := (RawTuple::typeSlotAt:)(self, self class slots at: index).

    public override method at: (index: Size) put: value ::=> Void := {
        (RawTuple::typeSlotAt:put:)(self, self class slots at: index, value)
    }.
}.

SequenceTupleType definition: {
    public override method printOn: (stream: Stream) ::=> Void := {
        stream nextPut: '('.
        elementTypes doWithIndex: {:(Type)eachType :(Size)index :: Void |
            index > 0sz ifTrue: (stream nextPutAll: ", ").
            stream print: eachType
        }.
        stream nextPutAll: ") sequenceTupleType".
    }
}.

private pure eager template sequenceTupleTypeTemplate(elementTypes: Array) => SequenceTupleType := {
    error("TODO: sequenceTupleTypeTemplate").
}.
SequenceTupleTypeTemplate adoptDefinitionOf: sequenceTupleTypeTemplate.

SequenceableCollection definition: {
    public pure method sequenceTupleType => SequenceTupleType
        := SequenceTupleTypeTemplate(self asArray).
}.
