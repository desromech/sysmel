SimpleFunctionType definition: {
    public method initializeWithArgumentTypes: (theArgumentTypes: Array) functionFlags: (theFunctionFlags: Bitflags) resultType: (theResultType) ::=> Void := {
        supertype := Function.
        flags := supertype flags | TypeFlags::Function.
        totalSlotCount := supertype totalSlotCount.
        instanceSize := supertype validInstanceSize.
        instanceAlignment := supertype instanceAlignment.

        functionFlags := theFunctionFlags.
        argumentTypes := theArgumentTypes.
        resultType := theResultType.
    }.
}.

private pure template simpleFunctionTypeTemplate(argumentTypes: Array, flags: Bitflags, resultType: Type) => SimpleFunctionType := {
    let result := SimpleFunctionType basicNew.
    __templateResult__ value: result.
    result
        initializeWithArgumentTypes: argumentTypes functionFlags: flags resultType: resultType;
        yourself.
}.

SimpleFunctionTypeTemplate adoptDefinitionOf: simpleFunctionTypeTemplate.
