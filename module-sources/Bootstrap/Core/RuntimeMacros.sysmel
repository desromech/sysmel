MacroContext
    withSelector: #gensym: addMethod: {:(MacroContext)self :value |
        GeneratedSymbol new
            value: value;
            sourcePosition: self sourcePosition;
            yourself
    };
    withSelector: #gensymIdentifier: addMethod: {:(MacroContext)self :value |
        ASTIdentifierReferenceNode new
            sourcePosition: self sourcePosition;
            value: (self gensym: value);
            yourself
    }.

ASTNode
    withSelector: #cullExpressionWith:at: addMethod: {:(ASTNode)self :(ASTNode)argument :(SourcePosition)sourcePosition :: ASTNode |
        self
    }.

ASTLambdaNode
    withSelector: #cullExpressionWithArguments:at: addMethod: {:(ASTLambdaNode)self :(Array)arguments :(SourcePosition)sourcePosition :: ASTNode |
        arguments size < self arguments size ifTrue: (self error: "Block receives more arguments than the provided one.").

        let: #localDeclarationNodes with: (self arguments collectWithIndex: {:(ASTArgumentNode)argumentNode :(Size)argumentIndex |
            let: #argumentValueNode with: (arguments at: argumentIndex).
            ASTLocalDefinitionNode new
                sourcePosition: argumentNode sourcePosition;
                nameExpression: argumentNode name;
                typeExpression: argumentNode type;
                valueExpression: argumentValueNode;
                yourself
        }).

        let: #body with: (if: self resultType == nil
            then: self body
            else: (ASTCoerceValueNode new
                sourcePosition: sourcePosition;
                typeExpression: self resultType;
                valueExpression: self body;
                yourself)).

        ASTLexicalBlockNode new
            sourcePosition: sourcePosition;
            body: (ASTSequenceNode new
                sourcePosition: sourcePosition;
                pragmas: #();
                expressions: localDeclarationNodes -- (Array with: body);
                yourself);
            yourself
    };
    withSelector: #cullExpressionWith:at: addMethod: {:(ASTLambdaNode)self :(ASTNode)argument :(SourcePosition)sourcePosition :: ASTNode |
        self cullExpressionWithArguments: (Array with: argument) at: sourcePosition
    }.
    
AnyValue
    withSelector: #ifNil: addMacroMethod: {:(MacroContext)macroContext :(ASTNode)self :(ASTNode)nilExpression :: ASTNode |
        let: #receiver with: (macroContext gensymIdentifier: #ifNilReceiver).
        
        ``{
            let: `,(receiver asLiteralNode) with: `,self.
            if: `,receiver == nil then: `,nilExpression else: `,receiver
        }
    } makeMacro;
    withSelector: #ifNotNil: addMacroMethod: {:(MacroContext)macroContext :(ASTNode)self :(ASTNode)notNilExpression :: ASTNode |
        let: #receiver with: (macroContext gensymIdentifier: #ifNotNilReceiver).
        
        ``{
            let: `,(receiver asLiteralNode) with: `,self.
            if: `,receiver ~~ nil then: `,(notNilExpression cullExpressionWith: receiver at: macroContext sourcePosition) else: nil
        }
    } makeMacro;
    withSelector: #ifNil:ifNotNil: addMacroMethod: {:(MacroContext)macroContext :(ASTNode)self :(ASTNode)nilExpression :(ASTNode)notNilExpression :: ASTNode |
        let: #receiver with: (macroContext gensymIdentifier: #ifNilIfNotNilReceiver).
        
        ``{
            let: `,(receiver asLiteralNode) with: `,self.
            if: `,receiver == nil then: `,nilExpression else: `,(notNilExpression cullExpressionWith: receiver at: macroContext sourcePosition)
        }
    } makeMacro;
    withSelector: #ifNotNil:ifNil: addMacroMethod: {:(MacroContext)macroContext :(ASTNode)self :(ASTNode)notNilExpression :(ASTNode)nilExpression :: ASTNode |
        let: #receiver with: (macroContext gensymIdentifier: #ifNotNilIfNilReceiver).
        
        ``{
            let: `,(receiver asLiteralNode) with: `,self.
            if: `,receiver ~~ nil then: `,(notNilExpression cullExpressionWith: receiver at: macroContext sourcePosition) else: `,nilExpression
        }
    } makeMacro.
