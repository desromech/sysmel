#(
    Character Float Identifier Integer Keyword MultiKeyword Operator String Symbol
    LeftParent RightParent LeftBracket RightBracket LeftCurlyBracket RightCurlyBracket
    LessThan GreaterThan Star
    Colon ColonColon Bar
    Assignment Semicolon Comma Dot Ellipsis
    Quote QuasiQuote QuasiUnquote Splice
    ByteArrayStart DictionaryStart LiteralArrayStart
    Error
) doWithIndex: {:(Symbol)tokenName :(Size)index :: Void |
    __OwnerProgramEntity__ setPublicSymbol: ("SysmelTokenKind::" -- tokenName asString) asSymbol value: index asUInt8
}.

SysmelToken definition: {
    __Meta__ definition: {
        public method kind: (kind: UInt8) value: (value: AnyValue) sourcePosition: (sourcePosition: SourcePosition) ::=> self
            := self new
                kind: kind;
                value: value;
                sourcePosition: sourcePosition;
                yourself.
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: "SystemToken kind: "; print: kind; nextPutAll: " value: "; print: value
    }.
}.

let Scanner::Whitespace := MonadicParser white plus withoutValue.
let Scanner::NotNewline := MonadicParser predicate: {:character :: Boolean | ('\n'asChar8 ~= character) && ('\r'asChar8 ~= character)} errorMessage: "Newline found".
let Scanner::SingleLineComment := ("##" asMonadicParser -- Scanner::NotNewline star withoutValue) withoutValue.
let Scanner::MultiLineComment := ("#*" asMonadicParser -- "*#" asMonadicParser negate star withoutValue -- "*#" asMonadicParser) withoutValue.

let Scanner::White := (Scanner::Whitespace | Scanner::SingleLineComment | Scanner::MultiLineComment) plus withoutValue.

let Scanner::ColonPattern := ':'asChar8 asMonadicElementParser -- ':'asChar8 asMonadicElementParser not.
let Scanner::ColonColonPattern := "::" asMonadicParser.
let Scanner::HashChar := "#" asMonadicParser.

let Scanner::LeftParentPattern := '('asChar8 asMonadicElementParser.
let Scanner::RightParentPattern := ')'asChar8 asMonadicElementParser.
let Scanner::LeftBracketPattern := '['asChar8 asMonadicElementParser.
let Scanner::RightBracketPattern := ']'asChar8 asMonadicElementParser.
let Scanner::LeftCurlyBracketPattern := '{'asChar8 asMonadicElementParser.
let Scanner::RightCurlyBracketPattern := '}'asChar8 asMonadicElementParser.
let Scanner::EllipsisPattern := "..." asMonadicParser.
let Scanner::DotPattern := '.'asChar8 asMonadicElementParser.
let Scanner::SemicolonPattern := ';'asChar8 asMonadicElementParser.

let Scanner::QuotePattern := "`'" asMonadicParser.
let Scanner::QuasiQuotePattern := "``" asMonadicParser.
let Scanner::QuasiUnquotePattern := "`," asMonadicParser.
let Scanner::SplicePattern := "`@" asMonadicParser.

let Scanner::ByteArrayStartPattern := "#[" asMonadicParser.
let Scanner::LiteralArrayStartPattern := "#(" asMonadicParser.
let Scanner::DictionaryStartPattern := "#{" asMonadicParser.

let Scanner::IdentifierPattern := (MonadicParser identifierStart -- MonadicParser identifierMiddle star withoutValue) withoutValue.
let Scanner::IdentifierScopePrefixPattern := (Scanner::IdentifierPattern -- Scanner::ColonColonPattern) star withoutValue.
let Scanner::ScopedIdentifierPattern := (Scanner::IdentifierScopePrefixPattern -- Scanner::IdentifierPattern) withoutValue.

let Scanner::OperatorCharacter := "+-/\\*~<>=@%|&?!^" asMonadicSetParser.
let Scanner::OperatorPattern := Scanner::OperatorCharacter plus withoutValue.
let Scanner::ScopedOperatorPattern := (Scanner::IdentifierScopePrefixPattern -- Scanner::OperatorPattern) withoutValue.

let Scanner::Sign := "+-" asMonadicSetParser.
let Scanner::Digit := MonadicParser digit.
let Scanner::DigitUnderscore := Scanner::Digit | '_'asChar8 asMonadicElementParser.
let Scanner::Alphanum := MonadicParser alphaNum.
let Scanner::AlphanumUnderscore := MonadicParser identifierMiddle.

let Scanner::DecimalIntegerPattern := (Scanner::Sign optional -- Scanner::Digit -- Scanner::DigitUnderscore star withoutValue) withoutValue.
let Scanner::RadixIntegerPattern := (Scanner::DecimalIntegerPattern -- 'r'asChar8 asMonadicElementParser -- Scanner::Alphanum -- Scanner::AlphanumUnderscore star withoutValue) withoutValue.
let Scanner::IntegerPattern := Scanner::RadixIntegerPattern | Scanner::DecimalIntegerPattern.

let Scanner::ExponentPattern := ("eE" asMonadicSetParser -- Scanner::DecimalIntegerPattern) withoutValue.
let Scanner::FloatDecimalPattern := (Scanner::IntegerPattern -- '.'asChar8 asMonadicElementParser -- Scanner::Digit -- Scanner::DigitUnderscore star withoutValue) withoutValue.
let Scanner::FloatExponentPattern := (Scanner::IntegerPattern -- Scanner::ExponentPattern) withoutValue.
let Scanner::FloatPattern := Scanner::FloatDecimalPattern | Scanner::FloatExponentPattern.

let Scanner::CharacterPattern := ('\''asChar8 asMonadicElementParser
    -- (('\\'asChar8 asMonadicElementParser -- MonadicParser any) withoutValue | '\''asChar8 asMonadicElementParser negate)
    -- '\''asChar8 asMonadicElementParser) withoutValue.
let Scanner::StringPattern := ('"'asChar8 asMonadicElementParser
    -- (('\\'asChar8 asMonadicElementParser -- MonadicParser any) withoutValue | '"'asChar8 asMonadicElementParser negate) star
    -- '"'asChar8 asMonadicElementParser) withoutValue.
let Scanner::SymbolStringPattern := ('#'asChar8 asMonadicElementParser -- Scanner::StringPattern) withoutValue.

let Scanner::ScopedKeywordPattern := (Scanner::ScopedIdentifierPattern -- Scanner::ColonPattern) withoutValue.
let Scanner::ScopedMultiKeywordPattern := (Scanner::IdentifierScopePrefixPattern -- ((Scanner::IdentifierPattern -- Scanner::ColonPattern) withoutValue plusN: 2sz) withoutValue) withoutValue.

let Scanner::SymbolIdentifierPattern := (Scanner::HashChar -- Scanner::ScopedIdentifierPattern) withoutValue.
let Scanner::SymbolMultiKeywordPattern := (Scanner::HashChar -- Scanner::ScopedMultiKeywordPattern) withoutValue.
let Scanner::SymbolKeywordPattern := (Scanner::HashChar -- Scanner::ScopedKeywordPattern) withoutValue.
let Scanner::SymbolOperatorPattern := (Scanner::HashChar -- Scanner::ScopedOperatorPattern) withoutValue.

let Scanner::LeftParent := Scanner::LeftParentPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::LeftParent value: #"(" sourcePosition: parserResult sourcePosition
}.
let Scanner::RightParent := Scanner::RightParentPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::RightParent value: #")" sourcePosition: parserResult sourcePosition
}.
let Scanner::LeftBracket := Scanner::LeftBracketPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::LeftBracket value: #"[" sourcePosition: parserResult sourcePosition
}.
let Scanner::RightBracket := Scanner::RightBracketPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::RightBracket value: #"]" sourcePosition: parserResult sourcePosition
}.
let Scanner::LeftCurlyBracket := Scanner::LeftCurlyBracketPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::LeftCurlyBracket value: #"{" sourcePosition: parserResult sourcePosition
}.
let Scanner::RightCurlyBracket := Scanner::RightCurlyBracketPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::RightCurlyBracket value: #"}" sourcePosition: parserResult sourcePosition
}.
let Scanner::Ellipsis := Scanner::EllipsisPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Ellipsis value: #"..." sourcePosition: parserResult sourcePosition
}.
let Scanner::Dot := Scanner::DotPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Dot value: #"." sourcePosition: parserResult sourcePosition
}.
let Scanner::Colon := Scanner::ColonPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Colon value: #":" sourcePosition: parserResult sourcePosition
}.
let Scanner::ColonColon := Scanner::ColonColonPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::ColonColon value: #"::" sourcePosition: parserResult sourcePosition
}.
let Scanner::Semicolon := Scanner::SemicolonPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Semicolon value: #";" sourcePosition: parserResult sourcePosition
}.

let Scanner::Quote := Scanner::QuotePattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Quote value: #"`'" sourcePosition: parserResult sourcePosition
}.
let Scanner::QuasiQuote := Scanner::QuasiQuotePattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::QuasiQuote value: #"``" sourcePosition: parserResult sourcePosition
}.
let Scanner::QuasiUnquote := Scanner::QuasiUnquotePattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::QuasiUnquote value: #"`," sourcePosition: parserResult sourcePosition
}.
let Scanner::Splice := Scanner::SplicePattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Splice value: #"`@" sourcePosition: parserResult sourcePosition
}.

let Scanner::ByteArrayStart := Scanner::ByteArrayStartPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::ByteArrayStart value: #"#[" sourcePosition: parserResult sourcePosition
}.
let Scanner::LiteralArrayStart := Scanner::LiteralArrayStartPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::LiteralArrayStart value: #"#(" sourcePosition: parserResult sourcePosition
}.
let Scanner::DictionaryStart := Scanner::DictionaryStartPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::DictionaryStart value: #"#{" sourcePosition: parserResult sourcePosition
}.

let Scanner::Identifier := Scanner::ScopedIdentifierPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Identifier value: parserResult sourceStringValue asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::Integer := Scanner::IntegerPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Integer value: (Integer parseString: parserResult sourceStringValue) sourcePosition: parserResult sourcePosition
}.

let Scanner::Float := Scanner::FloatPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Float value: (Float64 parseString: parserResult sourceStringValue) sourcePosition: parserResult sourcePosition
}.

let Scanner::DelimiterOperatorMap := #{
    #"*" : SysmelTokenKind::Star.
    #| : SysmelTokenKind::Bar.
    #< : SysmelTokenKind::LessThan.
    #> : SysmelTokenKind::GreaterThan.
}.

let Scanner::Operator := Scanner::ScopedOperatorPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    let value := parserResult sourceStringValue asSymbol.
    SysmelToken kind: (Scanner::DelimiterOperatorMap at: value ifAbsent: {| SysmelTokenKind::Operator}) value: value sourcePosition: parserResult sourcePosition
}.

let Scanner::Keyword := Scanner::ScopedKeywordPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Keyword value: parserResult sourceStringValue asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::MultiKeyword := Scanner::ScopedMultiKeywordPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::MultiKeyword value: parserResult sourceStringValue asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::Character := Scanner::CharacterPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Character value: (parserResult sourceStringValueWithoutFirst: 1sz last: 1sz) parseCEscapeSequences first asChar32 sourcePosition: parserResult sourcePosition
}.

let Scanner::String := Scanner::StringPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::String value: (parserResult sourceStringValueWithoutFirst: 1sz last: 1sz) parseCEscapeSequences sourcePosition: parserResult sourcePosition
}.

let Scanner::SymbolIdentifier := Scanner::SymbolIdentifierPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Symbol value: (parserResult sourceStringValueWithoutFirst: 1sz) asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::SymbolMultiKeyword := Scanner::SymbolMultiKeywordPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Symbol value: (parserResult sourceStringValueWithoutFirst: 1sz) asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::SymbolKeyword := Scanner::SymbolKeywordPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Symbol value: (parserResult sourceStringValueWithoutFirst: 1sz) asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::SymbolOperator := Scanner::SymbolOperatorPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Symbol value: (parserResult sourceStringValueWithoutFirst: 1sz) asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::SymbolString := Scanner::SymbolStringPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Symbol value: (parserResult sourceStringValueWithoutFirst: 2sz last: 1sz) parseCEscapeSequences asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::Token :=
    Scanner::LeftParent | Scanner::RightParent | Scanner::LeftBracket | Scanner::RightBracket | Scanner::LeftCurlyBracket | Scanner::RightCurlyBracket |
    Scanner::ByteArrayStart | Scanner::LiteralArrayStart | Scanner::DictionaryStart |
    Scanner::Ellipsis | Scanner::Dot | Scanner::ColonColon | Scanner::Colon | Scanner::Semicolon |
    Scanner::Quote | Scanner::QuasiQuote | Scanner::QuasiUnquote | Scanner::Splice |
    Scanner::Character | Scanner::String | Scanner::Float | Scanner::Integer |
    Scanner::SymbolIdentifier | Scanner::SymbolMultiKeyword | Scanner::SymbolKeyword | Scanner::SymbolString | Scanner::SymbolOperator |
    Scanner::MultiKeyword | Scanner::Keyword | Scanner::Identifier | Scanner::Operator.
let Scanner::TrimmedToken := Scanner::Token trim: Scanner::White.
let Scanner::Grammar := Scanner::White optional -- Scanner::TrimmedToken star -- Scanner::White optional .

public class SysmelLanguage superclass: Object; definition: {
    __Meta__ extend: {
        public method scanSourceCode: (sourceCode: SourceCode) ::=> Array
            := self new scanSourceCode: sourceCode.

        public method parseSourceCode: (sourceCode: SourceCode) ::=> ASTNode
            := self new parseSourceCode: sourceCode.
    }.

    public virtual method scanSourceCode: (sourceCode: SourceCode) ::=> Array := {
        let parseState := MonadicParserState forSourceCode: sourceCode.
        let parseResult := Scanner::Grammar parseWithState: parseState.
        self assert: parseResult isValid.

        let resultValue => OrderedCollection := parseResult value second.
        parseState atEnd ifFalse: {
            resultValue add: (SysmelToken kind: SysmelTokenKind::Error value: "Expected end of stream" asSymbol sourcePosition: parseState sourcePositionUntilEnd)
        }.

        resultValue asArray
    }.

    public virtual method parseSourceCode: (sourceCode: SourceCode) ::=> ASTNode
        := self parseTokens: (self scanSourceCode: sourceCode) sourceCode: sourceCode.

    public virtual method parseTokens: (tokens: Array) sourceCode: (sourceCode: SourceCode) ::=> ASTNode
        := self subclassResponsibility.
}.

public class SysmelLispLanguage superclass: SysmelLanguage; definition: {

}.