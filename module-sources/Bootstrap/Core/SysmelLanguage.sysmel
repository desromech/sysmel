#(
    Character Float Identifier Keyword MultiKeyword Operator String Symbol
    LParent RParent LBracket RBracket LCBracket RCBracket
    LessThan GreaterThan Star
    Colon ColonColon Bar
    Assignment Semicolon Comma Dot Ellipsis
    Quote QuasiQuote QuasiUnquote Splice
    ByteArrayStart DictionaryStart LiteralArrayStart
    Error
) doWithIndex: {:(Symbol)tokenName :(Size)index :: Void |
    __OwnerProgramEntity__ setPublicSymbol: ("SysmelTokenKind::" -- tokenName asString) asSymbol value: index asUInt8
}.

SysmelToken definition: {
    __Meta__ definition: {
        public method kind: (kind: UInt8) value: (value: AnyValue) sourcePosition: (sourcePosition: SourcePosition) ::=> self
            := self new
                kind: kind;
                value: value;
                sourcePosition: sourcePosition;
                yourself.
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: "SystemToken kind: "; print: kind; nextPutAll: " value: "; print: value
    }.
}.

let Scanner::Whitespace := MonadicParser white plus withoutValue.
let Scanner::NotNewline := MonadicParser predicate: {:character :: Boolean | ('\n'asChar8 ~= character) && ('\r'asChar8 ~= character)} errorMessage: "Newline found".
let Scanner::SingleLineComment := ("##" asMonadicParser -- Scanner::NotNewline star withoutValue) withoutValue.
let Scanner::MultiLineComment := ("#*" asMonadicParser -- "*#" asMonadicParser negate star withoutValue -- "*#" asMonadicParser) withoutValue.

let Scanner::White := (Scanner::Whitespace | Scanner::SingleLineComment | Scanner::MultiLineComment) plus withoutValue.

let Scanner::ColonPattern := ':'asChar8 asMonadicElementParser -- ':'asChar8 asMonadicElementParser not.
let Scanner::ColonColonPattern := "::" asMonadicParser.
let Scanner::HashChar := "#" asMonadicParser.

let Scanner::IdentifierPattern := (MonadicParser identifierStart -- MonadicParser identifierMiddle star withoutValue) withoutValue.
let Scanner::IdentifierScopePrefixPattern := (Scanner::IdentifierPattern -- Scanner::ColonColonPattern) star withoutValue.
let Scanner::ScopedIdentifierPattern := (Scanner::IdentifierScopePrefixPattern -- Scanner::IdentifierPattern) withoutValue.

let Scanner::OperatorCharacter := "+-/\\*~<>=@%|&?!^" asMonadicSetParser.
let Scanner::OperatorPattern := Scanner::OperatorCharacter plus withoutValue.
let Scanner::ScopedOperatorPattern := (Scanner::IdentifierScopePrefixPattern -- Scanner::OperatorPattern) withoutValue.

let Scanner::ScopedKeywordPattern := (Scanner::ScopedIdentifierPattern -- Scanner::ColonPattern) withoutValue.
let Scanner::ScopedMultiKeywordPattern := (Scanner::IdentifierScopePrefixPattern -- ((Scanner::IdentifierPattern -- Scanner::ColonPattern) withoutValue plusN: 2sz) withoutValue) withoutValue.

let Scanner::SymbolIdentifierPattern := (Scanner::HashChar -- Scanner::ScopedIdentifierPattern) withoutValue.
let Scanner::SymbolMultiKeywordPattern := (Scanner::HashChar -- Scanner::ScopedMultiKeywordPattern) withoutValue.
let Scanner::SymbolKeywordPattern := (Scanner::HashChar -- Scanner::ScopedKeywordPattern) withoutValue.
let Scanner::SymbolOperatorPattern := (Scanner::HashChar -- Scanner::ScopedOperatorPattern) withoutValue.

let Scanner::Identifier := Scanner::ScopedIdentifierPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Identifier value: parserResult sourceStringValue asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::Operator := Scanner::ScopedOperatorPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Operator value: parserResult sourceStringValue asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::Keyword := Scanner::ScopedKeywordPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Keyword value: parserResult sourceStringValue asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::MultiKeyword := Scanner::ScopedMultiKeywordPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::MultiKeyword value: parserResult sourceStringValue asSymbol sourcePosition: parserResult sourcePosition
}.


let Scanner::SymbolIdentifier := Scanner::SymbolIdentifierPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Symbol value: (parserResult sourceStringValueWithoutFirst: 1sz) asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::SymbolMultiKeyword := Scanner::SymbolMultiKeywordPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Symbol value: (parserResult sourceStringValueWithoutFirst: 1sz) asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::SymbolKeyword := Scanner::SymbolKeywordPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Symbol value: (parserResult sourceStringValueWithoutFirst: 1sz) asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::SymbolOperator := Scanner::SymbolOperatorPattern ::==> {:(MonadicParserResult)parserResult :: AnyValue |
    SysmelToken kind: SysmelTokenKind::Symbol value: (parserResult sourceStringValueWithoutFirst: 1sz) asSymbol sourcePosition: parserResult sourcePosition
}.

let Scanner::Token :=
    Scanner::SymbolIdentifier | Scanner::SymbolMultiKeyword | Scanner::SymbolKeyword | Scanner::SymbolOperator |
    Scanner::MultiKeyword | Scanner::Keyword | Scanner::Identifier | Scanner::Operator.
let Scanner::TrimmedToken := Scanner::Token trim: Scanner::White.
let Scanner::Grammar := Scanner::White optional -- Scanner::TrimmedToken star -- Scanner::White optional .

public class SysmelLanguage superclass: Object; definition: {
    __Meta__ extend: {
        public method scanSourceCode: (sourceCode: SourceCode) ::=> Array := {
            let parseState := MonadicParserState forSourceCode: sourceCode.
            let parseResult := Scanner::Grammar parseWithState: parseState.
            self assert: parseResult isValid.

            let resultValue => OrderedCollection := parseResult value second.
            parseState atEnd ifFalse: {
                resultValue add: (SysmelToken kind: SysmelTokenKind::Error value: "Expected end of stream" asSymbol sourcePosition: parseState sourcePositionUntilEnd)
            }.

            resultValue asArray
        }.
    }
}.
