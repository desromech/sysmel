public global TypeFlags::StructDefaultFlags := TypeFlags::None.

public class StructType superclass: ValueType; definition: {
    public field isPacked => Boolean.

    public method substructureWithTypeSlots: (typeSlots: Array) packed: (isPacked: Boolean) ::=> StructType := {
        let: #metatype with: StructureMetatype basicNew.
        let: #metatypeSuper with: self __type__.
        metatype
            flags: TypeFlags::MetatypeRequiredFlags;
            supertype: metatypeSuper;
            slots: typeSlots;
            totalSlotCount: metatypeSuper validTotalSlotCount + typeSlots size;
            registerSlotsInDictionary;
            generatePublicAccessors.
        
        let: #struct with: metatype basicNew.
        struct
            flags: TypeFlags::StructDefaultFlags;
            supertype: self;
            isPacked: isPacked;
            slots: ();
            totalSlotCount: nil;
            registerInSupertype.
        metatype thisType: struct.
        struct
    }.


    public override method defaultValue => self
        := self basicNew.

    protected field canEncodeValueInBytes.
    public override method canEncodeValueInBytes => Boolean := {
        canEncodeValueInBytes ifNil: {
            canEncodeValueInBytes := true.
            supertype ifNotNil: {
                canEncodeValueInBytes := canEncodeValueInBytes && supertype canEncodeValueInBytes
            }.
            
            canEncodeValueInBytes := canEncodeValueInBytes && (self validSlots allSatisfy: {:(TypeSlot)eachSlot :: Boolean |
                (eachSlot type ~~ nil) && (eachSlot type canEncodeValueInBytes)
            })
        }.

        canEncodeValueInBytes
    }.

    public override method encodeValue: (value: self) inBytes: (bytes: ByteArray) atOffset: (offset: Size) ::=> Void := {
        self ensureLayoutIsComputed.

        self allSlotsDo: {:(TypeSlot)eachSlot :: Void |
            eachSlot type encodeValue: (RawTuple::typeSlotAt:)(value, eachSlot) inBytes: bytes atOffset: offset + eachSlot offset
        }
    }.

    protected field canDecodeValueFromBytes.
    public override method canDecodeValueFromBytes => Boolean := {
        canDecodeValueFromBytes ifNil: {
            canDecodeValueFromBytes := true.
            supertype ifNotNil: {
                canDecodeValueFromBytes := canDecodeValueFromBytes && supertype canDecodeValueFromBytes
            }.
            
            canDecodeValueFromBytes := canDecodeValueFromBytes && (self validSlots allSatisfy: {:(TypeSlot)eachSlot :: Boolean |
                (eachSlot type ~~ nil) && (eachSlot type canDecodeValueFromBytes)
            })
        }.

        canDecodeValueFromBytes
    }.

    public override method decodeValueFromBytes: (bytes: ByteArray) atOffset: (offset: Size) ::=> self := {
        let result := self basicAllocate.
        self ensureLayoutIsComputed.

        self allSlotsDo: {:(TypeSlot)eachSlot :: Void |
            (RawTuple::typeSlotAt:put:)(result, eachSlot,
                eachSlot type decodeValueFromBytes: bytes atOffset: offset + eachSlot offset
            )
        }.

        result
    }.
}.

public class StructureMetatype superclass: ValueMetatype; definition: {
    __Meta__ definition:{
        public method getOrCreateDependentApplicationValueForNode: (astNode: ASTNode)
            := StructType
    }.
}.

let AnyStructType := StructureMetatype basicNew
    flags: TypeFlags::MetatypeRequiredFlags;
    supertype: StructType;
    totalSlotCount: StructType validTotalSlotCount;
    yourself.
public global AnyStruct := AnyStructType basicNew
    name: #AnyStruct;
    flags: TypeFlags::StructDefaultFlags;
    supertype: AnyValue;
    slots: ();
    totalSlotCount: 0sz;
    registerInSupertype;
    yourself.

## Struct MetaBuilder.
TypeMetaBuilder publicSubclass: #StructMetaBuilder slots: (
    TypeSlot publicNamed: #isPacked type: Boolean ,
).

StructMetaBuilder
    withSelector: #validSupertypeExpression addMethod: {:self :: ASTNode |
        self supertypeExpression ifNil: `'AnyStruct
    };
    withSelector: #packed addMethod: {:self :: ASTNode |
        <metaBuilder>
        self isPacked: true.
        self continueExpansion
    };
    withSelector: #finishExpansionWithEnvironment: addMethod: {:self :(Environment)environment :: ASTNode |
        let: #flagsExpression with: (ASTLiteralNode new
            sourcePosition: self sourcePosition;
            value: self typeFlags;
            yourself).
        let: #packedExpression with: (ASTLiteralNode new
            sourcePosition: self sourcePosition;
            value: self isPacked;
            yourself).

        let: #makeStructExpression with: ``(
            (`,(self validSupertypeExpression) substructureWithTypeSlots: `,(self validMetaSlotsExpression) packed: `,packedExpression)
                addFlags: `,flagsExpression;
                yourself
        ).

        let: #name with: self name.

        let: #structValueExpression with: (name
            ifNil: makeStructExpression
            ifNotNil: (if: self isPublic
                then: ``(public: `,name with: (`,makeStructExpression name: `,name; yourself))
                else: ``(let: `,name with: `,makeStructExpression) 
            )
        ).

        let: #definitionExpression with: self definitionExpression.
        definitionExpression
        ifNil: structValueExpression
        ifNotNil: ``(`,structValueExpression definition: `,definitionExpression)
    } makeOverride.

public global struct := MetaBuilderFactory for: StructMetaBuilder.

FlagMetaBuilder
    withSelector: #struct addMethod: {:self :: ASTNode |
        <metaBuilder>
        self delegateToMetaBuilder: (StructMetaBuilder new
            typeFlags: self typeFlags;
            isPublic: self isPublic;
            yourself)
    }.
