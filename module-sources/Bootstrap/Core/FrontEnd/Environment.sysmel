Symbol extend: {
    public virtual method isGeneratedSymbol => Boolean := false.
}.

GeneratedSymbol extend: {
    public override method isGeneratedSymbol => Boolean := true.
}.

SymbolBinding definition: {
    public eager final inline method name => Symbol
        := self __slotNamedAt__: #key.

    public eager final inline method name: (newName: Symbol) ::=> Void := {
        self __slotNamedAt__: #key put: newName
    }.

    public eager virtual method isAnalysisBinding => Boolean := false.

    public eager abstract method evaluateInEnvironment: (environment: Environment) ::=> Untyped
        := self subclassResponsibility.

    public abstract method setValue: (value: Untyped) inFunctionActivationEnvironment: (environment: FunctionActivationEnvironment) ::=> Void
        := self subclassResponsibility.

    public method hasValidNameForDebugging => Boolean
        := self name isNotNil && self name isGeneratedSymbol not.
}.

SymbolValueBinding definition: {
    public eager abstract method evaluateInEnvironment: (environment: Environment) ::=> Untyped
        := self __slotNamedAt__: #value.
}.

SymbolAnalysisBinding definition: {
    public eager override method isAnalysisBinding => Boolean := true.

    public virtual method getOrCreateCaptureInFunctionAnalysisEnvironment: (environment: FunctionAnalysisEnvironment) ::=> SymbolAnalysisBinding
        := environment getOrCreateCaptureForParentBinding: self.
}.

SymbolTupleSlotBinding definition: {
    public override method getOrCreateCaptureInFunctionAnalysisEnvironment: (environment: FunctionAnalysisEnvironment) ::=> SymbolAnalysisBinding
        := self copy
            tupleBinding: (environment getOrCreateCaptureForParentBinding: self tupleBinding);
            yourself.
}.

SymbolArgumentBinding definition: {
    public override method setValue: (value: Untyped) inFunctionActivationEnvironment: (environment: FunctionActivationEnvironment) ::=> Void := {
        environment valueVector untypedAt: vectorIndex put: value
    }
}.

SymbolLocalBinding definition: {
    public override method setValue: (value: Untyped) inFunctionActivationEnvironment: (environment: FunctionActivationEnvironment) ::=> Void := {
        environment valueVector untypedAt: environment argumentVectorSize + vectorIndex put: value
    }
}.

Environment definition: {
    public eager virtual method initializeWithParent: (theParent: Environment) ::=> Void := {
        parent := theParent.
    }.

    public eager virtual method analyzerTokenOrNil => Object := nil.
    public eager virtual method expectedTypeOrNil => Type := nil.

    __Meta__ definition: {
        public method empty => self
            := self new.

        public eager method parent: (parent: Environment) ::=> self
            := self new initializeWithParent: parent; yourself.

        public eager method parent: (parent: Environment) analysisQueue: (analysisQueue: AnalysisQueue) ::=> self
            := (self parent: parent) analysisQueue: analysisQueue; yourself.

        public eager method defaultForEvaluation ::=> self
            := self parent: __Global__ analysisQueue: AnalysisQueue default.
    }.

    public eager method setNewMacro: (name: Symbol) valueBinding: (expansion: ASTNode) at: (sourcePosition: SourcePosition) ::=> Void := {
        let binding := SymbolMacroValueBinding new
            name: name;
            expansion: expansion;
            type: expansion class;
            sourcePosition: sourcePosition;
            yourself.
        self setNewBinding: binding.
        binding.
    }.

    public eager method setNewSymbol: (name: Symbol) valueBinding: (value: Untyped) at: (sourcePosition: SourcePosition) ::=> SymbolBinding := {
        let binding := SymbolValueBinding new
            name: name;
            value: value;
            type: RawTuple::type(value);
            sourcePosition: sourcePosition;
            yourself.
        self setNewBinding: binding.
        binding.
    }.

    public virtual eager method lookLocalSymbolTable: (symbol: Symbol) ::=> SymbolBinding
        := symbolTable ifNotNil: (symbolTable associationAtOrNil: symbol).

    public virtual eager method lookLocalImportedSymbol: (symbol: Symbol) ::=> SymbolBinding
        := nil.

    public virtual eager method lookLocalSymbol: (symbol: Symbol) ::=> SymbolBinding := {
        (self lookLocalSymbolTable: symbol) ifNil: (self lookLocalImportedSymbol: symbol)
    }.
    
    public virtual method lookSymbolRecursively: (symbol: Symbol) ::=> SymbolBinding
        := (self lookLocalSymbol: symbol)
            ifNil: (parent ifNotNil: (parent lookSymbolRecursively: symbol)).

    public virtual method lookReturnTypeExpression => ASTNode
        := parent ifNotNil: parent lookReturnTypeExpression.

    public virtual method hasValidBreakTarget => Boolean
        := parent ifNil: false ifNotNil: parent hasValidBreakTarget.

    public virtual method hasValidContinueTarget => Boolean
        := parent ifNil: false ifNotNil: parent hasValidBreakTarget.

    public virtual eager method addUseTupleWithNamedSlotsBinding: (binding: SymbolBinding) ::=> Void
        := self error: "Not an analysis and evaluation environment.".

    public method lookAnalysisQueue => AnalysisQueue
        := analysisQueue ifNil: (parent ifNotNil: parent lookAnalysisQueue).
    Environment ensureAnalysisOfMethodWithSelector: #lookAnalysisQueue.

    public eager method enqueuePendingAnalysis: (programEntity: ProgramEntity) ::=> Void
        := (self lookAnalysisQueue) enqueueProgramEntity: programEntity.

    public virtual eager method evaluateSymbolBinding: (symbolBinding: SymbolBinding) ::=> Untyped
        := symbolBinding evaluateInEnvironment: self.
}.

Environment
    ensureAnalysisOfMethodWithSelector: #lookSymbolRecursively:;
    ensureAnalysisOfMethodWithSelector: #lookReturnTypeExpression;
    ensureAnalysisOfMethodWithSelector: #hasValidBreakTarget;
    ensureAnalysisOfMethodWithSelector: #hasValidContinueTarget.
    

Type extend: {
    public eager virtual method asCanonicalTypeForNode: (node: ASTNode) ::=> Type
        := self.
}.

TypeInferenceType __type__ extend: {
    public eager override method asCanonicalTypeForNode: (node: ASTNode) ::=> Type
        := node analyzedType.

    public override eager method coerceASTNode: (node: ASTNode) withEnvironment: (environment: AnalysisAndEvaluationEnvironment) ::=> ASTNode
        := self subclassResponsibility.
}.

DirectTypeInferenceType __type__ extend: {
    public override eager method coerceASTNode: (node: ASTNode) withEnvironment: (environment: AnalysisAndEvaluationEnvironment) ::=> ASTNode
        := node.
}.

DecayedTypeInferenceType __type__ extend: {
    public override eager method coerceASTNode: (node: ASTNode) withEnvironment: (environment: AnalysisAndEvaluationEnvironment) ::=> ASTNode
        := (node analyzedType ifNil: Untyped) asDecayedType coerceASTNode: node withEnvironment: environment.
}.

ReceiverTypeInferenceType __type__ extend: {
    public override eager method coerceASTNode: (node: ASTNode) withEnvironment: (environment: AnalysisAndEvaluationEnvironment) ::=> ASTNode
        := (node analyzedType ifNil: Untyped) asDecayedReceiverType coerceASTNode: node withEnvironment: environment.
}.

public final class ASTNodeWithCanonicalType superclass: Object; definition: {
    public field node => ASTNode.
    public field canonicalType => Type.
}.

Environment definition: {
    public eager virtual method lookFunctionAnalysisEnvironmentRecursively => FunctionAnalysisEnvironment
        := self error: "Cannot have a function analysis environment in this context.".

    public eager method setBinding: (binding: SymbolBinding) ::=> Void := {
        symbolTable ifNil: {symbolTable := IdentityDictionary new}.
        symbolTable add: binding
    }.

    public eager method setNewBinding: (binding: SymbolBinding) ::=> Void := {
        symbolTable ifNotNil: {
            (symbolTable includesKey: binding name) ifTrue: {
                error("Overriding existing symbol binding")
            }.
        } ifNil: {
            symbolTable := IdentityDictionary new
        }.
        symbolTable add: binding
    }.

    public eager method setSymbol: (symbol: Symbol) bindingWithValue: (value: Untyped) ::=> Void := {
        let binding := SymbolValueBinding new
            name: symbol;
            value: value;
            yourself.
        self setBinding: binding
    }.

    public eager method setNewSymbol: (symbol: Symbol) bindingWithValue: (value: Untyped) ::=> Void := {
        let binding := SymbolValueBinding new
            name: symbol;
            value: value;
            yourself.
        self setNewBinding: binding
    }.
}.

AnalysisEnvironment definition: {
    public eager override method hasValidBreakTarget => Boolean
        := hasBreakTarget.

    public eager override method hasValidContinueTarget => Boolean
        := hasContinueTarget.
}.

AnalysisAndEvaluationEnvironment definition: {
    public eager override method initializeWithParent: (theParent: Environment) ::=> Void := {
        super initializeWithParent: theParent.
        theParent ifNotNil: {
            analyzerToken := theParent analyzerTokenOrNil.
            expectedType := theParent expectedTypeOrNil.
        }.
    }.
}.

LocalAnalysisEnvironment definition: {
    public eager override method initializeWithParent: (theParent: Environment) ::=> Void := {
        super initializeWithParent: theParent.
        theParent ifNotNil: {
            hasBreakTarget := theParent hasValidBreakTarget.
            hasContinueTarget := theParent hasValidContinueTarget.
        }.
    }.
}.

FunctionAnalysisEnvironment definition: {
    public eager override method initialize => Void := {
        super initialize.
        captureBindingTable := IdentityDictionary new.
        captureBindingList := OrderedCollection new.
        argumentBindingList := OrderedCollection new.
        localBindingList := OrderedCollection new.
        innerFunctionList := OrderedCollection new.
        pragmaList := OrderedCollection new.
    }.

    public eager override method lookFunctionAnalysisEnvironmentRecursively => FunctionAnalysisEnvironment
        := self.

    public eager override method lookReturnTypeExpression => ASTNode
        := returnTypeExpression.
  
    public eager virtual final method setNewSymbol: (name: Symbol) argumentBindingOfType: (bindingType: Type) at: (sourcePosition: SourcePosition) ::=> SymbolBinding := {
        let binding := SymbolArgumentBinding new
            name: name;
            sourcePosition: sourcePosition;
            type: bindingType;
            ownerFunction: functionDefinition;
            vectorIndex: argumentBindingList size;
            yourself.
        name ifNotNil: (self setNewBinding: binding).
        argumentBindingList add: binding.
        binding
    }.

    public eager virtual final method addPragma: (pragma: Pragma) ::=> Void := {
        pragmaList add: pragma.
        (pragma selector = #primitive:) && self primitiveName isNil ifTrue: {
            self primitiveName: pragma arguments first
        }
    }.

    public eager virtual final method addInnerFunction: (innerFunction: FunctionDefinition) ::=> Void := {
        innerFunction owner: self functionDefinition.
        innerFunctionList add: innerFunction
    }.

    public eager method getOrCreateCaptureForParentBinding: (parentBinding: SymbolAnalysisBinding) ::=> SymbolAnalysisBinding := {
        captureBindingTable at: parentBinding ifAbsentPut: {:: SymbolAnalysisBinding |
            let captureBinding := SymbolCaptureBinding new
                sourcePosition: parentBinding sourcePosition;
                name: parentBinding name;
                type: parentBinding type;
                ownerFunction: self functionDefinition;
                vectorIndex: captureBindingList size;
                sourceBinding: parentBinding;
                yourself.
            captureBindingList add: captureBinding.
            captureBinding
        }
    }.

    public override eager method lookSymbolRecursively: (symbol: Symbol) ::=> SymbolBinding := {
        (self lookLocalSymbol: symbol) ifNil: {
            parent ifNotNil: {
                let parentBinding := parent lookSymbolRecursively: symbol.
                parentBinding isNotNil && parentBinding isAnalysisBinding ifTrue: {
                    (parentBinding downCastTo: SymbolAnalysisBinding) getOrCreateCaptureInFunctionAnalysisEnvironment: self
                } ifFalse: {
                    parentBinding
                }.
            }
        }
    }
}.

SymbolAnalysisBinding ensureAnalysisOfMethodWithSelector: #getOrCreateCaptureInFunctionAnalysisEnvironment:.
SymbolTupleSlotBinding ensureAnalysisOfMethodWithSelector: #getOrCreateCaptureInFunctionAnalysisEnvironment:.

AnalysisAndEvaluationEnvironment definition: {
    public eager override method lookFunctionAnalysisEnvironmentRecursively => FunctionAnalysisEnvironment
        := parent ifNotNil: parent lookFunctionAnalysisEnvironmentRecursively.

    public eager method validAnalyzerToken => Object
        := analyzerToken ifNil: (analyzerToken := Object new).

    public eager override method analyzerTokenOrNil => Object
        := self validAnalyzerToken.
    
    public eager override method expectedTypeOrNil => Type
        := expectedType.

    public eager method analyzeIfNeeded: (node: ASTNode) ::=> ASTNode := {
        node analyzerToken == self validAnalyzerToken ifTrue: {
            node
        } ifFalse: {
            let analyzedNode := node analyzeWithEnvironment: self.
            analyzedNode analyzedType ifNil: {
                self error: "Analyzed node " -- analyzedNode printString -- " is missing the required analysis type."
            }.
            analyzedNode
        }
    }.

    public eager method applyCoercionToASTNode: (node: ASTNode) intoExpectedType: (targetType: Type) ::=> ASTNode := {
        (targetType ifNil: DecayedTypeInferenceType) coerceASTNode: node withEnvironment: self
    }.

    public eager method analyzeWithCurrentExpectedType: (node: ASTNode) ::=> ASTNode
        := self applyCoercionToASTNode: (self analyzeIfNeeded: node) intoExpectedType: expectedType.

    public eager method analyze: (node: ASTNode) withExpectedType: (newExpectedType: Type) ::=> ASTNode := {
        let oldExpectedType := expectedType.
        expectedType := newExpectedType ifNil: DecayedTypeInferenceType.

        let analyzedNode := {|
            self analyzeWithCurrentExpectedType: node
        } ensure: {:: Void |
            expectedType := oldExpectedType.
        }.

        analyzedNode
    }.

    public eager method analyzeWithDirectType: (node: ASTNode) ::=> ASTNode := {
        self analyze: node withExpectedType: DirectTypeInferenceType
    }.

    public eager method analyzeWithDecayedType: (node: ASTNode) ::=> ASTNode := {
        self analyze: node withExpectedType: DecayedTypeInferenceType
    }.

    public eager method analyzeWithReceiverType: (node: ASTNode) ::=> ASTNode := {
        self analyze: node withExpectedType: ReceiverTypeInferenceType
    }.

    public eager method analyze: (node: ASTNode) withExpectedTypeExpression: (expectedTypeExpression: ASTNode) at: (sourcePosition: SourcePosition) ::=> ASTNodeWithCanonicalType := {
        expectedTypeExpression ifNil: {
            let analyzedNode := self analyzeWithDecayedType: node.
            ASTNodeWithCanonicalType new
                node: analyzedNode;
                canonicalType: analyzedNode analyzedType asCanonicalType;
                yourself
        } ifNotNil: {
            let analyzedTypeExpression := self analyze: expectedTypeExpression withExpectedType: Type.
            analyzedTypeExpression isLiteralNode ifTrue: {
                let literalExpectedType => Type := (analyzedTypeExpression downCastTo: ASTLiteralNode) value.
                let analyzedNode := self analyze: node withExpectedType: literalExpectedType.
                ASTNodeWithCanonicalType new
                    node: analyzedNode;
                    canonicalType: (literalExpectedType asCanonicalTypeForNode: analyzedNode);
                    yourself
            } ifFalse: {
                let canonicalResultType := (analyzedTypeExpression analyzedType ifNil: AnyValue) asCanonicalPendingInstanceType.

                let analyzedNode := self analyzeWithDirectType: node.
                let shouldAddCoercion mutable := false.
                analyzedNode isCoerceValueNode ifTrue: {
                    let coerceNode := analyzedNode downCastTo: ASTCoerceValueNode.
                    (coerceNode typeExpression == analyzedTypeExpression) &&
                    (coerceNode analyzedType == canonicalResultType) ifTrue: {
                        shouldAddCoercion := false.
                    }
                }.

                shouldAddCoercion ifTrue: {
                    ASTNodeWithCanonicalType new
                        node: (ASTCoerceValueNode new
                            sourcePosition: sourcePosition;
                            analyzerToken: self validAnalyzerToken;
                            analyzedType: canonicalResultType;
                            typeExpression: analyzedTypeExpression;
                            valueExpression: analyzedNode;
                            yourself);
                        canonicalType: canonicalResultType;
                        yourself
                } ifFalse: {
                    ASTNodeWithCanonicalType new
                        node: analyzedNode;
                        canonicalType: canonicalResultType;
                        yourself
                }
            }
        }.
    }.

    public eager method newLiteral: (value: Untyped) at: (sourcePosition: SourcePosition) ::=> ASTLiteralNode
        := ASTLiteralNode new
            sourcePosition: sourcePosition;
            analyzedType: RawTuple::type(value);
            analyzerToken: self validAnalyzerToken;
            value: value;
            yourself.

    public eager virtual method setNewSymbol: (name: Symbol) argumentBindingOfType: (argumentType: Type) at: (sourcePosition: SourcePosition) ::=> SymbolBinding := {
        self lookFunctionAnalysisEnvironmentRecursively ifNotNil: {:(FunctionAnalysisEnvironment)env :: SymbolBinding |
            env setNewSymbol: name argumentBindingOfType: argumentType at: sourcePosition
        } ifNil: {
            self error: "A function analysis environment is required here."
        }
    }.

    public eager method setNewSymbol: (name: Symbol) localBindingOfType: (localType: Type) at: (sourcePosition: SourcePosition) ::=> SymbolLocalBinding := {
        self lookFunctionAnalysisEnvironmentRecursively ifNotNil: {:(FunctionAnalysisEnvironment)functionEnv :: SymbolLocalBinding |
            let binding := SymbolLocalBinding new
                name: name;
                sourcePosition: sourcePosition;
                type: localType;
                ownerFunction: functionEnv functionDefinition;
                vectorIndex: functionEnv localBindingList size;
                yourself.
            name ifNotNil: (self setNewBinding: binding).
            functionEnv localBindingList add: binding.
            binding
        } ifNil: {
            self error: "A function analysis environment is required here."
        }
    }.

    public eager virtual method addPragma: (pragma: Pragma) ::=> Void := {
        self lookFunctionAnalysisEnvironmentRecursively ifNotNil: {:(FunctionAnalysisEnvironment)env :: Void |
            env addPragma: pragma
        } ifNil: {
            self error: "A function analysis environment is required here."
        }
    }.

    public eager virtual method addInnerFunction: (innerFunction: FunctionDefinition) ::=> Void := {
        self lookFunctionAnalysisEnvironmentRecursively ifNotNil: {:(FunctionAnalysisEnvironment)env :: Void |
            env addInnerFunction: innerFunction
        } ifNil: {
            self error: "A function analysis environment is required here."
        }
    }.

    public override eager method lookLocalImportedSymbol: (symbol: Symbol) ::=> SymbolBinding := {
        let usedTuplesWithNamedSlotsCount := usedTuplesWithNamedSlots ifNil: 0sz ifNotNil: usedTuplesWithNamedSlots size.
        let i mutable := 0sz.
        while: i < usedTuplesWithNamedSlotsCount do: {
            let usedTupleBinding := usedTuplesWithNamedSlots at: i.
            let slot := usedTupleBinding type asDecayedType lookupSlot: symbol.
            slot ifNotNil: {
                return: (SymbolTupleSlotBinding new
                    type: slot validReferenceType;
                    tupleBinding: usedTupleBinding;
                    typeSlot: slot;
                    yourself).
            }
        } continueWith: (i := i + 1sz).
        nil
    }.

    public override eager method addUseTupleWithNamedSlotsBinding: (binding: SymbolBinding) ::=> Void := {
        (usedTuplesWithNamedSlots ifNil: (usedTuplesWithNamedSlots := OrderedCollection new))
            add: binding
    }.
}.

FunctionActivationEnvironment definition: {
    public method bindArgumentNodeAt: (argumentIndex: Size) value: (value: Untyped) ::=> Void := {
        valueVector at: argumentIndex put: value
    }.

    public method setBinding: (binding: SymbolBinding) activationValue: (value: Untyped) ::=> Void := {
        binding setValue: value inFunctionActivationEnvironment: self
    }.
}.
