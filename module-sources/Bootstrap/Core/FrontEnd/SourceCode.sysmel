SourceCode definition: {
    __Meta__ definition: {
        public method text: (text: String) directory: (directory: String) name: (name: String) language: (language: StringSymbol) ::=> self
            := self new
                text: text;
                directory: directory;
                name: name;
                language: language;
                yourself.

        public method text: (text: String) filename: (filename: String) language: (language: StringSymbol) ::=> self
            := self text: text directory: FileSystem::dirname(filename) name: FileSystem::basename(filename) language: language.
    }
}.

SourcePosition definition: {
    __Meta__ definition: {
        public method for: (sourceCode: SourceCode) startIndex: (startIndex: Size) endIndex: (endIndex: Size) ::=> self
            := self new
                sourceCode: sourceCode;
                startIndex: startIndex;
                endIndex: endIndex;
                computeLineAndColumnInfo;
                yourself.
    }.

    public override eager method hash => Size
        := (sourceCode identityHash hashConcatenate: startIndex hash) hashConcatenate: endIndex hash.

    public override eager method = other => Boolean := {
        self class == other class ifFalse: {return: false}.
        let otherSourcePosition => SourcePosition := other.
        (self sourceCode == otherSourcePosition sourceCode) && (self startIndex = otherSourcePosition startIndex) && (self endIndex = otherSourcePosition endIndex)
    }.

    public method computeLineAndColumnInfo => Void := {

    }.

    public method makeUnionWith: (next: SourcePosition) ::=> SourcePosition := {
        sourceCode == next sourceCode ifTrue: {
            SourcePosition for: sourceCode startIndex: (startIndex min: next startIndex) endIndex: (endIndex max: next endIndex)
        } ifFalse: {
            self
        }
    }.
}.
