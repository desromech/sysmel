SourceCode definition: {
    __Meta__ definition: {
        public method text: (text: String) directory: (directory: String) name: (name: String) language: (language: StringSymbol) ::=> self
            := self new
                text: text;
                directory: directory;
                name: name;
                language: language;
                yourself.

        public method text: (text: String) filename: (filename: String) language: (language: StringSymbol) ::=> self
            := self text: text directory: FileSystem::dirname(filename) name: FileSystem::basename(filename) language: language.
    }.

    public method ensureLineStartIndexTableIsBuilt => Void := {
        lineStartIndexTable ifNotNil: {return: void}.

        let table := OrderedCollection new.
        table add: 0sz.

        let textSize := text size.
        let i mutable := 0sz.
        while: (i < textSize) do: {
            let c := text at: i.
            c = '\n'c8 ifTrue: {
                table add: i + 1sz
            }
        } continueWith: (i := i + 1sz).

        lineStartIndexTable := table asArray.
    }.

    public method findLineIndexForSourceIndex: (sourceCodeIndex: Size) ::=> Size := {
        self ensureLineStartIndexTableIsBuilt.

        let left mutable := 0sz.
        let right mutable := lineStartIndexTable size.

        let bestSoFar mutable := 0sz.
        while: (left < right) do: {
            let middle := left + ((right - left) / 2sz).
            let middleIndex := lineStartIndexTable at: middle.
            middleIndex <= sourceCodeIndex ifTrue: {
                bestSoFar := middle.
                left := middle + 1sz
            } ifFalse: {
                right := middle
            }
        }.

        bestSoFar
    }.

    public method computeLineInfoForSourcePosition: (sourcePosition: SourcePosition) ::=> Void := {
        ## Start.
        {
            let lineIndex := self findLineIndexForSourceIndex: sourcePosition startIndex.
            let lineSourceIndex := lineStartIndexTable at: lineIndex.

            sourcePosition
                startLine: lineIndex + 1sz;
                startColumn: sourcePosition startIndex - lineSourceIndex + 1sz
        }.

        ## End
        {
            let lineIndex := self findLineIndexForSourceIndex: sourcePosition endIndex.
            let lineSourceIndex := lineStartIndexTable at: lineIndex.

            sourcePosition
                endLine: lineIndex + 1sz;
                endColumn: sourcePosition endIndex - lineSourceIndex + 1sz
        }.
    }.
}.

SourcePosition definition: {
    __Meta__ definition: {
        public method for: (sourceCode: SourceCode) startIndex: (startIndex: Size) endIndex: (endIndex: Size) ::=> self
            := self new
                sourceCode: sourceCode;
                startIndex: startIndex;
                endIndex: endIndex;
                computeLineAndColumnInfo;
                yourself.
    }.

    public override eager method hash => Size
        := (sourceCode identityHash hashConcatenate: startIndex hash) hashConcatenate: endIndex hash.

    public override eager method = other => Boolean := {
        self == other ifTrue: {return: true}.
        self class == other class ifFalse: {return: false}.
        let otherSourcePosition => SourcePosition := other.
        (self sourceCode == otherSourcePosition sourceCode) && (self startIndex = otherSourcePosition startIndex) && (self endIndex = otherSourcePosition endIndex)
    }.

    public method computeLineAndColumnInfo => Void := {
        sourceCode ifNotNil: {
            sourceCode computeLineInfoForSourcePosition: self.
        }
    }.

    public method makeUnionWith: (next: SourcePosition) ::=> SourcePosition := {
        sourceCode == next sourceCode ifTrue: {
            SourcePosition for: sourceCode startIndex: (startIndex min: next startIndex) endIndex: (endIndex max: next endIndex)
        } ifFalse: {
            self
        }
    }.
}.
