Char8 extend: {
    public method asLowercase => Char8 := {
        if: ('A'asChar8 <= self) && (self <= 'Z'asChar8)
        then: self + 'a'asChar8 - 'A'asChar8
        else: self
    }.

    public method asUppercase => Char8 := {
        if: ('a'asChar8 <= self) && (self <= 'z'asChar8)
        then: self + 'A'asChar8 - 'z'asChar8
        else: self
    }.
}.

String extend: {
    __Meta__ definition: {
        public final method fromCString: (cstring: Char8 const pointer) ::=> self := {
            let stringLength := cstrlen(cstring).
            let result := self basicAllocate: stringLength.
            memcpy(result __rawContentsPointer__, cstring reinterpretCastTo: Void const pointer, stringLength).
            result
        }.

        public final method withBuffer: (string: Char8 const pointer) size: (stringLength: Size) ::=> self := {
            let result := self basicAllocate: stringLength.
            memcpy(result __rawContentsPointer__, string reinterpretCastTo: Void const pointer, stringLength).
            result
        }.

        public final method withReverseBuffer: (string: Char8 const pointer) size: (stringLength: Size) ::=> self := {
            let result := self basicAllocate: stringLength.
            reverseMemcpy(result __rawContentsPointer__, string reinterpretCastTo: Void const pointer, stringLength).
            result
        }.
    }.

    public final method writeOntoStdout => Void := {
        sysmel_pal_writeToFile(sysmel_pal_getStdoutFileHandle(), self size, self __rawContentsPointer__).
    }.

    public final method writeOntoStderr => Void := {
        sysmel_pal_writeToFile(sysmel_pal_getStderrFileHandle(), self size, self __rawContentsPointer__).
    }.
    
    public method asLowercase => String
        := self collect: {:(Char8)c :: Char8 | c asLowercase }.

    public method asUppercase => String
        := self collect: {:(Char8)c :: Char8 | c asUppercase }.

    public pure method asLiteralCString => Char8 const pointer
        := Char8 const pointer withStorage: self.
}.

UInt8 extend: {
    public method printHexDigitOn: (stream: Stream) ::=> Void := {
        (0u8 <= self) && (self <= 9u8)
            ifTrue: (stream nextPut: self asChar8 + '0'asChar8)
            ifFalse: (stream nextPut: self asChar8 + 'A'asChar8 - 10c8).
    }.

    public method printHexOn: (stream: Stream) ::=> Void := {
        self >> 4u8 printHexDigitOn: stream.
        self & 16rF u8 printHexDigitOn: stream.
    }.
}.

UInt16 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        (self >> 8u16) asUInt8 printHexOn: stream.
        self asUInt8 printHexOn: stream.
    }.
}.

UInt32 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        (self >> 16u32) asUInt16 printHexOn: stream.
        self asUInt16 printHexOn: stream.
    }.
}.

UInt64 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        (self >> 32u64) asUInt32 printHexOn: stream.
        self asUInt32 printHexOn: stream.
    }.
}.

Int8 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        self asUInt8 printHexOn: stream.
    }.
}.

Int16 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        self asUInt16 printHexOn: stream.
    }.
}.

Int32 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        self asUInt32 printHexOn: stream.
    }.

    public override final method asString => String := {
        let buffer mutable := Char8[32sz] new.
        let characterCount mutable := 0sz.
        let currentResult mutable := self.

        ## Negative sign.
        currentResult < 0i32 ifTrue: {
            buffer at: 0sz put: '-'asChar8.
            characterCount := 1sz.
            currentResult := currentResult negated.
        }.

        do: {
            let digit := currentResult % 10i32.
            buffer at: characterCount put: '0'asChar8 + digit asChar8.
            characterCount := characterCount + 1sz.
            currentResult := currentResult / 10i32.
        } while: (currentResult ~= 0i32).

        String withBuffer: buffer[0sz] address size: characterCount
    }.

    public override final method printString => String
        := self asString.
}.

Int64 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        self asUInt64 printHexOn: stream.
    }.
}.
