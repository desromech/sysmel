if: Size valueSize = 8sz then: {
    public struct GarbageCollector::ObjectHeader definition: {
        public field next => GarbageCollector::ObjectHeader pointer.
        public field size => Size.
    }.
} else: {
    public struct GarbageCollector::ObjectHeader definition: {
        public field next => GarbageCollector::ObjectHeader pointer.
        public field padding => UInt32.
        public field size => Size.
        public field padding2 => UInt32.
    }.
}.

public struct GarbageCollector::LayoutHeader definition: {
    public field repetitions => UInt32.
    public field strongCount => UInt32.
    public field weakCount => UInt32.
    public field fatCount => UInt32.
}.

public final struct GarbageCollector::PointerList definition: {
    private field capacity => Size.
    public field size => Size.
    public field data => UIntPointer pointer.

    let PointerSize := UIntPointer valueSize.

    public override nogc method finalize => Void := {
        capacity > 0sz ifTrue: {
            sysmel_pal_free(data reinterpretCastTo: Void pointer).
            data := nil.
            capacity := 0sz.
            size := 0sz.
        }.
    }.

    public nogc method increaseCapacity => Void := {
        let newCapacity := capacity * 2sz max: 64sz<<10sz.
        let newData := sysmel_pal_malloc(newCapacity * PointerSize) reinterpretCastTo: UIntPointer pointer.
        capacity > 0sz ifTrue: {
            memcpy(newData reinterpretCastTo: Void pointer, data reinterpretCastTo: Void pointer, size * PointerSize).
            sysmel_pal_free(data reinterpretCastTo: Void pointer)
        }.

        capacity := newCapacity.
        data := newData.
    }.

    public inline nogc method pushNoCheck: (element: UIntPointer) ::=> Void := {
        data[size asIntPointer] := element.
        size := size + 1sz
    }.

    public inline nogc method push: (element: UIntPointer) ::=> Void := {
        size < capacity ifFalse: {
            self increaseCapacity.
        }.
        
        data[size asIntPointer] := element.
        size := size + 1sz
    }.

    public inline nogc method isFull => Boolean
        := size >= capacity.

    public inline nogc method isEmpty => Boolean
        := size = 0sz.

    public inline nogc method isNotEmpty => Boolean
        := size ~= 0sz.

    public inline nogc method clear ::=> Void := {
        size := 0sz.
    }.

    public inline nogc method pop ::=> UIntPointer := {
        self isNotEmpty ifFalse: {
            sysmel_pal_abort()
        }.

        size := size - 1sz.
        data[size asIntPointer]
    }.
}.

public global GarbageCollector::ObjectHeaderSize := 16sz.

private global GarbageCollector::GammaFactor := 3sz.
private global GarbageCollector::NurseryFraction := 4sz.
private global GarbageCollector::MinimalCollectionThreshold := 4sz << 20sz.

private global GarbageCollector::CurrentHeapSize mutable => Size := 0sz.
private global GarbageCollector::CurrentYoungHeapSize mutable => Size := 0sz.
private global GarbageCollector::NextCollectionThreshold mutable => Size := 0sz.
private global GarbageCollector::NextYoungCollectionThreshold mutable => Size := 0sz.

private global GarbageCollector::IsCollectingYoungGeneration mutable => Boolean := false.

private global GarbageCollector::FirstYoungAllocatedObject mutable => GarbageCollector::ObjectHeader pointer := nil.
private global GarbageCollector::LastYoungAllocatedObject mutable => GarbageCollector::ObjectHeader pointer := nil.

private global GarbageCollector::FirstAllocatedObject mutable => GarbageCollector::ObjectHeader pointer := nil.
private global GarbageCollector::LastAllocatedObject mutable => GarbageCollector::ObjectHeader pointer := nil.

private global GarbageCollector::MarkingStack mutable := GarbageCollector::PointerList basicNew.
private global GarbageCollector::RememberedSet mutable := GarbageCollector::PointerList basicNew.

public global GarbageCollector::WhiteColor := 0u8.
public global GarbageCollector::GrayColor := 1u8.
public global GarbageCollector::BlackColor := 2u8.

public global GarbageCollector::AllocationInitialColor := GarbageCollector::WhiteColor.

public external global GarbageCollector::StaticRootPointerTableStart mutable => UIntPointer.
public external global GarbageCollector::StaticRootPointerTableEnd mutable => UIntPointer.

public external global GarbageCollector::StaticRootFatPointerTableStart mutable => UIntPointer.
public external global GarbageCollector::StaticRootFatPointerTableEnd mutable => UIntPointer.

## Set the static object segment virtual load address at the 2 MB mark.
## TODO: Implement manual relocation of the static object segment to save on object file relocation annotations.
public global GarbageCollector::StaticObjectSegmentMustBeRelocatedAtLoadTime := false.
public global GarbageCollector::StaticObjectSegmentLoadAddress => UIntPointer := 16r0020_0000 uptr.

public external global GarbageCollector::StaticObjectSegmentStart mutable => UIntPointer.
public external global GarbageCollector::StaticObjectSegmentEnd mutable => UIntPointer.

public nogc function GarbageCollector::staticObjectSegmentSize() => Size
    := (GarbageCollector::StaticObjectSegmentEnd address reinterpretCastTo: UIntPointer) - (GarbageCollector::StaticObjectSegmentStart address reinterpretCastTo: UIntPointer).

public nogc function GarbageCollector::allocate(size: Size) => Void pointer := {
    GarbageCollector::safepoint().

    let gcAllocationSize := GarbageCollector::ObjectHeaderSize + size.
    let object := sysmel_pal_malloc(gcAllocationSize) reinterpretCastTo: GarbageCollector::ObjectHeader pointer.
    object _
        next: nil;
        size: gcAllocationSize.
    GarbageCollector::CurrentHeapSize := GarbageCollector::CurrentHeapSize + gcAllocationSize.
    GarbageCollector::CurrentYoungHeapSize := GarbageCollector::CurrentYoungHeapSize + gcAllocationSize.
    GarbageCollector::addYoungAllocatedObject(object).

    object + 1iptr reinterpretCastTo: Void pointer
}.

private inline nogc function GarbageCollector::addYoungAllocatedObject(object: GarbageCollector::ObjectHeader pointer) => Void := {
    GarbageCollector::LastYoungAllocatedObject ifNotNil: {
        GarbageCollector::LastYoungAllocatedObject _ next: object.
        GarbageCollector::LastYoungAllocatedObject := object.
    } ifNil: {
        GarbageCollector::FirstYoungAllocatedObject := GarbageCollector::LastYoungAllocatedObject := object.
    }.
}.

private inline nogc function GarbageCollector::addOldAllocatedObject(object: GarbageCollector::ObjectHeader pointer) => Void := {
    GarbageCollector::LastAllocatedObject ifNotNil: {
        GarbageCollector::LastAllocatedObject _ next: object.
        GarbageCollector::LastAllocatedObject := object.
    } ifNil: {
        GarbageCollector::FirstAllocatedObject := GarbageCollector::LastAllocatedObject := object.
    }.
}.

private global GarbageCollector::IsInitialized mutable => Boolean := false.

public nogc function GarbageCollector::relocateStaticObjectSegment() => Void := {
    "TODO: relocateStaticObjectSegment" writeOntoStderr.
    sysmel_pal_abort().
}.

public nogc function GarbageCollector::initialize() => Void := {
    GarbageCollector::IsInitialized ifTrue: {
        return: void
    }.

    GarbageCollector::StaticObjectSegmentMustBeRelocatedAtLoadTime ifTrue: {
        GarbageCollector::relocateStaticObjectSegment().
        return: void
    }.

    GarbageCollector::NextCollectionThreshold := (GarbageCollector::CurrentHeapSize + GarbageCollector::staticObjectSegmentSize()) * GarbageCollector::GammaFactor max: GarbageCollector::MinimalCollectionThreshold.
    GarbageCollector::NextYoungCollectionThreshold := GarbageCollector::NextCollectionThreshold / GarbageCollector::NurseryFraction.
    GarbageCollector::IsInitialized := true.
}.

public nogc function GarbageCollector::shutdown() => Void := {
    GarbageCollector::IsInitialized ifFalse: {
        return: void
    }.

    GarbageCollector::fullCollect().
    GarbageCollector::MarkingStack finalize.
    GarbageCollector::RememberedSet finalize.
    GarbageCollector::IsInitialized := false.
}.

public nogc function GarbageCollector::markPointerValue(pointer: UIntPointer) => Void := {
    ObjectModel::isNonNullPointerValue(pointer) ifFalse: {
        return: void
    }.

    let header := pointer reinterpretCastTo: ObjectModel::TupleHeader pointer.
    header _ gcColor = GarbageCollector::WhiteColor ifTrue: {
        header _ isYoungOrDirty || GarbageCollector::IsCollectingYoungGeneration not ifTrue: {
            header _ gcColor: GarbageCollector::GrayColor.
            GarbageCollector::MarkingStack push: pointer
        }.
    }.
}.

public nogc function GarbageCollector::markStackFrameContent(stackFrame: GCStackFrameRecord pointer) => Void := {
    let descriptor := stackFrame _ descriptor.
    let framePointer := stackFrame reinterpretCastTo: UIntPointer.

    ## Temporary gc pointers
    {
        let zone := framePointer + descriptor _ temporaryGCZoneOffset asIntPointer asUIntPointer reinterpretCastTo: UIntPointer pointer.
        let entryCount := descriptor _ temporaryGCZoneEntryCount.
        let i mutable := 0u32.
        while: (i < entryCount) do: {
            GarbageCollector::markPointerValue(zone[i asIntPointer])
        } continueWith: (i := i + 1u32).
    }.

    ## Temporary fat gc pointers
    {
        let zone := framePointer + descriptor _ temporaryGCFatPointerZoneOffset asIntPointer asUIntPointer reinterpretCastTo: UIntPointer pointer.
        let entryCount := descriptor _ temporaryGCFatPointerZoneEntryCount.
        let i mutable := 0u32.
        while: (i < entryCount) do: {
            GarbageCollector::markPointerValue(zone[i asIntPointer * 2iptr + 1iptr])
        } continueWith: (i := i + 1u32).
    }.

    ## Inline GC objects.
    let gcObjectAllocationsDescriptors := descriptor + 1iptr reinterpretCastTo: GCStackFrameGCObjectAllocationDescriptor pointer.
    {
        let zone := framePointer + descriptor _ gcObjectAllocationZoneOffset asIntPointer asUIntPointer.
        let entryCount := descriptor _ gcObjectAllocationZoneEntryCount.
        let i mutable := 0u32.
        while: (i < entryCount) do: {
            let gcObjectDescriptor := gcObjectAllocationsDescriptors + i asIntPointer.
            let gcObjectPointer := zone + gcObjectDescriptor _ offset asIntPointer asUIntPointer.
            GarbageCollector::markPointerValue(gcObjectPointer)
        } continueWith: (i := i + 1u32).
    }.

    ## Arguments
    let argumentDescriptors := gcObjectAllocationsDescriptors + descriptor _ gcObjectAllocationZoneEntryCount asIntPointer reinterpretCastTo: Int16 pointer.
    {
        let zone := framePointer + descriptor _ argumentPassingZoneOffset asIntPointer asUIntPointer.
        let entryCount := descriptor _ argumentPassingZoneEntryCount.
        let i mutable := 0u32.
        while: (i < entryCount) do: {
            let argumentDescriptor := argumentDescriptors[i asIntPointer].
            let argumentOffset := argumentDescriptor >> 2i16.
            let argumentGCRootType := (argumentDescriptor & 3i16) asUInt8.
            let argumentStackPointer := zone + argumentOffset asIntPointer asUIntPointer reinterpretCastTo: UIntPointer pointer.

            argumentGCRootType = GCRootEntryType::Pointer ifTrue: {
                GarbageCollector::markPointerValue(argumentStackPointer _)
            } ifFalse: {
                argumentGCRootType = GCRootEntryType::FatPointer ifTrue: {
                    GarbageCollector::markPointerValue(argumentStackPointer[1 iptr])
                }.
            }
        } continueWith: (i := i + 1u32).
    }.
}.

public nogc function GarbageCollector::markStackPointers(lastStackFrameRecord: GCStackFrameRecord pointer) => Void := {
    let position mutable := lastStackFrameRecord.
    while: (position isNotNil) do: {
        GarbageCollector::markStackFrameContent(position)
    } continueWith: (position := position _ previous).
}.

Type definition: {
    public nogc method validGCLayoutForMarking => GCLayout := {
        gcLayout ifNil: {
            slots ifNil: {
                "Type is missing slots during GC." writeOntoStderr.
                sysmel_pal_abort()
            }.

            slots isNotEmpty ifTrue: {
                "Type with non-empty slots is missing layout during GC." writeOntoStderr.
                sysmel_pal_abort()
            }.

            gcLayout := supertype validGCLayoutForMarking
        }
    }
}.

public nogc function GarbageCollector::markContentOfObject(objectPointer: UIntPointer) => Void := {
    ObjectModel::isNonNullPointerValue(objectPointer) ifFalse: {
        return: void
    }.

    let header := objectPointer reinterpretCastTo: ObjectModel::TupleHeader pointer.
    header _ gcColor = GarbageCollector::GrayColor ifFalse: {
        sysmel_pal_abort().
        return: void
    }.
    
    GarbageCollector::markPointerValue(header _ typePointer).

    let objectType := header _ objectType.
    objectType = ObjectModel::ObjectType::Bytes ifTrue: {
        header _ gcColor: GarbageCollector::BlackColor.
        return: void
    }.

    let type := header _ type.
    {
        let layoutHeader := type validGCLayoutForMarking __rawContentsPointer__ reinterpretCastTo: GarbageCollector::LayoutHeader pointer.
        let layoutOffsets := layoutHeader + 1iptr reinterpretCastTo: UInt32 pointer.

        let offsetIndex mutable := 0iptr.

        ## Strong references
        {
            let i mutable := 0u32.
            while: (i < layoutHeader _ strongCount) do: {
                let offset := layoutOffsets[offsetIndex] asSize.
                let slotPointer := objectPointer + ObjectModel::TupleHeaderSize + offset reinterpretCastTo: UIntPointer pointer.
                GarbageCollector::markPointerValue(slotPointer _).
                i := i + 1u32.
                offsetIndex := offsetIndex + 1iptr
            }
        }.

        ## Ignore the weak references.
        offsetIndex := offsetIndex + layoutHeader _ weakCount asIntPointer.

        ## Fat pointers
        {
            let i mutable := 0u32.
            while: (i < layoutHeader _ fatCount) do: {
                let offset := layoutOffsets[offsetIndex] asSize.
                let slotPointer := objectPointer + ObjectModel::TupleHeaderSize + offset reinterpretCastTo: UIntPointer pointer.
                GarbageCollector::markPointerValue(slotPointer[1iptr]).
                i := i + 1u32.
                offsetIndex := offsetIndex + 1iptr
            }
        }.
    }.

    #*{
        let currentType mutable := type.
        while: (currentType isNotNil) do: {
            let slots := currentType slots.
            slots ifNil: {
                printLine(currentType, " does not have slots ").
                sysmel_pal_abort().
            }.

            let slotCount := slots size.

            let i mutable := 0sz.
            while: (i < slotCount) do: {
                let typeSlot := tuple: (slots __uncheckedSlotAt__: i) uncheckedDownCastTo: TypeSlot.
                let slotType := typeSlot type.
                slotType isNotNil && slotType isValueType ifTrue: {
                    ## TODO: Traverse the inline members for GC pointers.
                } ifFalse: {
                    let slotPointer := objectPointer + ObjectModel::TupleHeaderSize + typeSlot offset reinterpretCastTo: UIntPointer pointer.
                    GarbageCollector::markPointerValue(slotPointer _)
                }
            } continueWith: (i := i + 1sz)
        } continueWith: (currentType := currentType supertype).
    }.
    *#

    let isWeak := objectType = ObjectModel::ObjectType::WeakPointers.
    isWeak ifTrue: {
        header _ gcColor: GarbageCollector::BlackColor.
        return: void
    }.

    let fixedInstanceSize := type
        ifNil: (0sz)
        ifNotNil: (type instanceSize).

    {
        let variableDataSize := header _ objectSize asSize - fixedInstanceSize.
        let variableSlotCount := variableDataSize / ObjectModel::PointerSize.
        let variableSlotsPointer := objectPointer + ObjectModel::TupleHeaderSize + fixedInstanceSize reinterpretCastTo: UIntPointer pointer.
        let i mutable := 0sz.
        while: (i < variableSlotCount) do: {
            GarbageCollector::markPointerValue(variableSlotsPointer[i asIntPointer])
        } continueWith: (i := i + 1sz)
    }.
    
    header _ gcColor: GarbageCollector::BlackColor.
}.

public nogc function GarbageCollector::mark() => Void := {
    ## Mark the static root pointer table.
    {
        let position mutable := GarbageCollector::StaticRootPointerTableStart address.
        while: (position ~~ GarbageCollector::StaticRootPointerTableEnd address) do: {
            GarbageCollector::markPointerValue(position _).
        } continueWith: (position := position + 1iptr)
    }.

    ## Mark the static root fat pointer table.
    {
        let position mutable := GarbageCollector::StaticRootFatPointerTableStart address.
        while: (position ~~ GarbageCollector::StaticRootFatPointerTableEnd address) do: {
            GarbageCollector::markPointerValue(position[1iptr]).
        } continueWith: (position := position + 2iptr)

    }.

    GarbageCollector::IsCollectingYoungGeneration ifTrue: {
        let i mutable := 0sz.
        let setSize := GarbageCollector::RememberedSet size.
        let setElements := GarbageCollector::RememberedSet data.
        while: (i < setSize) do: {
            GarbageCollector::markPointerValue(setElements[i asIntPointer]).
        } continueWith: (i := i + 1sz)
    }.

    ## Mark the stack pointers.
    GarbageCollector::markStackPointers(GCStackFrameRecord::LastActive).

    ## Mark the pending objects in the marking stack.
    while: (GarbageCollector::MarkingStack isNotEmpty) do: {
        GarbageCollector::markContentOfObject(GarbageCollector::MarkingStack pop)
    }
}.

private inline nogc function GarbageCollector::isDeadObjectPointer(objectPointer: UIntPointer) => Boolean := {
    let header := objectPointer reinterpretCastTo: ObjectModel::TupleHeader pointer.
    (header _ gcColor = GarbageCollector::WhiteColor) && (GarbageCollector::IsCollectingYoungGeneration not || header _ isYoung).
}.

public nogc function GarbageCollector::clearDeadWeakReferencesOf(objectPointer: UIntPointer) => Void := {
    let header := objectPointer reinterpretCastTo: ObjectModel::TupleHeader pointer.
    header _ isWeak ifFalse: {
        return: void
    }.

    let type := header _ type.
    let fixedInstanceSize := type instanceSize.
    {
        let layoutHeader := type validGCLayoutForMarking __rawContentsPointer__ reinterpretCastTo: GarbageCollector::LayoutHeader pointer.
        let layoutOffsets := layoutHeader + 1iptr reinterpretCastTo: UInt32 pointer.

        let offsetIndex mutable := layoutHeader _ strongCount asIntPointer.

        let i mutable := 0u32.
        while: (i < layoutHeader _ weakCount) do: {
            let offset := layoutOffsets[offsetIndex] asSize.
            let slotPointer := objectPointer + ObjectModel::TupleHeaderSize + offset reinterpretCastTo: UIntPointer pointer.
            let slotValue := slotPointer _.
            ObjectModel::isNonNullPointerValue(slotValue) ifTrue: {
                GarbageCollector::isDeadObjectPointer(slotValue) ifTrue: {
                    slotPointer _ := ObjectModel::ImmediateTrivialConstant::Tombstone asUIntPointer
                }
            }.

            i := i + 1u32.
            offsetIndex := offsetIndex + 1iptr
        }
    }.

    let variableDataSize := header _ objectSize asSize - fixedInstanceSize.
    let variableSlotCount := variableDataSize / ObjectModel::PointerSize.
    let variableSlotsPointer := objectPointer + ObjectModel::TupleHeaderSize + fixedInstanceSize reinterpretCastTo: UIntPointer pointer.
    let i mutable := 0sz.
    while: (i < variableSlotCount) do: {
        let slotValue := variableSlotsPointer[i asIntPointer].
        ObjectModel::isNonNullPointerValue(slotValue) ifTrue: {
            GarbageCollector::isDeadObjectPointer(slotValue) ifTrue: {
                variableSlotsPointer[i asIntPointer] := ObjectModel::ImmediateTrivialConstant::Tombstone asUIntPointer
            }
        }.
    } continueWith: (i := i + 1sz)
}.

public nogc function GarbageCollector::clearDeadWeakReferences() => Void := {
    GarbageCollector::IsCollectingYoungGeneration ifTrue: {
        let i mutable := 0sz.
        let setSize := GarbageCollector::RememberedSet size.
        let setElements := GarbageCollector::RememberedSet data.
        while: (i < setSize) do: {
            let objectHeader := setElements[i asIntPointer] reinterpretCastTo: ObjectModel::TupleHeader pointer.
            objectHeader _ isDirty ifTrue: {
                GarbageCollector::clearDeadWeakReferencesOf(objectHeader reinterpretCastTo: UIntPointer).
                objectHeader _ clearDirty
            }.
        } continueWith: (i := i + 1sz).
    } ifFalse: {

        ## Traverse the static object segment.
        {
            let segmentStartAddress := GarbageCollector::StaticObjectSegmentStart address reinterpretCastTo: UIntPointer.
            let segmentEndAddress := GarbageCollector::StaticObjectSegmentEnd address reinterpretCastTo: UIntPointer.
            let ObjectAlignment := 16uptr.

            let position mutable := segmentStartAddress alignedTo: ObjectAlignment.
            while: (position < segmentEndAddress) do: {
                let objectHeader := position reinterpretCastTo: ObjectModel::TupleHeader pointer.
                let objectSize := ObjectModel::TupleHeaderSize + objectHeader _ objectSize asUIntPointer.
                (objectHeader _ gcColor ~= GarbageCollector::WhiteColor) ifTrue: {
                    GarbageCollector::clearDeadWeakReferencesOf(objectHeader reinterpretCastTo: UIntPointer)
                }.

                position := position + objectSize alignedTo: ObjectAlignment
            }.
        }.

        ## Traverse old generation
        let position mutable := GarbageCollector::FirstAllocatedObject.
        while: (position isNotNil) do: {
            let objectHeader := position + 1iptr reinterpretCastTo: ObjectModel::TupleHeader pointer.
            (objectHeader _ gcColor ~= GarbageCollector::WhiteColor) ifTrue: {
                GarbageCollector::clearDeadWeakReferencesOf(objectHeader reinterpretCastTo: UIntPointer)
            }.

        } continueWith: (position := position _ next).
    }.

    ## Traverse young generation
    {
        let position mutable := GarbageCollector::FirstYoungAllocatedObject.
        while: (position isNotNil) do: {
            let objectHeader := position + 1iptr reinterpretCastTo: ObjectModel::TupleHeader pointer.
            objectHeader _ gcColor ~= GarbageCollector::WhiteColor ifTrue: {
                GarbageCollector::clearDeadWeakReferencesOf(objectHeader reinterpretCastTo: UIntPointer)
            }.
        } continueWith: (position := position _ next).
    }.
}.

public nogc function GarbageCollector::sweepYoungAllocatedObjects() => Void := {
    let position mutable := GarbageCollector::FirstYoungAllocatedObject.
    GarbageCollector::FirstYoungAllocatedObject := GarbageCollector::LastYoungAllocatedObject := nil.

    while: (position isNotNil) do: {
        let next := position _ next.
        position _ next: nil.

        let objectHeader := position + 1iptr reinterpretCastTo: ObjectModel::TupleHeader pointer.
        let objectSize := position _ size asSize.
        GarbageCollector::CurrentYoungHeapSize := GarbageCollector::CurrentYoungHeapSize - objectSize.

        objectHeader _ gcColor = GarbageCollector::WhiteColor ifTrue: {
            GarbageCollector::CurrentHeapSize := GarbageCollector::CurrentHeapSize - objectSize.
            sysmel_pal_free(position reinterpretCastTo: Void pointer)
        } ifFalse: {
            (objectHeader _ gcColor = GarbageCollector::BlackColor) || objectHeader _ isYoung ifFalse: {
                sysmel_pal_abort()
            }.

            objectHeader _ gcColor: GarbageCollector::WhiteColor; clearDirty.

            ## Tenuring.
            objectHeader _ clearYoung.
            GarbageCollector::addOldAllocatedObject(position).
        }.

        position := next.
    }.
}.

public nogc function GarbageCollector::resetRememberedObjectsColor() => Void := {
    let i mutable := 0sz.
    let setSize := GarbageCollector::RememberedSet size.
    let setElements := GarbageCollector::RememberedSet data.
    while: (i < setSize) do: {
        let objectHeader := setElements[i asIntPointer] reinterpretCastTo: ObjectModel::TupleHeader pointer.
        objectHeader _ gcColor: GarbageCollector::WhiteColor; clearDirty.
    } continueWith: (i := i + 1sz).
}.

public nogc function GarbageCollector::sweepOldAllocatedObjects() => Void := {
    let position mutable := GarbageCollector::FirstAllocatedObject.
    GarbageCollector::FirstAllocatedObject := GarbageCollector::LastAllocatedObject := nil.

    while: (position isNotNil) do: {
        let next := position _ next.
        position _ next: nil.

        let objectHeader := position + 1iptr reinterpretCastTo: ObjectModel::TupleHeader pointer.
        objectHeader _ gcColor = GarbageCollector::WhiteColor ifTrue: {
            GarbageCollector::CurrentHeapSize := GarbageCollector::CurrentHeapSize - position _ size asSize.
            sysmel_pal_free(position reinterpretCastTo: Void pointer)
        } ifFalse: {
            objectHeader _ gcColor = GarbageCollector::BlackColor ifFalse: {
                sysmel_pal_abort()
            }.

            objectHeader _ gcColor: GarbageCollector::WhiteColor; clearDirty.
            GarbageCollector::addOldAllocatedObject(position).
        }.

        position := next.
    }.
}.

public nogc function GarbageCollector::sweepAllocatedObjects() => Void := {
    GarbageCollector::IsCollectingYoungGeneration ifTrue: {
        GarbageCollector::resetRememberedObjectsColor()
    } ifFalse: {
        GarbageCollector::sweepOldAllocatedObjects()
    }.

    GarbageCollector::sweepYoungAllocatedObjects().
    GarbageCollector::RememberedSet clear
}.

public nogc function GarbageCollector::sweepStaticObjectSegment() => Void := {
    let segmentStartAddress := GarbageCollector::StaticObjectSegmentStart address reinterpretCastTo: UIntPointer.
    let segmentEndAddress := GarbageCollector::StaticObjectSegmentEnd address reinterpretCastTo: UIntPointer.
    let ObjectAlignment := 16uptr.

    let position mutable := segmentStartAddress alignedTo: ObjectAlignment.
    while: (position < segmentEndAddress) do: {
        let objectHeader := position reinterpretCastTo: ObjectModel::TupleHeader pointer.
        let objectSize := ObjectModel::TupleHeaderSize + objectHeader _ objectSize asUIntPointer.
        objectHeader _ gcColor: GarbageCollector::WhiteColor.

        position := position + objectSize alignedTo: ObjectAlignment
    }.
}.

public nogc function GarbageCollector::sweepStackObjects() => Void := {
}.

public nogc function GarbageCollector::sweep() => Void := {
    GarbageCollector::sweepAllocatedObjects().
    GarbageCollector::sweepStaticObjectSegment().
    GarbageCollector::sweepStackObjects().
}.

public nogc function GarbageCollector::performCollectionCycle() => Void := {
    GarbageCollector::mark().
    GarbageCollector::clearDeadWeakReferences().
    GarbageCollector::sweep().
}.

public nogc function GarbageCollector::fullCollect() => Void := {
    ##"Garbage collection cycle\n" writeOntoStderr.
    GarbageCollector::IsCollectingYoungGeneration := false.
    ##"full garbage collection\n" writeOntoStderr.
    GarbageCollector::performCollectionCycle().

    GarbageCollector::NextCollectionThreshold := (GarbageCollector::CurrentHeapSize + GarbageCollector::staticObjectSegmentSize()) * GarbageCollector::GammaFactor max: GarbageCollector::MinimalCollectionThreshold.
    GarbageCollector::NextYoungCollectionThreshold := GarbageCollector::NextCollectionThreshold / GarbageCollector::NurseryFraction.
}.

public nogc function GarbageCollector::youngCollect() => Void := {
    GarbageCollector::IsCollectingYoungGeneration := true.
    ##"young garbage collection\n" writeOntoStderr.
    GarbageCollector::performCollectionCycle().
}.


public nogc function GarbageCollector::collect() => Void := {
    GarbageCollector::CurrentHeapSize >= GarbageCollector::NextCollectionThreshold ifTrue: {
        GarbageCollector::fullCollect().
    } ifFalse: {
        GarbageCollector::youngCollect().
    }
}.

public nogc function GarbageCollector::collectMost() => Void := {
    GarbageCollector::fullCollect().
}.

public coldcc nogc function GarbageCollector::increaseRememberSetCapacity() => Void := {
    GarbageCollector::RememberedSet increaseCapacity
}.

public hotcc nogc function GarbageCollector::rememberPointer(object: UIntPointer) => Void := {
    GarbageCollector::RememberedSet isFull ifTrue: {
        GarbageCollector::increaseRememberSetCapacity()
    }.

    GarbageCollector::RememberedSet pushNoCheck: object
}.

public nogc function GarbageCollector::safepoint() => Void := {
    GarbageCollector::CurrentYoungHeapSize >= GarbageCollector::NextYoungCollectionThreshold ifFalse: {
        return: void
    }.

    GarbageCollector::NextCollectionThreshold = 0sz ifTrue: {
        GarbageCollector::initialize().
        return: void.
    }.

    GarbageCollector::collect().
}.
