ExceptionSetjmpBuffer definition: {
    public nogc method longjmp => Unwinds := {
        <primitive: #Exception::longjmp>
        printLine("TODO: ExceptionSetjmpBuffer longjmp").
        sysmel_pal_abort().
    }.
}.

ExceptionStackRecord __type__ definition: {
    public method unwindUntil: (targetRecord: ExceptionStackRecord pointer) ::=> Void := {
        let currentPosition mutable := ExceptionStackRecord::LastActive.
        while: (currentPosition isNotNil && (currentPosition ~~ targetRecord)) do: {
            let record := currentPosition.
            currentPosition := currentPosition _ previous.
            ExceptionStackRecord::LastActive := currentPosition.

            record _ isCleanUp ifTrue: {
                let cleanUpRecord := record reinterpretCastTo: ExceptionCleanUpActionStackRecord pointer.
                cleanUpRecord _ cleanUpAction()
            }
        }.
    }.

    public method findHandlerRecordFor: (exception: Exception) ::=> ExceptionOnDoStackRecord pointer := {
        let currentPosition mutable := ExceptionStackRecord::LastActive.
        while: (currentPosition isNotNil) do: {
            currentPosition _ isOnDo ifTrue: {
                let onDoRecord := currentPosition reinterpretCastTo: ExceptionOnDoStackRecord pointer.
                (onDoRecord _ exceptionFilter handlesException: exception) ifTrue: {
                    return: onDoRecord
                }
            }
        } continueWith: (currentPosition := currentPosition _ previous).

        nil
    }.
}.

Exception definition: {
    __Meta__ definition: {
        public method signal ::=> Unwinds
            := self new signal.

        public method signal: (messageText: String) ::=> Unwinds
            := self new messageText: messageText; signal
    }.

    public method signal => Unwinds := {
        let handlerRecord := ExceptionStackRecord findHandlerRecordFor: self.
        handlerRecord ifNil: {
            printLine("Exception: ", self).
            sysmel_pal_abort().
        } ifNotNil: {
            handlerRecord _ exceptionResult: handlerRecord _ exceptionBlock(self).
            ExceptionStackRecord unwindUntil: handlerRecord.
            
            ExceptionStackRecord::LastActive := handlerRecord _ previous.
            GCStackFrameRecord::LastActive := handlerRecord _ gcStackFrameRecord.
            (handlerRecord _ __slotNamedReferenceAt__: #setjmpBuffer) longjmp
        }.
    }.
}.

Object
    withSelector: #assert: replaceMethod: {:(Object)self :(Boolean)condition :: Void |
        condition ifFalse: {
            AssertionFailure signal: "Assertion failure."
        }
    } withEagerAnalysis.

error adoptDefinitionOf: {:(String)message :: Unwinds |
    Error signal: message.
    sysmel_pal_abort().
}.

primitiveFailedError adoptDefinitionOf: {:: Unwinds |
    Error signal: "Primitive failed".
    sysmel_pal_abort().
}.
