Char8 extend: {
    public method asLowercase => Char8 := {
        if: ('A'c8 <= self) && (self <= 'Z'c8)
        then: self + 'a'c8 - 'A'c8
        else: self
    }.

    public method asUppercase => Char8 := {
        if: ('a'c8 <= self) && (self <= 'z'c8)
        then: self + 'A'c8 - 'a'c8
        else: self
    }.
}.

String extend: {
    __Meta__ definition: {
        public final method fromCString: (cstring: Char8 const pointer) ::=> self := {
            let stringLength := cstrlen(cstring).
            let result := self basicAllocate: stringLength.
            memcpy(result __rawContentsPointer__, cstring reinterpretCastTo: Void const pointer, stringLength).
            result
        }.

        public final method withBuffer: (string: Char8 const pointer) size: (stringLength: Size) ::=> self := {
            let result := self basicAllocate: stringLength.
            memcpy(result __rawContentsPointer__, string reinterpretCastTo: Void const pointer, stringLength).
            result
        }.

        public final method withReverseBuffer: (string: Char8 const pointer) size: (stringLength: Size) ::=> self := {
            let result := self basicAllocate: stringLength.
            reverseMemcpy(result __rawContentsPointer__, string reinterpretCastTo: Void const pointer, stringLength).
            result
        }.
    }.

    public override final pure method hash ::=> Size := {
        let result mutable := 1sz hashMultiply.

        let size := self size.
        let i mutable := 0sz.
        while: (i < size) do: {
            result := result hashConcatenate: (self __uncheckedByteSlotAt__: i) asSize
        } continueWith: (i := i + 1sz).

        result
    }.

    public override final pure method = other ::=> Boolean := {
        self class == other __type__ ifFalse: {return: false}.
        
        let otherString => String := other.
        let size := self size.
        size = otherString size ifFalse: {
            return: false
        }.

        let i mutable := 0sz.
        while: (i < size) do: {
            (self __uncheckedByteSlotAt__: i) = (otherString __uncheckedByteSlotAt__: i) ifFalse: {
                return: false
            }
        } continueWith: (i := i + 1sz).

        true
    }.

    public final pure method equalsStringSymbol: (other: StringSymbol) ::=> Boolean := {
        let size := self size.
        size = other size ifFalse: {
            return: false
        }.

        let i mutable := 0sz.
        while: (i < size) do: {
            (self __uncheckedByteSlotAt__: i) = (other __uncheckedByteSlotAt__: i) ifFalse: {
                return: false
            }
        } continueWith: (i := i + 1sz).

        true
    }.

    public method <=> (other: String) ::=> Int32 := {
        let minSize := self size min: other size.
        let i mutable := 0sz.
        while: (i < minSize) do: {
            let d := (self __uncheckedByteSlotAt__: i) asInt32 - (other __uncheckedByteSlotAt__: i) asInt32.
            d ~= 0i32 ifTrue: {return: d}
        } continueWith: (i := i + 1sz).

        (self size - other size) asInt32
    }.

    public method < (other: String) ::=> Boolean
        := (self <=> other) < 0i32.
    public method <= (other: String) ::=> Boolean
        := (self <=> other) <= 0i32.
    public method > (other: String) ::=> Boolean
        := (self <=> other) > 0i32.
    public method >= (other: String) ::=> Boolean
        := (self <=> other) >= 0i32.

    public final override method copyFrom: (startIndex: Size) until: (endIndex: Size) ::=> String := {
        let resultSize := startIndex <= endIndex
            ifTrue: endIndex - startIndex
            ifFalse: 0sz.

        let result := String basicAllocate: resultSize.
        let i mutable := 0sz.
        while: i < resultSize do: (
            result __uncheckedByteSlotAt__: i put: (self __uncheckedByteSlotAt__: startIndex + i)
        ) continueWith: (i := i + 1sz).

        result
    }.

    public final method writeOntoStdout => Void := {
        sysmel_pal_writeToFile(sysmel_pal_getStdoutFileHandle(), self size, self __rawContentsPointer__).
    }.

    public final method writeOntoStderr => Void := {
        sysmel_pal_writeToFile(sysmel_pal_getStderrFileHandle(), self size, self __rawContentsPointer__).
    }.
    
    public method asLowercase => String
        := self collect: {:(Char8)c :: Char8 | c asLowercase }.

    public method asUppercase => String
        := self collect: {:(Char8)c :: Char8 | c asUppercase }.

    public pure method asLiteralCString => Char8 const pointer
        := Char8 const pointer withStorage: self.

    public pure method parseCEscapeSequences => String := {
        let resultSize mutable := 0sz.
        let size := self size.

        ## First pass: compute the result size.
        let i mutable := 0sz.
        while: (i < size) do: {
            let c := (self __uncheckedByteSlotAt__: i) asChar8.
            c = '\\'c8 ifTrue: {
                i := i + 1sz.
            }.
            
            resultSize := resultSize + 1sz
        } continueWith: (i := i + 1sz).

        ## Second pass: parse the escape sequences.
        let result := String basicAllocate: resultSize.
        let destIndex mutable := 0sz.
        i := 0sz.
        while: (i < size) do: {
            let c := (self __uncheckedByteSlotAt__: i) asChar8.
            c = '\\'c8 ifTrue: {
                i := i + 1sz.
                if: i < size then: {
                    let escapeCharacter := (self __uncheckedByteSlotAt__: i) asChar8.
                    escapeCharacter = 'n'c8 ifTrue: {
                        result __uncheckedByteSlotAt__: destIndex put: '\n'u8
                    } ifFalse: {
                        escapeCharacter = 'r'c8 ifTrue: {
                            result __uncheckedByteSlotAt__: destIndex put: '\r'u8
                        } ifFalse: {
                            escapeCharacter = 't'c8 ifTrue: {
                                result __uncheckedByteSlotAt__: destIndex put: '\t'u8
                            } ifFalse: {
                                result __uncheckedByteSlotAt__: destIndex put: escapeCharacter asUInt8
                            }.
                        }.
                    }.
                }.
            } ifFalse: {
                result __uncheckedByteSlotAt__: destIndex put: c asUInt8.
            }.

            destIndex := destIndex + 1sz
        } continueWith: (i := i + 1sz).

        result
    }.

    public pure override final method asString => String := self.

    public pure override final method -- (other: SequenceableCollection) ::=> String := {
        other class == String ifFalse: {
            return: super -- other
        }.

        let otherString := other uncheckedDownCastTo: String.
        let mySize := self size.
        mySize = 0sz ifTrue: {
            return: otherString
        }.

        let otherSize := otherString size.
        otherSize = 0sz ifTrue: {
            return: self
        }.

        let result := String basicAllocate: mySize + otherSize.
        ObjectModel::isLogical() ifTrue: {
            {
                let i mutable := 0sz.
                while: i < mySize do: {
                    result __uncheckedByteSlotAt__: i put: (self __uncheckedByteSlotAt__: i)
                } continueWith: (i := i + 1sz).
            }.

            {
                let i mutable := 0sz.
                while: i < otherSize do: {
                    result __uncheckedByteSlotAt__: mySize + i put: (otherString __uncheckedByteSlotAt__: i)
                } continueWith: (i := i + 1sz).
            }.
        } ifFalse: {
            memcpy(result __rawContentsPointer__, self __rawContentsPointer__, mySize).
            memcpy((result __rawContentsBytePointer__ + mySize asIntPointer) reinterpretCastTo: Void pointer, otherString __rawContentsPointer__, otherSize).
        }.

        result
    }.

    public pure final method asSymbol => StringSymbol := {
        <primitive: #String::asSymbol>
        StringSymbol intern: self.
    }.

    public override final pure method withoutSuffix: (suffix: SequenceableCollection) ::=> String
        := super withoutSuffix: suffix.

    public method replaceBytesFrom: (startIndex: Size) count: (replacementSize: Size) with: replacement startingAt: (replacementOffset: Size) ::=> Void := {
        startIndex + replacementSize <= self __byteSize__ ifFalse: (self errorSubscriptBounds: startIndex).
        replacementOffset + replacementSize <= replacement __byteSize__ ifFalse: (self errorSubscriptBounds: replacementOffset).
        
        let i mutable := 0sz.
        while: (i < replacementSize) do: {
            self __uncheckedByteSlotAt__: startIndex + i put: (replacement __uncheckedByteSlotAt__: replacementOffset + i)
        } continueWith: (i := i + 1sz)
    }.

    public method replaceBytesFrom: (startIndex: Size) count: (replacementSize: Size) with: replacement ::=> Void
        := self replaceBytesFrom: startIndex count: replacementSize with: replacement startingAt: 0sz.
}.

Char8 extend: {
    public override final method asString => String
        := String with: self.

    public final method printCEscapedOn: (stream: Stream) ::=> Void := {
        self = '\n'c8 ifTrue: {stream string: "\\n". return: void}.
        self = '\r'c8 ifTrue: {stream string: "\\r". return: void}.
        self = '\t'c8 ifTrue: {stream string: "\\t". return: void}.
        self = '\\'c8 ifTrue: {stream string: "\\\\". return: void}.

        (self < ' 'c8) || (self >= 128c8) ifTrue: {
            stream string: "x".
            self asUInt8 printHexOn: stream.
        } ifFalse: {
            stream nextPut: self
        }
    }.

    public override final method stringOn: (stream: Stream) ::=> Void := {
        stream nextPut: self
    }.

    public override final method printOn: (stream: Stream) ::=> Void := {
        stream nextPut: '\''c8.
        self printCEscapedOn: stream.
        stream nextPut: '\''c8.
    }.
}.

Char16 extend: {
    public final method printCEscapedOn: (stream: Stream) ::=> Void := {
        self = '\n'c16 ifTrue: {stream string: "\\n". return: void}.
        self = '\r'c16 ifTrue: {stream string: "\\r". return: void}.
        self = '\t'c16 ifTrue: {stream string: "\\t". return: void}.
        self = '\\'c16 ifTrue: {stream string: "\\\\". return: void}.

        (self < ' 'c16) || (self >= 128c16) ifTrue: {
            stream string: "u".
            self asUInt16 printHexOn: stream.
        } ifFalse: {
            stream nextPut: self asChar8
        }
    }.

    public override final method printOn: (stream: Stream) ::=> Void := {
        stream nextPut: '\''c8.
        self printCEscapedOn: stream.
        stream nextPut: '\''c8.
    }.
}.

Char32 extend: {
    public final method printCEscapedOn: (stream: Stream) ::=> Void := {
        self = '\n'c32 ifTrue: {stream string: "\\n". return: void}.
        self = '\r'c32 ifTrue: {stream string: "\\r". return: void}.
        self = '\t'c32 ifTrue: {stream string: "\\t". return: void}.
        self = '\\'c32 ifTrue: {stream string: "\\\\". return: void}.

        (self < ' 'c32) || (self >= 128c32) ifTrue: {
            stream string: "U".
            self asUInt32 printHexOn: stream.
        } ifFalse: {
            stream nextPut: self asChar8
        }
    }.

    public override final method printOn: (stream: Stream) ::=> Void := {
        stream nextPut: '\''c8.
        self printCEscapedOn: stream.
        stream nextPut: '\''c8.
    }.
}.

UInt8 extend: {
    public method printHexDigitOn: (stream: Stream) ::=> Void := {
        (0u8 <= self) && (self <= 9u8)
            ifTrue: (stream nextPut: self asChar8 + '0'c8)
            ifFalse: (stream nextPut: self asChar8 + 'A'c8 - 10c8).
    }.

    public method printHexOn: (stream: Stream) ::=> Void := {
        self >> 4u8 printHexDigitOn: stream.
        self & 16rF u8 printHexDigitOn: stream.
    }.

    public override final method asString => String
        := self asUInt32 asString.

    public override final method printString => String
        := self asUInt32 asString.
}.

UInt16 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        (self >> 8u16) asUInt8 printHexOn: stream.
        self asUInt8 printHexOn: stream.
    }.

    public override final method asString => String
        := self asUInt32 asString.

    public override final method printString => String
        := self asUInt32 asString.
}.

UInt32 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        (self >> 16u32) asUInt16 printHexOn: stream.
        self asUInt16 printHexOn: stream.
    }.

    public override final method asString => String := {
        let digitCount mutable := 0sz.
        let currentValue mutable := self.

        ## Count the required number of digits.
        do: {
            currentValue := currentValue / 10u32.
            digitCount := digitCount + 1sz.
        } while: (currentValue ~= 0u32).

        let result := String basicAllocate: digitCount.
        
        ## Emit the string
        currentValue := self.
        let digitIndex mutable := 0sz.
        do: {
            let digit := currentValue % 10u32.
            currentValue := currentValue / 10u32.
            result at: digitCount - digitIndex - 1sz put: '0'c8 + digit asChar8.
            digitIndex := digitIndex + 1sz
        } while: (currentValue ~= 0u32).

        result
    }.

    public override final method printString => String
        := self asString.
}.

UInt64 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        (self >> 32u64) asUInt32 printHexOn: stream.
        self asUInt32 printHexOn: stream.
    }.

    public override final method asString => String := {
        let digitCount mutable := 0sz.
        let currentValue mutable := self.

        ## Count the required number of digits.
        do: {
            currentValue := currentValue / 10u64.
            digitCount := digitCount + 1sz.
        } while: (currentValue ~= 0u64).

        let result := String basicAllocate: digitCount.
        
        ## Emit the string
        currentValue := self.
        let digitIndex mutable := 0sz.
        do: {
            let digit := currentValue % 10u64.
            currentValue := currentValue / 10u64.
            result at: digitCount - digitIndex - 1sz put: '0'c8 + digit asChar8.
            digitIndex := digitIndex + 1sz
        } while: (currentValue ~= 0u64).

        result
    }.

    public override final method printString => String
        := self asString.
}.

Int8 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        self asUInt8 printHexOn: stream.
    }.

    public override final method asString => String
        := self asInt32 asString.

    public override final method printString => String
        := self asInt32 asString.
}.

Int16 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        self asUInt16 printHexOn: stream.
    }.

    public override final method asString => String
        := self asInt32 asString.

    public override final method printString => String
        := self asInt32 asString.
}.

Int32 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        self asUInt32 printHexOn: stream.
    }.

    public override final method asString => String := {
        let absoluteValue := self >= 0i32 ifTrue: self asUInt32 ifFalse: self negated asUInt32.
        let isNegative := self < 0i32.
        let digitCount mutable := 0sz.
        let currentValue mutable := absoluteValue.

        ## Count the required number of digits.
        do: {
            currentValue := currentValue / 10u32.
            digitCount := digitCount + 1sz.
        } while: (currentValue ~= 0u32).

        let prefixSize := isNegative ifTrue: 1sz ifFalse: 0sz.
        let result := String basicAllocate: prefixSize + digitCount.
        
        ## Emit the string
        isNegative ifTrue: (result at: 0sz put: '-'c8).
        currentValue := absoluteValue.
        let digitIndex mutable := 0sz.
        do: {
            let digit := currentValue % 10u32.
            currentValue := currentValue / 10u32.
            result at: prefixSize + digitCount - digitIndex - 1sz put: '0'c8 + digit asChar8.
            digitIndex := digitIndex + 1sz
        } while: (currentValue ~= 0u32).

        result
    }.

    public override final method printString => String
        := self asString.
}.

Int64 extend: {
    public method printHexOn: (stream: Stream) ::=> Void := {
        self asUInt64 printHexOn: stream.
    }.

    public override final method asString => String := {
        let absoluteValue := self >= 0i64 ifTrue: self asUInt64 ifFalse: self negated asUInt64.
        let isNegative := self < 0i64.
        let digitCount mutable := 0sz.
        let currentValue mutable := absoluteValue.

        ## Count the required number of digits.
        do: {
            currentValue := currentValue / 10u64.
            digitCount := digitCount + 1sz.
        } while: (currentValue ~= 0u64).

        let prefixSize := isNegative ifTrue: 1sz ifFalse: 0sz.
        let result := String basicAllocate: prefixSize + digitCount.
        
        ## Emit the string
        isNegative ifTrue: (result at: 0sz put: '-'c8).
        currentValue := absoluteValue.
        let digitIndex mutable := 0sz.
        do: {
            let digit := currentValue % 10u64.
            currentValue := currentValue / 10u64.
            result at: prefixSize + digitCount - digitIndex - 1sz put: '0'c8 + digit asChar8.
            digitIndex := digitIndex + 1sz
        } while: (currentValue ~= 0u64).

        result
    }.

    public override final method printString => String
        := self asString.
}.

Float32 definition: {
    __Meta__ definition: {
        public final method parseString: (string: String) ::=> Float32
            := (Float64 parseString: string) asFloat32.
    }.

    public override final pure method printString => String
        := self asFloat64 printString.
}.

Float64 definition: {
    __Meta__ definition: {
        public final method parseString: (string: String) ::=> Float64
            := sysmel_pal_parseFloat64(string size, string __rawContentsPointer__ reinterpretCastTo: Char8 const pointer).
    }.
    
    public override final pure method printString => String := {
        let cstring := sysmel_pal_float64ToString(self).
        let result := String fromCString: cstring.
        sysmel_pal_free(cstring reinterpretCastTo: Void pointer).
        result
    }.
}.

Integer definition: {
    __Meta__ definition: {
        public final method parseString: (string: String) ::=> Integer := {
            let result mutable := 0.
            let radix mutable := 10.
            let canParseRadix mutable := true.

            let size := string size.
            let isNegative := size > 0sz && (string first = '-'c8).
            let i mutable := isNegative ifTrue: 1sz ifFalse: 0sz.

            while: (i < size) do: {
                let c := string char8At: i.
                ('0'c8 <= c) && (c <= '9'c8) ifTrue: {
                    let digit := (c - '0'c8) asInteger.
                    result := result * radix + digit.
                    continue().
                }.

                canParseRadix ifTrue: {
                    ('r'c8 = c) || ('R'c8 = c) ifTrue: {
                        radix := result.
                        result := 0.
                        canParseRadix := false.
                        continue().
                    }
                } ifFalse: {
                    ('A'c8 <= c) && (c <= 'Z'c8) ifTrue: {
                        let digit := (c - 'A'c8) asInteger + 10.
                        result := result * radix + digit.
                        continue().
                    }.

                    ('a'c8 <= c) && (c <= 'z'c8) ifTrue: {
                        let digit := (c - 'a'c8) asInteger + 10.
                        result := result * radix + digit.
                        continue().
                    }.
                }.

                ## Ignore the separator.
                '_'c8 = c ifTrue: {
                    continue().
                }.

                error("Invalid integer literal.")
            } continueWith: (i := i + 1sz).

            isNegative
                ifTrue: result negated
                ifFalse: result
        }.
    }.

    public override final method asString => String := {
        let absoluteValue := self >= 0 ifTrue: self ifFalse: self negated.
        let isNegative := self < 0.
        let digitCount mutable := 0sz.
        let currentValue mutable := absoluteValue.

        ## Count the required number of digits.
        do: {
            currentValue := currentValue // 10.
            digitCount := digitCount + 1sz.
        } while: (currentValue ~~ 0).

        let prefixSize := isNegative ifTrue: 1sz ifFalse: 0sz.
        let result := String basicAllocate: prefixSize + digitCount.
        
        ## Emit the string
        isNegative ifTrue: (result at: 0sz put: '-'c8).
        currentValue := absoluteValue.
        let digitIndex mutable := 0sz.
        do: {
            let digit := currentValue % 10.
            currentValue := currentValue // 10.
            result at: prefixSize + digitCount - digitIndex - 1sz put: '0'c8 + digit asChar8.
            digitIndex := digitIndex + 1sz
        } while: (currentValue ~~ 0).

        result
    }.

    public override final method printString => String
        := self asString.
}.

print adoptDefinitionOf: {:(Array)elements... :: Void |
    elements do: {:each :: Void | each asString writeOntoStdout}
} withEagerAnalysis.

printLine adoptDefinitionOf: {:(Array)elements... :: Void |
    elements do: {:each :: Void | each asString writeOntoStdout}.
    "\n" writeOntoStdout
} withEagerAnalysis.
