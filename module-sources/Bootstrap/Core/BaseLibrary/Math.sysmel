## Common number methods
(
    UInt8,Int8,Char8,
    UInt16,Int16,Char16,
    UInt32,Int32,Char32,
    UInt64,Int64,
    Float32,Float64,
    Integer
) macroDo: {:NumberType :: Void |
    let primitivePrefix := NumberType name asString -- "::".
    let isUnsigned := NumberType one negated > NumberType zero.

    NumberType definition: {
        public pure final eager method negated ::=> SelfType := {
            <primitive: (primitivePrefix -- "negated") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method + (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "+") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method - (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "-") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method * (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "*") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        NumberType ~~ Integer ifTrue: {
            public pure final eager method / (other: SelfType) ::=> SelfType := {
                <primitive: (primitivePrefix -- "/") asSymbol>
                <targetDefinedPrimitive>
                primitiveFailedError()
            }.
        }.

        public pure final override eager method = (other: SelfType) ::=> Boolean := {
            <primitive: (primitivePrefix -- "=") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final override eager method ~= (other: SelfType) ::=> Boolean := {
            <primitive: (primitivePrefix -- "~=") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method <=> (other: SelfType) ::=> Int32 := {
            <primitive: (primitivePrefix -- "<=>") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method < (other: SelfType) ::=> Boolean := {
            <primitive: (primitivePrefix -- "<") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method <= (other: SelfType) ::=> Boolean := {
            <primitive: (primitivePrefix -- "<=") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method >= (other: SelfType) ::=> Boolean := {
            <primitive: (primitivePrefix -- ">=") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method > (other: SelfType) ::=> Boolean := {
            <primitive: (primitivePrefix -- ">") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        if: isUnsigned then: {
            public pure final eager method abs ::=> SelfType := {
                <primitive: #yourself>
                <targetDefinedPrimitive>
                self
            }
        } else: {
            public pure final eager method abs ::=> SelfType := {
                <primitive: (primitivePrefix -- "abs") asSymbol>
                if: self < SelfType zero then: self negated else: self.
            }.
        }.

        public pure final eager method min: (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "min:") asSymbol>
            if: self <= other then: self else: other.
        }.

        public pure final eager method max: (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "max:") asSymbol>
            if: self >= other then: self else: other.
        }.

        public pure final eager method asUInt8 ::=> UInt8 := {
            <primitive: (primitivePrefix -- "asUInt8") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method asInt8 ::=> Int8 := {
            <primitive: (primitivePrefix -- "asInt8") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method asChar8 ::=> Char8 := {
            <primitive: (primitivePrefix -- "asChar8") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method asUInt16 ::=> UInt16 := {
            <primitive: (primitivePrefix -- "asUInt16") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method asInt16 ::=> Int16 := {
            <primitive: (primitivePrefix -- "asInt16") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method asChar16 ::=> Char16 := {
            <primitive: (primitivePrefix -- "asChar16") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method asUInt32 ::=> UInt32 := {
            <primitive: (primitivePrefix -- "asUInt32") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method asInt32 ::=> Int32 := {
            <primitive: (primitivePrefix -- "asInt32") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method asChar32 ::=> Char32 := {
            <primitive: (primitivePrefix -- "asChar32") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method asUInt64 ::=> UInt64 := {
            <primitive: (primitivePrefix -- "asUInt64") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method asInt64 ::=> Int64 := {
            <primitive: (primitivePrefix -- "asInt64") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        if: Size == UInt64 then: {
            public pure final eager method asSize ::=> Size := {
                <primitive: (primitivePrefix -- "asUInt64") asSymbol>
                <targetDefinedPrimitive>
                primitiveFailedError()
            }.

            public pure final eager method asIntPointer ::=> IntPointer := {
                <primitive: (primitivePrefix -- "asInt64") asSymbol>
                <targetDefinedPrimitive>
                primitiveFailedError()
            }.

            public pure final eager method asUIntPointer ::=> UIntPointer := {
                <primitive: (primitivePrefix -- "asUInt64") asSymbol>
                <targetDefinedPrimitive>
                primitiveFailedError()
            }.
        } else: {
            public pure final eager method asSize ::=> Size := {
                <primitive: (primitivePrefix -- "asUInt32") asSymbol>
                <targetDefinedPrimitive>
                primitiveFailedError()
            }.

            public pure final eager method asIntPointer ::=> IntPointer := {
                <primitive: (primitivePrefix -- "asInt32") asSymbol>
                <targetDefinedPrimitive>
                primitiveFailedError()
            }.

            public pure final eager method asUIntPointer ::=> UIntPointer := {
                <primitive: (primitivePrefix -- "asUInt32") asSymbol>
                <targetDefinedPrimitive>
                primitiveFailedError()
            }.
        }.


        public pure final eager method asFloat32 ::=> Float32 := {
            <primitive: (primitivePrefix -- "asFloat32") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method asFloat64 ::=> Float64 := {
            <primitive: (primitivePrefix -- "asFloat64") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.
    }
}.

## Literal conversion methods
(
    Integer, Char32, Float64
) macroDo: {:LiteralType :: Void |
    LiteralType extend: {
        public pure final eager method u8 => UInt8 := self asUInt8.
        public pure final eager method i8 =>  Int8 := self  asInt8.
        public pure final eager method c8 => Char8 := self asChar8.

        public pure final eager method u16 => UInt16 := self asUInt16.
        public pure final eager method i16 =>  Int16 := self  asInt16.
        public pure final eager method c16 => Char16 := self asChar16.

        public pure final eager method u32 => UInt32 := self asUInt32.
        public pure final eager method i32 =>  Int32 := self  asInt32.
        public pure final eager method c32 => Char32 := self asChar32.

        public pure final eager method u64 => UInt64 := self asUInt64.
        public pure final eager method i64 =>  Int64 := self  asInt64.

        public pure final eager method f32 => Float32 := self asFloat32.
        public pure final eager method f64 => Float64 := self asFloat64.

        public pure final eager method bflgs => Bitflags := self asUInt64.
        public pure final eager method sz => Size := self asSize.
        public pure final eager method uptr => UIntPointer := self asUIntPointer.
        public pure final eager method iptr => IntPointer := self asIntPointer.
    }.
}.

## Integer methods.
(
    UInt8,Int8,Char8,
    UInt16,Int16,Char16,
    UInt32,Int32,Char32,
    UInt64,Int64,
    Integer
) macroDo: {:IntegerType :: Void |
    let primitivePrefix := IntegerType name asString -- "::".

    IntegerType definition: {
        public pure final eager method bitInvert ::=> SelfType := {
            <primitive: (primitivePrefix -- "bitInvert") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method // (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "/") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method // (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "/") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method % (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "%") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method \\ (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "%") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method \ (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "%") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method & (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "&") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method | (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "|") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method ^ (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "^") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method << (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- "<<") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method >> (other: SelfType) ::=> SelfType := {
            <primitive: (primitivePrefix -- ">>") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method alignedTo: (alignment: SelfType) ::=> SelfType
            := (self + alignment - SelfType one) & alignment negated.

        public pure final eager method highBit ::=> SelfType := {
            <primitive: (primitivePrefix -- "highBit") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        public pure final eager method lowBit ::=> SelfType := {
            <primitive: (primitivePrefix -- "lowBit") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.

        ## Bitwise logarithm base 2.
        public pure final eager method log2Floor ::=> SelfType
            := self highBit - SelfType one.

        #**
        * According to https:##en.wikipedia.org/wiki/Binary_logarithm:
        * floor(log2(n)) = ceil(log2(n + 1)) - 1
        * => ceil(log2(n + 1)) = floor(log2(n)) + 1
        * => ceil(log2(n)) = floor(log2(n - 1)) + 1
        *#
        public pure final eager method log2Ceiling ::=> SelfType
            := (self - SelfType one) log2Floor + SelfType one.

        public pure final eager method asSmallerPowerOfTwo ::=> SelfType
            := SelfType one << self log2Floor.

        public pure final eager method asLargerPowerOfTwo ::=> SelfType
            := SelfType one << self log2Ceiling.
    }.
}.

## Float methods.
(
    Float32, Float64
) macroDo: {:FloatType :: Void |
    let primitivePrefix := FloatType name asString -- "::".

    FloatType definition: {
        public pure final eager method sqrt ::=> SelfType := {
            <primitive: (primitivePrefix -- "sqrt") asSymbol>
            <targetDefinedPrimitive>
            primitiveFailedError()
        }.
    }.
}.

UInt32 definition: {
    public pure final method asIEEEFloat32Decoded => Float32 := {
        <primitive: #UInt32::asIEEEFloat32Decoded>
        <targetDefinedPrimitive>
        primitiveFailedError()
    }.
}.

UInt64 definition: {
    public pure final method asIEEEFloat64Decoded => Float64 := {
        <primitive: #UInt64::asIEEEFloat64Decoded>
        <targetDefinedPrimitive>
        primitiveFailedError()
    }.
}.

Float32 definition: {
    public pure final method asIEEEFloat32Encoding => UInt32 := {
        <primitive: #Float32::asIEEEFloat32Encoding>
        <targetDefinedPrimitive>
        primitiveFailedError()
    }.
}.

Float64 definition: {
    public pure final method asIEEEFloat64Encoding => UInt64 := {
        <primitive: #Float64::asIEEEFloat64Encoding>
        <targetDefinedPrimitive>
        primitiveFailedError()
    }.
}.

