ByteArray definition: {
    public final override method copyFrom: (startIndex: Size) until: (endIndex: Size) ::=> ByteArray := {
        let resultSize := startIndex <= endIndex
            ifTrue: endIndex - startIndex
            ifFalse: 0sz.

        let result := ByteArray basicAllocate: resultSize.
        let i mutable := 0sz.
        while: i < resultSize do: (
            result __uncheckedByteSlotAt__: i put: (self __uncheckedByteSlotAt__: startIndex + i)
        ) continueWith: (i := i + 1sz).

        result
    }.

    public method replaceBytesFrom: (startIndex: Size) count: (replacementSize: Size) with: replacement startingAt: (replacementOffset: Size) ::=> Void := {
        startIndex + replacementSize <= self __byteSize__ ifFalse: (self errorSubscriptBounds: startIndex).
        replacementOffset + replacementSize <= replacement __byteSize__ ifFalse: (self errorSubscriptBounds: replacementOffset).
        
        let i mutable := 0sz.
        while: (i < replacementSize) do: {
            self __uncheckedByteSlotAt__: startIndex + i put: (replacement __uncheckedByteSlotAt__: replacementOffset + i)
        } continueWith: (i := i + 1sz)
    }.

    public method replaceBytesFrom: (startIndex: Size) count: (replacementSize: Size) with: replacement ::=> Void
        := self replaceBytesFrom: startIndex count: replacementSize with: replacement startingAt: 0sz.
}.

ByteArray
    withSelector: #char8At: addMethod: {:(ByteArray)self :(Size)index :: Char8 |
        (self uint8At: index) asChar8
    };
    withSelector: #char8At:put: addMethod: {:(ByteArray)self :(Size)index :(Char8)value :: Void |
        self uint8At: index put: value asUInt8
    };
    withSelector: #int8At: addMethod: {:(ByteArray)self :(Size)index :: Int8 |
        (self uint8At: index) asInt8
    };
    withSelector: #int8At:put: addMethod: {:(ByteArray)self :(Size)index :(Int8)value :: Void |
        self uint8At: index put: value asUInt8
    };

    withSelector: #uint16At: addMethod: {:(ByteArray)self :(Size)index :: UInt16 |
        (self uint8At: index) asUInt16
        | ((self uint8At: index + 1sz) asUInt16 << 8u16)
    };
    withSelector: #uint16At:put: addMethod: {:(ByteArray)self :(Size)index :(UInt16)value :: Void |
        self
            uint8At: index put: value asUInt8;
            uint8At: index + 1sz put: (value >> 8u16) asUInt8
    };
    withSelector: #char16At: addMethod: {:(ByteArray)self :(Size)index :: Char16 |
        (self uint16At: index) asChar16
    };
    withSelector: #char16At:put: addMethod: {:(ByteArray)self :(Size)index :(Char16)value :: Void |
        self uint16At: index put: value asUInt16
    };
    withSelector: #int16At: addMethod: {:(ByteArray)self :(Size)index :: Int16 |
        (self uint16At: index) asInt16
    };
    withSelector: #int16At:put: addMethod: {:(ByteArray)self :(Size)index :(Int16)value :: Void |
        self uint16At: index put: value asUInt16
    };

    withSelector: #uint32At: addMethod: {:(ByteArray)self :(Size)index :: UInt32 |
        (((self uint8At: index) asUInt32
        | ((self uint8At: index + 1sz) asUInt32 << 8u32))
        | ((self uint8At: index + 2sz) asUInt32 << 16u32))
        | ((self uint8At: index + 3sz) asUInt32 << 24u32)
    };
    withSelector: #uint32At:put: addMethod: {:(ByteArray)self :(Size)index :(UInt32)value :: Void |
        self
            uint8At: index put: value asUInt8;
            uint8At: index + 1sz put: (value >> 8u32) asUInt8;
            uint8At: index + 2sz put: (value >> 16u32) asUInt8;
            uint8At: index + 3sz put: (value >> 24u32) asUInt8
    };
    withSelector: #char32At: addMethod: {:(ByteArray)self :(Size)index :: Char32 |
        (self uint32At: index) asChar32
    };
    withSelector: #char32At:put: addMethod: {:(ByteArray)self :(Size)index :(Char32)value :: Void |
        self uint32At: index put: value asUInt32
    };
    withSelector: #int32At: addMethod: {:(ByteArray)self :(Size)index :: Int32 |
        (self uint32At: index) asInt32
    };
    withSelector: #int32At:put: addMethod: {:(ByteArray)self :(Size)index :(Int32)value :: Void |
        self uint32At: index put: value asUInt32
    };

    withSelector: #uint64At: addMethod: {:(ByteArray)self :(Size)index :: UInt64 |
        (((((((self uint8At: index) asUInt64
        | ((self uint8At: index + 1sz) asUInt64 << 8u64))
        | ((self uint8At: index + 2sz) asUInt64 << 16u64))
        | ((self uint8At: index + 3sz) asUInt64 << 24u64))
        | ((self uint8At: index + 4sz) asUInt64 << 32u64))
        | ((self uint8At: index + 5sz) asUInt64 << 40u64))
        | ((self uint8At: index + 6sz) asUInt64 << 48u64))
        | ((self uint8At: index + 7sz) asUInt64 << 56u64)
    };
    withSelector: #uint64At:put: addMethod: {:(ByteArray)self :(Size)index :(UInt64) value :: Void |
        self
            uint8At: index put: value asUInt8;
            uint8At: index + 1sz put: (value >> 8u64) asUInt8;
            uint8At: index + 2sz put: (value >> 16u64) asUInt8;
            uint8At: index + 3sz put: (value >> 24u64) asUInt8;
            uint8At: index + 4sz put: (value >> 32u64) asUInt8;
            uint8At: index + 5sz put: (value >> 40u64) asUInt8;
            uint8At: index + 6sz put: (value >> 48u64) asUInt8;
            uint8At: index + 7sz put: (value >> 56u64) asUInt8
    };
    withSelector: #int64At: addMethod: {:(ByteArray)self :(Size)index :: Int64 |
        (self uint64At: index) asInt64
    };
    withSelector: #int64At:put: addMethod: {:(ByteArray)self :(Size)index :(Int64) value :: Void |
        self uint64At: index put: value asUInt64
    };

    withSelector: #float32At: addMethod: {:(ByteArray)self :(Size)index :: Float32 |
        (self uint32At: index) asIEEEFloat32Decoded
    };
    withSelector: #float32At:put: addMethod: {:(ByteArray)self :(Size)index :(Float32)value :: Void |
        self uint32At: index put: value asIEEEFloat32Encoding
    };

    withSelector: #float64At: addMethod: {:(ByteArray)self :(Size)index :: Float64 |
        (self uint64At: index) asIEEEFloat64Decoded
    };
    withSelector: #float64At:put: addMethod: {:(ByteArray)self :(Size)index :(Float64)value :: Void |
        self uint64At: index put: value asIEEEFloat64Encoding
    }.