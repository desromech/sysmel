let InternedSymbolSet := BootstrapEnv::InternedSymbolSet.
let hashFunction := {:(String)string :: Size | string hash }.
let equalsFunction := {:(String)string :(StringSymbol)symbol :: Boolean |
    string equalsStringSymbol: symbol
}.

StringSymbol extend: {
    __Meta__ definition: {
        public method intern: (string: String) ::=> StringSymbol := {
            let existent := InternedSymbolSet atOrNil: string withHashFunction: hashFunction equalsFunction: equalsFunction.
            existent ifNotNil: {return: existent}.

            let newSymbol => AnyValue := string shallowCopy.
            (RawTuple::identityHash:)(newSymbol, string hash).
            (RawTuple::type:)(newSymbol, StringSymbol).

            InternedSymbolSet add: newSymbol.

            newSymbol
        }.
    }.

    public method <=> (other: StringSymbol) ::=> Int32 := {
        let minSize := self size min: other size.
        let i mutable := 0sz.
        while: (i < minSize) do: {
            let d := (self at: i) asInt32 - (other at: i) asInt32.
            d ~= 0i32 ifTrue: {return: d}
        } continueWith: (i := i + 1sz).

        (self size - other size) asInt32
    }.

    public method < (other: StringSymbol) ::=> Boolean
        := (self <=> other) < 0i32.
    public method <= (other: StringSymbol) ::=> Boolean
        := (self <=> other) <= 0i32.
    public method > (other: StringSymbol) ::=> Boolean
        := (self <=> other) > 0i32.
    public method >= (other: StringSymbol) ::=> Boolean
        := (self <=> other) >= 0i32.

    public method numSelectorArgs => Size := {
        let count mutable := 0sz.
        let i mutable := 0sz.
        let size := self size.
        while: (i < size) do: {
            if: (self at: i) = ':'c8 then: {
                if: (i + 1sz == size) || (((i + 1sz) < size) && ((self at: i) = ':'c8 )) then: {
                    count := i + 1sz
                }
            }
        } continueWith: (i := i + 1sz).
        count
    }.

    public method beginsWith: (prefix: String) ::=> Boolean := {
        let prefixSize := prefix size.
        if: self size < prefixSize then: {return: false}.

        let i mutable := 0sz.
        while: (i < prefixSize) do: {
            if: (self at: i) ~= (prefix at: i) then: {return: false}
        } continueWith: (i := i + 1sz).

        true
    }.

    public override pure final method asString => String := {
        let size := self size.
        let result := String new: size.
        let i mutable := 0sz.
        while: (i < size) do: {
            result at: i put: (self at: i)
        } continueWith: (i := i + 1sz).

        result
    }.

    public override pure final method printString => String := {
        let stream := StringStream new.
        self printOn: stream.
        stream asString
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream nextPut: '#'c8.

        let size := self size.
        let i mutable := 0sz.
        while: (i < size) do: {
            stream nextPut: (self at: i)
        } continueWith: (i := i + 1sz).
    }.
}.
