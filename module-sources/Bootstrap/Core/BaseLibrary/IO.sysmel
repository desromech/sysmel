(IO::readWholeFileNamedAsByteArray) adoptDefinitionOf: {:(String)filename :: ByteArray |
    <primitive: #IO::readWholeFileNamedAsByteArray>
    error("TODO: IO::readWholeFileNamedAsByteArray")
}.

(IO::readWholeFileNamedAsString) adoptDefinitionOf: {:(String)filename :: String |
    <primitive: #IO::readWholeFileNamedAsString>
    let file := sysmel_pal_openFile(filename size, filename __rawContentsPointer__ reinterpretCastTo: Char8 const pointer, SysmelPAL::FileOpenFlags::ReadOnly, SysmelPAL::FileCreationPermissions::None).
    sysmel_pal_isFileHandleValid(file) ifFalse: {
        error("Failed to open file " -- filename)
    }.

    let fileSize := sysmel_pal_seek(file, 0i64, SysmelPAL::SeekMode::End).
    sysmel_pal_seek(file, 0i64, SysmelPAL::SeekMode::Set).
    fileSize < 0i64 ifTrue: {
        sysmel_pal_closeFile(file).
        error("Failed to obtain file size of " -- filename)
    }.

    let result := String basicAllocate: fileSize asSize.
    let readCount := sysmel_pal_readFromFileAtOffset(file, 0u64, result size, result __rawContentsPointer__).
    sysmel_pal_closeFile(file).
    readCount asSize = result size ifFalse: {
        error("Failed to read whole content of" -- filename)
    }.

    result
}.

(IO::writeWholeFileNamedWithByteArray) adoptDefinitionOf: {:(String)filename :(ByteArray)data :: Boolean |
    <primitive: #IO::writeWholeFileNamedWithByteArray>
    error("TODO: IO::writeWholeFileNamedWithByteArray")
}.

(IO::writeWholeFileNamedWithString) adoptDefinitionOf: {:(String)filename :(String)data :: Boolean |
    <primitive: #IO::writeWholeFileNamedWithByteArray>
    error("TODO: IO::writeWholeFileNamedWithString")
}.

(loadSourceNamedWithSolvedPath:) adoptDefinitionOf: {:(String)solvedPath :: Void |
    error("TODO: implement loadSourceNamedWithSolvedPath: ")
}.
