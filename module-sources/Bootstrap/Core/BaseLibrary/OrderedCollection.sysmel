OrderedCollection::new adoptDefinitionOf: {:: OrderedCollection | OrderedCollection new}.

OrderedCollection definition: {
    public eager method capacity => Size
        := storage ifNil: 0sz ifNotNil: storage size.

    public eager method ensureCapacityForAtLeast: (additionalRequiredCapacity: Size) ::=> Void := {
        let requiredCapacity := size + additionalRequiredCapacity.
        requiredCapacity <= self capacity ifTrue: {return: void}.

        error("TODO: ensureCapacityForAtLeast:")
    }.

    public eager method untypedAdd: (element: Untyped) ::=> Void := {
        self ensureCapacityForAtLeast: 1sz.
        storage untypedAt: size put: element.
        size := size + 1sz.
    }.

    public eager method identityIncludes: element ::=> Boolean := {
        let i mutable := 0sz.
        let size := self size.
        while: (i < size) do: {
            element == (storage at: i) ifTrue: {
                return: true
            }
        } continueWith: (i := i + 1sz).

        false
    }.

    public eager method add: element ::=> Void
        := self untypedAdd: element.

    public override eager method asArray ::=> Array
        := storage isNil || size = 0sz
            ifTrue: #()
            ifFalse: (storage first: size).
}.
