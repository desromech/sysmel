Dictionary definition: {
    public virtual eager method scanFor: key ::=> IntPointer := {
        storage ifNil: { return: -1iptr }.

        let capacity := storage size.
        let keyHash => Size := key hash.
        let naturalIndex := keyHash % capacity.

        let i mutable := naturalIndex.
        while: (i < capacity) do: {
            let association := (storage at: i) uncheckedDownCastTo: LookupKey.
            if: association isNil || (association key = key) then: {
                return: i asIntPointer
            }
        } continueWith: (i := i + 1sz).

        i := 0sz.
        while: (i < naturalIndex) do: {
            let association := (storage at: i) uncheckedDownCastTo: LookupKey.
            if: association isNil || (association key = key) then: {
                return: i asIntPointer
            }
        } continueWith: (i := i + 1sz).

        -1iptr
    }.

    public eager method addAssociationNoCheck: (association: LookupKey) ::=> Void := {
        let index := self scanFor: association key.
        self assert: index >= 0iptr.
        storage at: index asSize put: association
    }.

    public final eager method capacity => Size
        := storage ifNil: 0sz ifNotNil: storage size.

    public final eager method increaseCapacity => Void := {
        let oldCapacity := self capacity.
        let newCapacity := oldCapacity * 2sz max: 8sz.
        let oldStorage := storage.
        storage := Array new: newCapacity.

        let i mutable := 0sz.
        while: (i < oldCapacity) do: {
            let oldAssociation := oldStorage at: i.
            oldAssociation ifNotNil: {
                self addAssociationNoCheck: oldAssociation
            }
        } continueWith: (i := i + 1sz)
    }.

    public final eager method checkCapacityIncreaseCondition => Void := {
        let capacityThreshold := self capacity * 4sz / 5sz.
        self size >= capacityThreshold ifTrue: {
            self increaseCapacity
        }
    }.

    public virtual eager method add: (association: LookupKey) ::=> Void := {
        let key := association key.
        let index mutable := self scanFor: key.
        index < 0iptr ifTrue: {
            self increaseCapacity.
            index := self scanFor: key.
            self assert: index >= 0iptr.
        }.

        let isNewAssociation := (storage at: index asSize) isNil.
        storage at: index asSize put: association.

        isNewAssociation ifTrue: {
            size := size + 1sz.
            self checkCapacityIncreaseCondition
        }
    }.

    public virtual eager method associationAtOrNil: selector := {
        let index := self scanFor: selector.
        index >= 0iptr ifTrue: {
            storage at: index asSize
        } ifFalse: {
            nil
        }
    }.

    public virtual eager method at: key := {
        let index := self scanFor: key.
        index >= 0iptr ifTrue: {
            let association := storage at: index asSize.
            association ifNil: {self error: "Key not found in method dictionary."}.

            (storage at: index asSize) value
        } ifFalse: {
            self error: "Key not found in method dictionary."
        }
    }.

    public virtual eager method at: key put: value ::=> Void := {
        let index mutable := self scanFor: key.
        index < 0iptr ifTrue: {
            self increaseCapacity.
            index := self scanFor: key.
            self assert: index >= 0iptr.
        }.

        let association := storage at: index asSize.
        association ifNotNil: {
            association value: value
        } ifNil: {
            let newAssociation := Association key: key value: value.
            storage at: index asSize put: newAssociation.
            size := size + 1sz.
            self checkCapacityIncreaseCondition
        }.
    }.

    public virtual eager method atOrNil: selector := {
        let index := self scanFor: selector.
        index >= 0iptr ifTrue: {
            let association := storage at: index asSize.
            association ifNotNil: association value.
        } ifFalse: {
            nil
        }
    }.

    public method keysAndValuesDo: aBlock ::=> Void := {
        storage ifNotNil: {
            storage do: {:element :: Void |
                if: element ~~ nil then: {
                    aBlock(element key, element value).
                }
            }
        }
    }.
}.
