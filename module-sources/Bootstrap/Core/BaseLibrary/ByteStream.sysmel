ByteStream definition: {
    public eager method capacity => Size
        := storage ifNil: 0sz ifNotNil: storage size.

    public method ensureCapacityFor: (requiredExtraSize: Size) ::=> Void := {
        let requiredCapacity := size + requiredExtraSize.
        requiredCapacity <= self capacity ifTrue: {return: void}.

        let newCapacity := requiredCapacity asLargerPowerOfTwo max: 16sz.
        let oldStorage := storage.
        let newStorage := ByteArray basicAllocate: newCapacity.
        let currentSize := size.
        ObjectModel::isLogical() ifTrue: {
            let i mutable := 0sz.
            while: (i < currentSize) do: {
                newStorage uint8At: i put: (oldStorage uint8At: i)
            } continueWith: (i := i + 1sz).
        } ifFalse: {
            memcpy(newStorage __rawContentsPointer__, oldStorage __rawContentsPointer__, currentSize).
        }.

        storage := newStorage.
    }.

    public override method nextPut: byte ::=> Void := {
        self ensureCapacityFor: 1sz.
        storage uint8At: size put: (byte uncheckedDownCastTo: UInt8).
        size := size + 1sz.
    }.

    public override method nextPutAll: aCollection ::=> Void := {
        RawTuple::isBytes(aCollection) ifTrue: {
            self nextPutAllBytesOf: aCollection
        } ifFalse: {
            self ensureCapacityFor: aCollection size.
            super nextPutAll: aCollection
        }
    }.

    public override method nextPutAllBytesOf: anObject ::=> Void := {
        let byteCount := RawTuple::byteSize(anObject).
        self ensureCapacityFor: byteCount.

        ObjectModel::isLogical() ifTrue: {
            let i mutable := 0sz.
            while: (i < byteCount) do: {
                storage uint8At: size put: (RawTuple::byteSlotAt:)(anObject, i) asUInt8.
                size := size + 1sz
            } continueWith: (i := i + 1sz).
        } ifFalse: {
            memcpy((self __slotNamedAt__: #storage) __rawContentsBytePointer__ + size asIntPointer reinterpretCastTo: Void pointer,
                anObject __rawContentsPointer__,
                byteCount).
            size := size + byteCount
        }
    }.

    public method nextPutString: (string: String) ::=> Void := {
        let stringSize := string size.
        self ensureCapacityFor: stringSize.

        let i mutable := 0sz.
        while: (i < stringSize) do: {
            storage char8At: size put: (string char8At: i).
            size := size + 1sz
        } continueWith: (i := i + 1sz).
    }.

    public method asByteArray => ByteArray
        := size = 0sz ifTrue: #[] ifFalse: (storage first: size).

    public override method asString => String := {
        let stringSize := self size.
        let string := String new: stringSize.

        let i mutable := 0sz.
        while: (i < stringSize) do: {
            string char8At: i put: (storage char8At: i).
        } continueWith: (i := i + 1sz).

        string
    }.

    public method asSymbol => StringSymbol
        := self asString asSymbol.
}.
