public function cstrlen(str: Char8 const pointer) => Size := {
    if: str == nil then: {return: 0sz}.

    let count mutable := 0sz.
    while: (str[count asIntPointer] ~= 0c8) do: {
        ## Nothing is required here.
    } continueWith: (count := count + 1sz).

    count
}.

public function memset(buffer: Void pointer, value: Int8, size: Size) => Void := {
    <primitive: #memset>
    let bytePointer := buffer reinterpretCastTo: Int8 pointer.

    let i mutable := 0sz.
    while: (i < size) do: {
        bytePointer[i asIntPointer] := value
    } continueWith: (i := i + 1sz).
}.

public function memcpy(dest: Void restrict pointer, source: Void restrict const pointer, size: Size) => Void := {
    <primitive: #memcpy>
    let destBytePointer := dest reinterpretCastTo: UInt8 restrict pointer.
    let sourceBytePointer := source reinterpretCastTo: UInt8 restrict const pointer.

    let i mutable := 0sz.
    while: (i < size) do: {
        destBytePointer[i asIntPointer] := sourceBytePointer[i asIntPointer]
    } continueWith: (i := i + 1sz).
}.

public function reverseMemcpy(dest: Void restrict pointer, source: Void restrict const pointer, size: Size) => Void := {
    <primitive: #reverseMemcpy>
    let destBytePointer := dest reinterpretCastTo: UInt8 restrict pointer.
    let sourceBytePointer := source reinterpretCastTo: UInt8 restrict const pointer.

    let i mutable := 0sz.
    while: (i < size) do: {
        destBytePointer[i asIntPointer] := sourceBytePointer[(size - i - 1sz) asIntPointer]
    } continueWith: (i := i + 1sz).
}.

public function memmove(dest: Void pointer, source: Void const pointer, size: Size) => Void := {
    <primitive: #memmove>
    let destBytePointer := dest reinterpretCastTo: UInt8 pointer.
    let sourceBytePointer := source reinterpretCastTo: UInt8 const pointer.

    let i mutable := 0sz.
    while: (i < size) do: {
        destBytePointer[i asIntPointer] := sourceBytePointer[i asIntPointer]
    } continueWith: (i := i + 1sz).
}.
