AnyValue definition: {
    public virtual method encodeAsJsonStyleObject
        := self printString.

    public virtual method encodeAsJsonString => String := {
        let stream := StringStream new.
        self encodeAsJsonStringOn: stream.
        stream asString
    }.

    public virtual method encodeAsJsonStringOn: (stream: Stream) ::=> Void := {
        self printString encodeAsJsonStringOn: stream
    }.
}.

Type definition: {
    public virtual method encodeAsJsonStyleObjectValue: (value: Untyped) := {
        (self isSubtypeOf: AnyValue) ifTrue: {
            let anyValue => AnyValue := value.
            return: anyValue encodeAsJsonStyleObject
        }.

        "a " -- self printString
    }.
}.

String definition: {
    public override method encodeAsJsonStyleObject
        := self.

    public override method encodeAsJsonString => String
        := self printString.

    public override method encodeAsJsonStringOn: (stream: Stream) ::=> Void := {
        self printOn: stream
    }.
}.

PrimitiveNumber definition: {
    public override method encodeAsJsonStyleObject
        := self.

    public override method encodeAsJsonString => String
        := self printString.

    public override method encodeAsJsonStringOn: (stream: Stream) ::=> Void := {
        self printOn: stream
    }.
}.

Integer definition: {
    public override method encodeAsJsonStyleObject
        := self.

    public override method encodeAsJsonString => String
        := self printString.

    public override method encodeAsJsonStringOn: (stream: Stream) ::=> Void := {
        self printOn: stream
    }.
}.

Boolean definition: {
    public override method encodeAsJsonStyleObject
        := self.

    public override method encodeAsJsonString => String
        := self ifTrue: "true" ifFalse: "false".

    public override method encodeAsJsonStringOn: (stream: Stream) ::=> Void := {
        stream string: self encodeAsJsonString
    }.
}.

UndefinedObject definition: {
    public override method encodeAsJsonStyleObject
        := self.

    public override method encodeAsJsonString => String
        := "null".

    public override method encodeAsJsonStringOn: (stream: Stream) ::=> Void := {
        stream string: "null"
    }.
}.

Dictionary definition: {
    public override method encodeAsJsonStyleObject
        := self.

    public override method encodeAsJsonStringOn: (stream: Stream) ::=> Void := {
        let isFirst mutable := true.
        stream nextPut: '{'c8.
        self keysAndValuesDo: {:key :value :: Void |
            isFirst ifTrue: {
                isFirst := false
            } ifFalse: {
                stream nextPut: ','c8
            }.

            key encodeAsJsonStringOn: stream.
            stream nextPut: ':'c8.
            value encodeAsJsonStringOn: stream.
        }.

        stream nextPut: '}'c8.
    }.
}.

Collection definition: {
    public override method encodeAsJsonStyleObject
        := self.

    public override method encodeAsJsonStringOn: (stream: Stream) ::=> Void := {
        let isFirst mutable := true.
        stream nextPut: '['c8.
        self do: {:element :: Void |
            isFirst ifTrue: {
                isFirst := false
            } ifFalse: {
                stream nextPut: ','c8
            }.

            element encodeAsJsonStringOn: stream.
        }.

        stream nextPut: ']'c8.
    }.
}.
