## Promote alloca

public final class HIRAllocaPromotionState definition: {
    public field alloca => HIRAllocaInstruction.
    public field valueType => Type.

    public field debugBindings => OrderedCollection.
    public field stores => OrderedCollection.
    public field loads => OrderedCollection.

    public field definitionBlockSet => OrderedInsertionIdentitySet.

    public field blockPhiDictionary => ObjectPointerDictionary.
    public field phiSet => OrderedInsertionIdentitySet.

    public field undefinedConstant => HIRUndefinedConstant.

    public method promote: (allocaToPromote: HIRAllocaInstruction) ::=> Void := {
        alloca := allocaToPromote.
        valueType := alloca valueType.
        self assert: valueType isNotNil.

        stores := OrderedCollection new.
        loads := OrderedCollection new.
        debugBindings := OrderedCollection new.

        alloca usersDo: {:(HIRValue)eachUser :: Void |
            eachUser isStoreInstruction ifTrue: {
                stores add: eachUser.
                return: void
            }.

            eachUser isLoadInstruction ifTrue: {
                loads add: eachUser.
                return: void
            }.

            eachUser isSetDebugValueForBindingInstruction ifTrue: {
                debugBindings add: eachUser.
                return: void
            }.

            self error: "Unsupported usage for alloca that can be promoted."
        }.

        ## Find the set of definition blocks.
        definitionBlockSet := OrderedInsertionIdentitySet new.
        let addBlockForDefinition := {:(HIRInstruction)definition :: Void |
            self assert: definition parent isNotNil.
            let block := definition parent.
            definitionBlockSet add: block
        }.

        stores do: addBlockForDefinition.

        ## Add the phi nodes.
        blockPhiDictionary := ObjectPointerDictionary new.
        phiSet := OrderedInsertionIdentitySet new.

        let pendingWork := OrderedInsertionIdentitySet new.
        pendingWork addAll: definitionBlockSet.

        let addPhiAtBlock := {:(HIRBasicBlock)phiBlockCandidate :: Void |
            (blockPhiDictionary includesKey: phiBlockCandidate) ifFalse: {
                let phi := HIRPhiInstruction new
                    type: valueType;
                    yourself.
                blockPhiDictionary at: phiBlockCandidate put: phi.

                phiSet add: phi.
                phiBlockCandidate addInstruction: phi before: phiBlockCandidate firstInstruction.
                (definitionBlockSet includes: phiBlockCandidate) ifFalse: {
                    pendingWork add: phiBlockCandidate
                }
            }
        }.

        definitionBlockSet do: addPhiAtBlock.

        while: (pendingWork isNotEmpty) do: {
            let nextBlock => HIRBasicBlock := pendingWork removeLast.
            nextBlock dominanceFrontier do: addPhiAtBlock
        }.

        ## Replace the loads with their definitions.
        loads do: {:(HIRInstruction)loadInstruction :: Void |
            loadInstruction replaceWith: (self validValueAtInstruction: loadInstruction inBlock: loadInstruction parent)
        }.

        ## Add the phi edges.
        phiSet do: {:(HIRPhiInstruction)phi :: Void |
            phi
                incomingBlocksAndValues: (phi parent predecessors collect: {:(HIRBasicBlock)eachPred :: Association |
                    eachPred -> (self validValueAtInstruction: eachPred lastInstruction inBlock: eachPred)
                }) asArray;
                registerInUsedValues
        }.

        ## Add new debug bindings at each definition.
        phiSet do: {:(HIRInstruction)phi :: Void |
            self addDebugBindingsBefore: phi parent firstInstructionAfterPhi inBlock: phi parent
        }.
        stores do: {:(HIRInstruction)store :: Void |
            self addDebugBindingsBefore: store inBlock: store parent
        }.
        debugBindings do: {:(HIRInstruction)each :: Void | each deleteFromParent }.

        ## Simplify the phi nodes.
        phiSet do: {:(HIRPhiInstruction)phi :: Void |
            phi userCount = 0sz ifTrue: {
                phi deleteFromParent
            } ifFalse: {
                phi incomingBlocksAndValues size = 0sz ifTrue: {
                    phi replaceWith: self validUndefinedConstant.
                } ifFalse: {
                    phi simplify
                }
            }.
        }.

        ## Delete the stores
        stores do: {:(HIRInstruction)each :: Void | each deleteFromParent }.

        ## Delete the alloca.
        alloca deleteFromParent.
    }.

    public method valueAtInstruction: (startInstruction: HIRInstruction) inBlock: (block: HIRBasicBlock) ::=> HIRValue := {
        self assert: block isNotNil.

        (definitionBlockSet includes: block) ifTrue: {
            let position mutable := startInstruction.
            while: position isNotNil do: {
                position isStoreInstruction ifTrue: {
                    let store := position downCastTo: HIRStoreInstruction.
                    store storage == alloca ifTrue: {
                        return: store value
                    }
                }.
            } continueWith: (position := position previousInstruction)
        }.

        (blockPhiDictionary includesKey: block) ifTrue: {
            return: (blockPhiDictionary at: block)
        }.

        block immediateDominator ifNotNil: {
            self valueAtInstruction: block immediateDominator lastInstruction inBlock: block immediateDominator
        }
    }.

    public method addDebugBindingsBefore: (position: HIRInstruction) inBlock: (block: HIRBasicBlock) ::=> Void := {
        self assert: block isNotNil.

        ## Filter out the undefined case.
        let value := self valueAtInstruction: position inBlock: block.
        value isNil || value isUndefinedConstant ifTrue: (return: void).
        value isPhiInstruction ifTrue: {
            let phi := value downCastTo: HIRPhiInstruction.
            phi incomingBlocksAndValues size = 0sz ifTrue: (return: void).
        }.

        ## Copy the debug bindings onto the new location.
        debugBindings do: {:(HIRSetDebugValueForBindingInstruction)oldDebugBinding :: Void |
            let newDebugBinding := HIRSetDebugValueForBindingInstruction new
                useSourceInformationOfValue: position;
                value: value;
                binding: oldDebugBinding binding;
                promotedFromAlloca: true;
                type: Void;
                registerInUsedValues;
                yourself.
            block addInstruction: newDebugBinding before: position
        }.
    }.

    public method validUndefinedConstant ::=> HIRUndefinedConstant
        := undefinedConstant ifNil: (undefinedConstant := HIRUndefinedConstant new type: valueType; yourself).

    public method validValueAtInstruction: (startInstruction: HIRInstruction) inBlock: (block: HIRBasicBlock) ::=> HIRValue := {
        (self valueAtInstruction: startInstruction inBlock: block) ifNil: self validUndefinedConstant
    }.

}.

public class HIRPromoteAllocaPass superclass: HIRFunctionDefinitionPass; definition: {
    public override method runInFunctionDefinition: (function: HIRFunctionDefinition) ::=> Void := {
        function computeDominance.

        let allocaInstructions := OrderedCollection new.
        function instructionsDo: {:(HIRInstruction)each :: Void |
            each isAllocaInstruction ifTrue: {
                let alloca := each downCastTo: HIRAllocaInstruction.
                alloca isLocalOnlyVariableAlloca ifTrue: {
                    allocaInstructions add: each
                }
            }
        }.

        allocaInstructions do: {:(HIRAllocaInstruction)each :: Void |
            HIRAllocaPromotionState new promote: each
        }.
    }
}.
