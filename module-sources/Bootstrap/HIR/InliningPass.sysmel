public class HIRInliningPass superclass: HIRTransformationPass; definition: {
    public field functionPasses => Array.

    public override method initialize => Void := {
        super initialize.
        functionPasses := #().
    }.

    public override method runInModule: (module: HIRModule) ::=> Void := {
        HIRInlinerState new
            functionPasses: functionPasses;
            processFunctions: module functionDefinitions.
    }.
}.

public final class HIRInlinerState definition: {
    public field functionPasses => Array.
    public field seenFunctionSet => ObjectPointerSet .

    public override method initialize => Void := {
        seenFunctionSet := ObjectPointerSet new.
    }.

    public method processFunction: (functionDefinition: HIRFunctionDefinition) ::=> Void := {
        ## Make sure the the computed called function defintion
        (seenFunctionSet includes: functionDefinition) ifFalse: {
            functionDefinition
                markWhite;
                computeCalledFunctionDefinitions.
            seenFunctionSet add: functionDefinition.
        }.

        ## Are we still traversing from this function?
        functionDefinition isWhite ifTrue: {
            functionDefinition markGray.
            self traverseAndInlineFunctionContent: functionDefinition.
            functionDefinition markBlack.
        } ifFalse: {
            functionDefinition isGray ifTrue: {
                functionDefinition hasRecursiveCalls: true
            }.

            return: void
        }.
    }.

    public method traverseAndInlineFunctionContent: (functionDefinition: HIRFunctionDefinition) ::=> Void := {
        self processFunctions: functionDefinition calledFunctionDefinitions.
        self inlineFunctionContent: functionDefinition.
    }.

    public method inlineFunctionContent: (functionDefinition: HIRFunctionDefinition) ::=> Void := {
        let shouldRunPass mutable := true.
        while: shouldRunPass do: {
            shouldRunPass := false.
            (functionDefinition calledFunctions anySatisfy: {:(HIRValue)calledFunction :: Boolean | calledFunction shouldBeInlinedIn: functionDefinition }) ifFalse: {
                return: void
            }.

            functionDefinition computeControlFlowAndNormalizeBasicBlocks.
            let hasInlinedAnyCall mutable := false.

            let eachBasicBlock mutable := functionDefinition firstBasicBlock.
            while: eachBasicBlock isNotNil do: {
                let position mutable := eachBasicBlock firstInstruction.
                while: position isNotNil do: {
                    position isCallInstruction ifTrue: {
                        let replacement := self inlineCallInstruction: (position downCastTo: HIRCallInstruction) in: functionDefinition.
                        replacement == position ifTrue: {
                            position := position nextInstruction
                        } ifFalse: {
                            hasInlinedAnyCall := true.
                            position := replacement.
                            eachBasicBlock := replacement parent.
                        }
                    } ifFalse: {
                        position := position nextInstruction
                    }
                }.

                eachBasicBlock := eachBasicBlock nextBlock
            }.

            hasInlinedAnyCall ifTrue: {
                functionDefinition
                    postTransformValidation: "Inlining";
                    computeControlFlowAndNormalizeBasicBlocks;
                    computeNewCalledFunctionDefinitions.

                functionPasses isNotEmpty ifTrue: {
                    functionDefinition runPasses: functionPasses.
                    shouldRunPass := true
                }
            }.
        }
    }.

    public method inlineCallInstruction: (call: HIRCallInstruction) in: (functionDefinition: HIRFunctionDefinition)::=> HIRInstruction := {
        let calledFunction := call calledFunction.
        let calledFunctionDefinition := calledFunction evaluateAsHIRFunctionDefinitionOrNil.
        calledFunctionDefinition isNotNil && (calledFunction shouldBeInlinedIn: functionDefinition) ifFalse: {
            return: call
        }.

        let callArguments => Array := call arguments.
        let calledCaptureValues => Array := call calledFunction evaluateCaptureValueListOrNil.
        calledCaptureValues ifNil: {return: call}.

        self assert: callArguments size = calledFunctionDefinition arguments size.
        self assert: calledCaptureValues size = calledFunctionDefinition captures size.

        ## Get the calling block.
        let callingBlock := call parent.

        ## Split and make the inline exit block.
        let exitBlock := callingBlock splitAfter: call.
        exitBlock name: #inlineExit.
        self assert: exitBlock firstInstruction isNotNil.

        let builder := (HIRInstructionBuilder forContext: call context)
            useSourceInformationOfValue: call;
            function: exitBlock parent;
            basicBlock: exitBlock;
            insertionPoint: exitBlock firstInstruction;
            yourself.

        ## Create the result value
        let resultPhi => HIRPhiInstruction := call type isVoidType ifTrue: {
            call userCount > 0sz ifTrue: {
                call replaceWith: (call context literal: void)
            } ifFalse: {
                call deleteFromParent
            }.

            nil
        } ifFalse: {
            let phi := builder phi: call type.
            call replaceWith: phi.
            phi
        }.

        ## Perform the actual inlining.
        let firstInlinedBlock := calledFunctionDefinition inlineInto: functionDefinition before: exitBlock arguments: callArguments captures: calledCaptureValues exitBlock: exitBlock resultPhi: resultPhi.

        ## Simplify the phi node
        resultPhi ifNotNil: (resultPhi simplify).

        ## Make the entry branch.
        let entryBranch := builder
            beginInsertingInBasicBlock: callingBlock;
            branch: firstInlinedBlock.

        exitBlock firstInstruction
    }.
    
    public method processFunctions: (functionDefinitions: Collection) ::=> Void := {
        functionDefinitions do: {:(HIRFunctionDefinition)each :: Void | self processFunction: each }
    }.
}.

