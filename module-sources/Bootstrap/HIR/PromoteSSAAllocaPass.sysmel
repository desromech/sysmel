public class HIRPromoteSSAAllocaPass superclass: HIRFunctionDefinitionPass; definition: {
    public override method runInFunctionDefinition: (function: HIRFunctionDefinition) ::=> Void := {
        function computeDominance.
        
        function instructionsDo: {:(HIRInstruction)each :: Void |
            each isAllocaInstruction ifTrue: {
                let alloca := each downCastTo: HIRAllocaInstruction.
                self processAlloca: alloca
            }
        }.

        function postTransformValidation: "PromoteSSAAllocaPass".
    }.

    public method processAlloca: (alloca: HIRAllocaInstruction) ::=> Void := {
        alloca userCount = 0sz ifTrue: {
            alloca deleteFromParent.
            return: void
        }.

        let firstUsage mutable => HIRInstruction := nil.
        let firstUsageIndex mutable := 0sz.

        alloca usersDo: {:(HIRValue)user :: Void |
            self assert: user isInstruction.
            user isSetDebugValueForBindingInstruction ifFalse: {
                let usageInstruction := user uncheckedDownCastTo: HIRInstruction.
                firstUsage isNil || (usageInstruction localValueIndex < firstUsageIndex) ifTrue: {
                    firstUsage := usageInstruction.
                    firstUsageIndex := firstUsageIndex.
                }
            }.
        }.

        firstUsage isStoreInstruction ifFalse: {
            return: void
        }.

        let hasOnlyLoadAndDebugUsers mutable := true.
        alloca usersDo: {:(HIRValue)user :: Void |
            user == firstUsage ifTrue: {
                return: void
            }.

            user isLoadInstruction || user isSetDebugValueForBindingInstruction ifFalse: {
                hasOnlyLoadAndDebugUsers := false.
                return: void
            }
        }.

        hasOnlyLoadAndDebugUsers ifFalse: {
            return: void
        }.

        let firstStoreInstruction := firstUsage uncheckedDownCastTo: HIRStoreInstruction.
        let storedValue := firstStoreInstruction value.

        alloca usersCopyDo: {:(HIRValue)user :: Void |
            self assert: user isInstruction.
            user isStoreInstruction ifTrue: {
                return: void
            }.

            let valueAtUsage := self getValidValueAt: (user uncheckedDownCastTo: HIRInstruction) withStoredValue: storedValue in: firstStoreInstruction.
            user isLoadInstruction ifTrue: {
                user replaceWith: valueAtUsage.
                return: void
            }.

            user isSetDebugValueForBindingInstruction ifTrue: {
                let setDebugValueInstruction := user uncheckedDownCastTo: HIRSetDebugValueForBindingInstruction.
                setDebugValueInstruction
                    value: valueAtUsage;
                    promotedFromAlloca: true;
                    registerInUsedValues.
                alloca unregisterUser: setDebugValueInstruction.
                return: void
            }.
        }.

        firstUsage deleteFromParent.
        alloca deleteFromParent
    }.

    public method getValidValueAt: (usageLocation: HIRInstruction) withStoredValue: (storedValue: HIRValue) in: (storeLocation: HIRInstruction) ::=> HIRValue := {
        (usageLocation isDominatedByInstruction: storeLocation) ifTrue: {
            storedValue
        } ifFalse: {
            HIRUndefinedConstant new type: storedValue type; yourself
        }
    }.
}.
