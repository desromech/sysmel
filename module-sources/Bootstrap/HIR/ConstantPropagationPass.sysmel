public class HIRConstantPropagationPass superclass: HIRFunctionDefinitionPass; definition: {
    public override method runInFunctionDefinition: (function: HIRFunctionDefinition) ::=> Void := {
        let pendingWork := OrderedInsertionIdentitySet new.

        let processInstruction := {:(HIRInstruction)instruction :: Void |
            instruction parent ifNil: (return: void).

            ## Dead code removal.
            instruction hasSideEffects not && instruction hasOnlyDebugUsers ifTrue: {
                instruction deleteAllDebugUsers.
                instruction usedValuesDo: {:(HIRValue)eachUsedValue :: Void |
                    eachUsedValue isInstruction && eachUsedValue hasSideEffects not ifTrue: {
                        pendingWork add: eachUsedValue
                    }
                }.
                
                instruction deleteFromParent.
                return: void
            }.

            ## Constant folding.
            let folded := instruction evaluateConstantFolding.
            folded == instruction ifFalse: {
                instruction isTerminatorInstruction ifTrue: {
                    self assert: folded isTerminatorInstruction.
                    let foldedTerminator := folded uncheckedDownCastTo: HIRInstruction.
                    let oldSuccesors := instruction successors.
                    let newSuccessors := foldedTerminator successors.

                    instruction parent replaceSuccessorsWith: newSuccessors.
                    pendingWork addAll: oldSuccesors; addAll: newSuccessors
                }.

                instruction usedValuesDo: {:(HIRValue)eachUsedValue :: Void |
                    eachUsedValue isInstruction ifTrue: {
                        pendingWork add: eachUsedValue
                    }
                }.

                instruction usersDo: {:(HIRValue)eachUser :: Void |
                    eachUser isInstruction ifTrue: {
                        pendingWork add: eachUser
                    }
                }.

                instruction replaceWith: folded.
                folded isInstruction ifTrue: {
                    pendingWork add: folded
                }.

                return: void.
            }.
        }.

        let processBasicBlock := {:(HIRBasicBlock)basicBlock :: Void |
            basicBlock parent ifNil: {return: void}.

            (basicBlock ~~ function firstBasicBlock) && basicBlock predecessors isEmpty ifTrue: {
                pendingWork addAll: basicBlock successors.
                function deleteBasicBlock: basicBlock
            } ifFalse: {
                ## Merge basic blocks.
                (basicBlock successors size = 1sz) && basicBlock lastInstruction isBranchInstruction ifTrue: {
                    let mergedBlock => HIRBasicBlock := basicBlock successors first.

                    mergedBlock parent isNotNil && mergedBlock predecessors size = 1sz ifTrue: {
                        self assert: mergedBlock predecessors first == basicBlock.

                        ## Avoid introducing a new critical edge.
                        (basicBlock predecessors size >= 2sz) && (mergedBlock successors size >= 2sz) ifFalse: {
                            function mergeBlock: basicBlock withSuccessor: mergedBlock
                        }
                    }
                }.

                basicBlock instructionsDo: processInstruction
            }.
        }.

        function basicBlocksDo: processBasicBlock.
        while: pendingWork isNotEmpty do: {
            let pendingValue => HIRValue := pendingWork removeLast.
            pendingValue isBasicBlock ifTrue: {
                processBasicBlock(pendingValue uncheckedDownCastTo: HIRBasicBlock)
            } ifFalse: {
                self assert: pendingValue isInstruction.
                processInstruction(pendingValue uncheckedDownCastTo: HIRInstruction)
            }.
        }.
    }.
}.
