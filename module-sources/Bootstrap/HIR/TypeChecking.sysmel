Type definition: {
    public virtual method verifyHIRSendInstruction: (sendInstruction: HIRSendInstruction) ::=> Boolean
        := false.
}.

FunctionType definition: {
    public override method verifyHIRSendInstruction: (sendInstruction: HIRSendInstruction) ::=> Boolean := {
        ## Exact argument count is required here.
        self passingArgumentCount = (1sz + sendInstruction arguments size) ifFalse: {
            return: false
        }.

        let isTypeChecked mutable := true.
        
        let sourceArgumentIndex mutable := 0sz.
        let checkArgumentTypeBlock := {:(Type)type :: Void |
            isTypeChecked := isTypeChecked && (type isDirectlyConversibleTo: (self canonicalTypeForApplicationArgumentWithIndex: sourceArgumentIndex)).
            sourceArgumentIndex := sourceArgumentIndex + 1sz.
        }.

        checkArgumentTypeBlock(sendInstruction receiver type).
        sendInstruction arguments do: {:(HIRValue)each :: Void |
            checkArgumentTypeBlock(each type).
        }.

        let canonicalResultType := self canonicalResultType.
        isTypeChecked && (self verifyHIRInstructionResultType: sendInstruction)
    }.

    public virtual method verifyHIRInstructionResultType: (instruction: HIRInstruction) ::=> Boolean
        := self canonicalResultType isDirectlyConversibleTo: instruction type.
}.

DependentFunctionType definition: {
    public override method verifyHIRInstructionResultType: (instruction: HIRInstruction) ::=> Boolean := {
        resultTypeNode isLiteralNode ifTrue: {
            self canonicalResultType isDirectlyConversibleTo: instruction type
        } ifFalse: {
            instruction type isDirectlyConversibleTo: self canonicalResultType
        }
    }.
}.
