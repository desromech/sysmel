## Destroy HIR pass. This pass destroys the phi nodes by inserting alloca instructions.
public class HIRDestroySSAFunctionPass superclass: HIRFunctionDefinitionPass; definition: {
    public override method runInFunctionDefinition: (function: HIRFunctionDefinition) ::=> Void := {
        function firstBasicBlock ifNil: (return: void).
        function computeControlFlowAndNormalizeBasicBlocks.

        let allocaBuilder := HIRInstructionBuilder new
            beginInsertingInBasicBlock: function firstBasicBlock;
            insertionPoint: function firstBasicBlock findAllocaInsertionPoint;
            yourself.

        let storeBuilder := HIRInstructionBuilder new.
        let loadBuilder := HIRInstructionBuilder new.

        function basicBlocksDo: {:(HIRBasicBlock)basicBlock :: Void |
            loadBuilder 
                beginInsertingInBasicBlock: basicBlock;
                insertionPoint: basicBlock findPhiLoadInsertionPoint;
                yourself.

            basicBlock phiInstructionsDo: {:(HIRPhiInstruction)phi :: Void |
                allocaBuilder useSourceInformationOfValue: phi.

                let valueType := phi type.
                let pointerType := valueType memberPointer.
                
                let temporary := allocaBuilder alloca: valueType type: pointerType.
                phi incomingBlocksAndValuesDo: {:(HIRBasicBlock)incomingBlock :(HIRValue)incomingValue :: Void |
                    storeBuilder
                        beginInsertingInBasicBlock: incomingBlock;
                        insertionPoint: incomingBlock lastInstruction;
                        useSourceInformationOfValue: phi;
                        store: incomingValue in: temporary
                }.

                let load := loadBuilder
                    useSourceInformationOfValue: phi;
                    load: temporary type: valueType.
                phi replaceWith: load.
            }
        }.
    }.
}.
