
public final class HIRFunctionASTCompilationContext superclass: Object.

let primitiveFunctionContentGenerator := #{
    #ObjectModel::isLogical : {:(HIRFunctionASTCompilationContext)context :: HIRValue |
        context builder literal: context compilationTarget hasLogicalObjectModel
    }.
    #ObjectModel::isNative : {:(HIRFunctionASTCompilationContext)context :: HIRValue |
        context builder literal: context compilationTarget hasNativeObjectModel
    }.
}.

HIRFunctionASTCompilationContext definition: {
    public field moduleCompilationContext => HIRModuleCompilationContext.
    public field functionDefinition => FunctionDefinition.
    public field ssaFunction => HIRFunctionDefinition.
    public field builder => HIRInstructionBuilder.
    protected field bindingDictionary => ObjectPointerDictionary.

    public field breakDestination => HIRBasicBlock.
    public field continueDestination => HIRBasicBlock.

    public method compilationTarget => HIRCompilationTarget
        := moduleCompilationContext compilationTarget.

    public override method initialize => Void := {
        super initialize.
        bindingDictionary := ObjectPointerDictionary new.
    }.

    public method setValue: (value: HIRValue) forBinding: (binding: SymbolBinding) ::=> Void := {
        self assert: binding isNotNil.
        bindingDictionary at: binding put: value.
    }.

    public method compileFunctionDefinition: (functionDefinition: FunctionDefinition) into: (ssaFunction: HIRFunctionDefinition) ::=> Void := {
        functionDefinition ensureAnalysis.
        self functionDefinition: functionDefinition.
        self ssaFunction: ssaFunction.

        ssaFunction arguments do: {:(HIRFunctionArgument)eachArgument :: Void |
            eachArgument sourceBinding ifNotNil: {
                self setValue: eachArgument forBinding: eachArgument sourceBinding
            }
        }.
        ssaFunction captures do: {:(HIRFunctionCapture)eachCapture :: Void |
            eachCapture sourceBinding ifNotNil: {
                self setValue: eachCapture forBinding: eachCapture sourceBinding
            }
        }.

        functionDefinition importedSymbols size = 0sz ifTrue: {
            functionDefinition sourceAnalyzedDefinition bodyNode ifNotNil: {:bodyNode |
                self builder: ((HIRInstructionBuilder forContext: ssaFunction context)
                    sourcePosition: bodyNode sourcePosition;
                    function: ssaFunction;
                    beginBasicBlockNamed: #entry;
                    yourself).

                let primitiveGenerator := primitiveFunctionContentGenerator atOrNil: functionDefinition primitiveName.
                let resultValue := primitiveGenerator ifNotNil: {
                    primitiveGenerator(self)
                } ifNil: {
                    bodyNode generateHIRValueWith: self.
                }.
                self builder isLastTerminator ifFalse: (self builder return: resultValue).
            }.

            ssaFunction validate
        }.
    }.

    public method getValueForLocalBinding: (localBinding: SymbolAnalysisBinding) ::=> HIRValue
        := bindingDictionary at: localBinding.

    public method functionDefinitionValueFor: (functionDefinition: FunctionDefinition) ::=> HIRValue
        := (moduleCompilationContext translateFunctionDefinition: functionDefinition) ifNil: (self builder literal: functionDefinition).

    public method withBreakDestination: (breakDestination: HIRBasicBlock) continueDestination: (continueDestination: HIRBasicBlock) do: aBlock := {
        let oldBreakDestination := self breakDestination.
        let oldContinueDestination := self continueDestination.

        self
            breakDestination: breakDestination;
            continueDestination: continueDestination.
        
        let result := aBlock().

        self
            breakDestination: oldBreakDestination;
            continueDestination: oldContinueDestination.

        result
    }.
}.

ASTNode extend: {
    public method generateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := context builder withSourceASTNode: self do: {:: HIRValue |
            self doGenerateHIRValueWith: context
    }.

    public abstract method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := self subclassResponsibility.
}.

ASTBreakNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        context breakDestination ifNil: (self error: "Invalid break at this location.").
        context builder branch: context breakDestination.
        context builder literal: void
    }.
}.

ASTCoerceValueNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        let type := self typeExpression generateHIRValueWith: context.
        let value := self valueExpression generateHIRValueWith: context.
        context builder coerceValue: value into: type type: self analyzedType
    }.        
}.

ASTContinueNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        context continueDestination ifNil: (self error: "Invalid continue at this location.").
        context builder branch: context continueDestination.
        context builder literal: void
    }.
}.

ASTDownCastNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        let type := self typeExpression generateHIRValueWith: context.
        let value := self valueExpression generateHIRValueWith: context.
        context builder unchecked: self isUnchecked downCast: value into: type type: self analyzedType
    }.        
}.

let PrimitiveFunctionGenerator := (ASTFunctionApplicationNode, HIRFunctionASTCompilationContext) => HIRValue.

let primitiveFunctionGenerators := #{
    #basicAllocate : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let typeNode => ASTNode := self arguments first.
        typeNode isLiteralNode && (typeNode analyzedType isSubtypeOf: Type) ifFalse: {return: nil}.

        let type => Type := (typeNode downCastTo: ASTLiteralNode) value.
        type isValueType ifFalse: {return: nil}.
        
        self analyzedType == type ifTrue: {
            context builder literal: type defaultValue type: self analyzedType
        } ifFalse: {
            context builder alloca: type type: self analyzedType
        }
    }.

    #basicNew : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let typeNode => ASTNode := self arguments first.
        typeNode isLiteralNode && (typeNode analyzedType isSubtypeOf: Type) ifFalse: {return: nil}.

        let type => Type := (typeNode downCastTo: ASTLiteralNode) value.
        type isValueType ifFalse: {return: nil}.
        
        self analyzedType == type ifTrue: {
            context builder literal: type defaultValue type: self analyzedType
        } ifFalse: {
            let result := context builder alloca: type type: self analyzedType.

            ## Basic initialize.
            type needsNonDefaultBasicInitialization ifTrue: {
                let basicInitializeMethod := type validBasicInitializeMethod.
                basicInitializeMethod ifNotNil: {
                    context builder call: (context moduleCompilationContext translateFunction: basicInitializeMethod withBuilder: context builder)
                        arguments: (Array with: result)
                        resultType: Void.
                }
            }.

            result.
        }
    }.

    #new : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let typeNode => ASTNode := self arguments first.
        typeNode isLiteralNode && (typeNode analyzedType isSubtypeOf: Type) ifFalse: {return: nil}.

        let type => Type := (typeNode downCastTo: ASTLiteralNode) value.
        type isValueType ifFalse: {return: nil}.
        
        self analyzedType == type ifTrue: {
            context builder literal: type defaultValue type: self analyzedType
        } ifFalse: {
            let result := context builder alloca: type type: self analyzedType.

            ## Basic initialize.
            type needsNonDefaultBasicInitialization ifTrue: {
                let basicInitializeMethod := type validBasicInitializeMethod.
                basicInitializeMethod ifNotNil: {
                    context builder call: (context moduleCompilationContext translateFunction: basicInitializeMethod withBuilder: context builder)
                        arguments: (Array with: result)
                        resultType: Void.
                }
            }.

            ## Initialize.
            let initializeMethod := type lookupSelector: #initialize.
            initializeMethod isNotNil && (initializeMethod ~~ (AnyValue >> #initialize)) ifTrue: {
                context builder call: (context moduleCompilationContext translateFunction: initializeMethod withBuilder: context builder)
                    arguments: (Array with: result)
                    resultType: Void.
            }.

            result.
        }
    }.

    #PointerType::reinterpretCastTo: : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let pointer := self arguments first generateHIRValueWith: context.
        let targetType := self arguments second generateHIRValueWith: context.
        context builder pointerOrIntegerReinterpretCast: pointer into: targetType type: self analyzedType
    }.
    #UIntPointer::reinterpretCastTo: : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let pointer := self arguments first generateHIRValueWith: context.
        let targetType := self arguments second generateHIRValueWith: context.
        context builder pointerOrIntegerReinterpretCast: pointer into: targetType type: self analyzedType
    }.
    #IntPointer::reinterpretCastTo: : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let pointer := self arguments first generateHIRValueWith: context.
        let targetType := self arguments second generateHIRValueWith: context.
        context builder pointerOrIntegerReinterpretCast: pointer into: targetType type: self analyzedType
    }.

    #PointerLikeType::reinterpretCast : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let pointer := self arguments first generateHIRValueWith: context.
        let targetType := self analyzedType.
        context builder pointerOrIntegerReinterpretCast: pointer into: (context builder literal: targetType) type: targetType
    }.

    #PointerLikeType::at: : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let pointer := self arguments first generateHIRValueWith: context.
        let index := self arguments second generateHIRValueWith: context.
        context builder pointer: pointer elementAt: index type: self analyzedType
    }.

    #PointerLikeType::load : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let reference := self arguments first generateHIRValueWith: context.
        self analyzedType isTemporaryReferenceType ifTrue: {
            let valueType := (self analyzedType downCastTo: ReferenceLikeType) baseType.
            self assert: valueType isNotNil.
            let temporary := context builder alloca: valueType type: self analyzedType.
            context builder store: (context builder load: reference type: valueType) in: temporary.
            temporary
        } ifFalse: {
            context builder load: reference type: self analyzedType
        }.
    }.
    #PointerLikeType::store: : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let reference := self arguments first generateHIRValueWith: context.
        let value := self arguments second generateHIRValueWith: context.
        context builder store: value in: reference.
        reference
    }.

    #FixedArray::at: : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let reference := self arguments first generateHIRValueWith: context.
        let index := self arguments second generateHIRValueWith: context.
        let referenceType => PointerLikeType := self arguments first analyzedType.
        let fixedArrayType := referenceType baseType downCastTo: FixedArrayType.
        let elementReferenceType := fixedArrayType elementType refFor: referenceType addressSpace.
        let elementReference := context builder reference: reference elementAt: index type: elementReferenceType.
        context builder load: elementReference type: self analyzedType
    }.
    #FixedArray::at:put: : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let reference := self arguments first generateHIRValueWith: context.
        let index := self arguments second generateHIRValueWith: context.
        let value := self arguments third generateHIRValueWith: context.
        let referenceType => PointerLikeType := self arguments first analyzedType.
        let fixedArrayType := referenceType baseType downCastTo: FixedArrayType.
        let elementReferenceType := fixedArrayType elementType refFor: referenceType addressSpace.
        let elementReference := context builder reference: reference elementAt: index type: elementReferenceType.
        context builder
            store: value in: elementReference;
            literal: void
    }.
    #FixedArray::refAt: : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        let reference := self arguments first generateHIRValueWith: context.
        let index := self arguments second generateHIRValueWith: context.
        context builder reference: reference elementAt: index type: self analyzedType
    }.

    #Void::fromAnyValue : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        self arguments do: {:(ASTNode)each :: Void | each generateHIRValueWith: context }.
        context builder literal: void
    }.
    #yourself : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        self arguments first generateHIRValueWith: context
    }.
    #RawTuple::typeSlotAt: : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        self arguments second isLiteralNode ifTrue: {
            let tuple := self arguments first generateHIRValueWith: context.
            let typeSlot => TypeSlot := self arguments second value.
            
            context builder tuple: tuple typedSlotAt: typeSlot.
        } ifFalse: {
            nil
        }.
    }.
    #RawTuple::typeSlotAt:put: : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        self arguments second isLiteralNode ifTrue: {
            let tuple := self arguments first generateHIRValueWith: context.
            let typeSlot => TypeSlot := self arguments second value.
            let value := self arguments third generateHIRValueWith: context.
            
            context builder tuple: tuple typedSlotAt: typeSlot put: value.
        } ifFalse: {
            nil
        }.
    }.
    #RawTuple::refTypeSlotAt: : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        self arguments second isLiteralNode ifTrue: {
            let tuple := self arguments first generateHIRValueWith: context.
            let typeSlot => TypeSlot := self arguments second value.
            
            context builder tuple: tuple typedSlotAt: typeSlot.
        } ifFalse: {
            nil
        }.
    }.
    #RawTuple::refTypeSlotAt:put: : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        self arguments second isLiteralNode ifTrue: {
            let tuple := self arguments first generateHIRValueWith: context.
            let typeSlot => TypeSlot := self arguments second value.
            let value := self arguments third generateHIRValueWith: context.
            
            context builder tuple: tuple typedSlotAt: typeSlot put: value.
        } ifFalse: {
            nil
        }.
    }.

    #ObjectModel::isLogical : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        context builder literal: context compilationTarget hasLogicalObjectModel
    }.
    #ObjectModel::isNative : {:(ASTFunctionApplicationNode)self :(HIRFunctionASTCompilationContext)context :: HIRValue |
        context builder literal: context compilationTarget hasNativeObjectModel
    }.
}.

ASTFunctionApplicationNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        let primitiveGenerator => PrimitiveFunctionGenerator := primitiveFunctionGenerators atOrNil: self functionExpression literalFunctionPrimitiveName.
        (primitiveGenerator ifNotNil: {
            primitiveGenerator(self, context)
        }) ifNil: {
            let functionExpression := self functionExpression generateHIRValueWith: context.
            let callInstruction := context builder call: functionExpression
                arguments: (self arguments collect: {:(ASTNode)each :: HIRValue | each generateHIRValueWith: context } as: Array)
                resultType: self analyzedType.
            
            callInstruction isUnchecked: self isNoTypechecked.

            (callInstruction type isSubtypeOf: ControlFlowEscapeType) ifTrue: {
                context builder
                    unreachable;
                    beginBasicBlockNamed: #deadCode;
                    literal: void
            } ifFalse: {
                callInstruction type isVoidType
                    ifTrue: (context builder literal: void)
                    ifFalse: callInstruction
            }
        }.
    }.
}.

ASTLexicalBlockNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := context builder withSourceEnvironment: self bodyEnvironment do: {:: HIRValue | self body generateHIRValueWith: context }.
}.

Type extend: {
    public virtual method translateASTLiteralNode: (literalNode: ASTLiteralNode) intoHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := context builder literal: literalNode value type: literalNode analyzedType.
}.

FunctionType extend: {
    public override method translateASTLiteralNode: (literalNode: ASTLiteralNode) intoHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := context moduleCompilationContext translateFunction: literalNode value withBuilder: context builder.
}.

FunctionDefinition class extend: {
    public override method translateASTLiteralNode: (literalNode: ASTLiteralNode) intoHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := context moduleCompilationContext translateFunctionDefinition: literalNode value withBuilder: context builder.
}.

ASTLiteralNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := self analyzedType translateASTLiteralNode: self intoHIRValueWith: context.
}.

ASTLambdaNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        let functionDefinition := self functionDefinition.
        functionDefinition ensureAnalysis.

        let functionDefinitionValue := context functionDefinitionValueFor: functionDefinition.

        let captures := functionDefinition sourceAnalyzedDefinition captures collect: {:(SymbolCaptureBinding)capture :: HIRValue |
            context getValueForLocalBinding: capture sourceBinding
        }.

        context builder makeClosure: functionDefinitionValue captures: captures type: self analyzedType
    }.
}.

ASTVariableDefinitionNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        let builder := context builder.

        let value := self valueExpression generateHIRValueWith: context.

        self isMutable ifTrue: {
            self assert: self analyzedValueType isNotNil.
            let localVariable := value type isReferenceLikeType ifTrue: {
                builder pointerOrIntegerReinterpretCast: value into: (builder literal: self analyzedValueType) type: self analyzedType
            } ifFalse: {
                let allocatedStorage := builder alloca: self analyzedValueType type: self analyzedType.
                builder store: value in: allocatedStorage.
                allocatedStorage
            }.
            
            context setValue: localVariable forBinding: self binding.
            self binding hasValidNameForDebugging ifTrue: {
                context builder setDebugValue: localVariable forBinding: self binding.
            }.
            localVariable
        } ifFalse: {
            context setValue: value forBinding: self binding.
            self binding hasValidNameForDebugging ifTrue: {
                context builder setDebugValue: value forBinding: self binding.
            }.
            value
        }
    }.
}.

SymbolBinding extend: {
    public abstract method generateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := self subclassResponsibility.
}.

SymbolAnalysisBinding extend: {
    public override method generateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := context getValueForLocalBinding: self.
}.

SymbolValueBinding extend: {
    public override method generateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        isMutable ifTrue: {
            context moduleCompilationContext getOrCreateGlobalVariableForSymbolValueBinding: self
        } ifFalse: {
            context builder literal: (self __slotNamedAt__: #value)
        }
    }.
}.

SymbolTupleSlotBinding extend: {
    public override method generateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        let tupleValue := tupleBinding generateHIRValueWith: context.
        context builder tuple: tupleValue typedSlotReferenceAt: typeSlot.
    }
}.

ASTIdentifierReferenceNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := self binding generateHIRValueWith: context.
}.

ASTIfNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        let builder := context builder.

        ## Condition
        let condition := conditionExpression
            ifNotNil: (conditionExpression generateHIRValueWith: context)
            ifNil: (builder literal: false).

        ## Optimize out true constant literal.
        condition isLiteralConstantTrue ifTrue: {
            return: (trueExpression ifNotNil: {
                trueExpression generateHIRValueWith: context
            } ifNil: {
                builder literal: void
            })
        }.

        ## Optimize out false constant literal.
        condition isLiteralConstantFalse ifTrue: {
            return: (falseExpression ifNotNil: {
                falseExpression generateHIRValueWith: context
            } ifNil: {
                builder literal: void
            })
        }.
        
        let conditionBlock := builder basicBlock.
        let mergeBlock := builder newBasicBlockNamed: #ifMerge.

        let trueExpression := self trueExpression.
        let trueDestination := trueExpression
            ifNotNil: (builder newBasicBlockNamed: #ifTrue)
            ifNil: mergeBlock.

        let falseExpression := self falseExpression.
        let falseDestination := falseExpression
            ifNotNil: (builder newBasicBlockNamed: #ifFalse)
            ifNil: mergeBlock.

        builder conditionalBranch: condition trueDestination: trueDestination falseDestination: falseDestination.

        ## True branch
        let trueResult mutable => HIRValue := nil.
        let trueResultBlock mutable := conditionBlock.
        let trueResultIsTerminator mutable := false.

        trueExpression ifNotNil: {
            builder beginBasicBlock: trueDestination.
            trueResult := trueExpression generateHIRValueWith: context.
            trueResultBlock := builder basicBlock.

            let isTerminator := builder isLastTerminator.
            trueResultIsTerminator := isTerminator.
            isTerminator
                ifTrue: (trueResult := builder literal: void)
                ifFalse: (builder branch: mergeBlock)
        } ifNil: {
            trueResult := builder literal: void
        }.

        ## False branch
        let falseResult mutable => HIRValue := nil.
        let falseResultBlock mutable := conditionBlock.
        let falseResultIsTerminator mutable := false.
        falseExpression ifNotNil: {
            builder beginBasicBlock: falseDestination.
            falseResult := falseExpression generateHIRValueWith: context.
            falseResultBlock := builder basicBlock.

            let isTerminator := builder isLastTerminator.
            falseResultIsTerminator := isTerminator.
            isTerminator
                ifTrue: (falseResult := builder literal: void)
                ifFalse: (builder branch: mergeBlock)
        } ifNil: {
            falseResult := builder literal: void
        }.

        ## Merge
        builder beginBasicBlock: mergeBlock.
        if: self analyzedType isVoidType || (trueResultIsTerminator && falseResultIsTerminator) then: {
            builder literal: void
        } else: {
            trueResultIsTerminator ifTrue: (
                falseResult
            ) ifFalse: (
                falseResultIsTerminator ifTrue: (
                    trueResult
                ) ifFalse: (
                    (builder phi: self analyzedType)
                        addValue: trueResult incomingFrom: trueResultBlock;
                        addValue: falseResult incomingFrom: falseResultBlock;
                        yourself
                )
            ).
        }
    }
}.

ASTDoWhileContinueWithNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        let builder := context builder.

        let conditionExpression := self conditionExpression.
        let bodyExpression := self bodyExpression.
        let continueExpression := self continueExpression.

        let entryBlock := builder newBasicBlockNamed: #doWhileBody.
        let conditionBlock := builder newBasicBlockNamed: #doWhileCondition.
        let continueBlock := continueExpression
            ifNil: (entryBlock)
            ifNotNil: (builder newBasicBlockNamed: #doWhileContinue).
        let mergeBlock := builder newBasicBlockNamed: #doWhileMerge.

        builder
            branch: entryBlock;
            beginBasicBlock: entryBlock.

        ## Emit the body.
        bodyExpression ifNotNil: {
            context withBreakDestination: mergeBlock continueDestination: continueBlock do: {:: Void |
                bodyExpression generateHIRValueWith: context.
                builder isLastTerminator ifFalse: {
                    builder branch: conditionBlock
                }.
            }
        }.

        ## Emit the condition.
        builder beginBasicBlock: conditionBlock.
        conditionExpression ifNil: {
            builder branch: continueBlock
        } ifNotNil: {
            let condition := conditionExpression generateHIRValueWith: context.
            builder isLastTerminator ifFalse: {
                builder conditionalBranch: condition trueDestination: continueBlock falseDestination: mergeBlock
            }
        }.

        ## Emit the optional continue expression.
        continueExpression ifNotNil: {
            builder beginBasicBlock: continueBlock.
            continueExpression generateHIRValueWith: context.
            builder isLastTerminator ifFalse: {
                builder branch: entryBlock
            }.
        }.

        builder beginBasicBlock: mergeBlock.
        builder literal: void
    }
}.

ASTWhileContinueWithNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        let builder := context builder.

        let conditionExpression := self conditionExpression.
        let bodyExpression := self bodyExpression.
        let continueExpression := self continueExpression.

        let entryBlock := builder newBasicBlockNamed: #whileEntry.
        let bodyBlock := builder newBasicBlockNamed: #whileBody.
        let continueBlock := continueExpression
            ifNil: (entryBlock)
            ifNotNil: (builder newBasicBlockNamed: #whileContinue).
        let mergeBlock := builder newBasicBlockNamed: #whileMerge.

        builder
            branch: entryBlock;
            beginBasicBlock: entryBlock.

        ## Emit the condition.
        conditionExpression ifNil: {
            builder branch: bodyBlock
        } ifNotNil: {
            let condition := conditionExpression generateHIRValueWith: context.
            builder isLastTerminator ifFalse: {
                builder conditionalBranch: condition trueDestination: bodyBlock falseDestination: mergeBlock
            }
        }.

        ## Emit the body.
        builder beginBasicBlock: bodyBlock.
        bodyExpression ifNotNil: {
            context withBreakDestination: mergeBlock continueDestination: continueBlock do: {:: Void |
                bodyExpression generateHIRValueWith: context.
                builder isLastTerminator ifFalse: {
                    builder branch: continueBlock
                }.
            }
        }.

        ## Emit the optional continue expression.
        continueExpression ifNotNil: {
            builder beginBasicBlock: continueBlock.
            continueExpression generateHIRValueWith: context.
            builder isLastTerminator ifFalse: {
                builder branch: entryBlock
            }.
        }.

        builder beginBasicBlock: mergeBlock.
        builder literal: void
    }
}.

ASTMakeArrayNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := context builder makeArray: (self elements collect: {:(ASTNode)each :: HIRValue | each generateHIRValueWith: context }).
}.

ASTMakeAssociationNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := context builder makeAssociationWithKey: (self key generateHIRValueWith: context)
            value: (self value
                ifNotNil: (self value generateHIRValueWith: context)
                ifNil: (context builder literal: nil)).
}.

ASTMakeByteArrayNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := context builder makeByteArray: (self elements collect: {:(ASTNode)each :: HIRValue | each generateHIRValueWith: context }).
}.

ASTMakeDictionaryNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := context builder makeDictionary: (self elements collect: {:(ASTNode)each :: HIRValue | each generateHIRValueWith: context })
}.

ASTMessageSendNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        let sendInstruction := context builder send: (self receiver generateHIRValueWith: context)
            receiverLookupType: (self receiverLookupType ifNotNil: {:(ASTNode)lookupTypeExpression :: HIRValue | lookupTypeExpression generateHIRValueWith: context })
            selector: (self selector generateHIRValueWith: context)
            arguments: (self arguments collect: {:(ASTNode)each :: HIRValue | each generateHIRValueWith: context } as: Array)
            resultType: self analyzedType.

        self boundMethodOwner isNotNil && self selector isLiteralNode ifTrue: {
            sendInstruction
                boundSelector: (self selector downCastTo: ASTLiteralNode) value;
                boundMethodOwner: self boundMethodOwner
        }.

        self boundMethod ifNotNil: {
            sendInstruction boundMethodType: (self boundMethod __type__)
        }.

        sendInstruction isUnchecked: self isNoTypechecked.
        sendInstruction optimizeLookup.

        (sendInstruction type isSubtypeOf: ControlFlowEscapeType) ifTrue: {
            context builder
                unreachable;
                beginBasicBlockNamed: #deadCode;
                literal: void
        } ifFalse: {
            sendInstruction type isVoidType
                ifTrue: (context builder literal: void)
                ifFalse: sendInstruction
        }
    }
}.

ASTReturnNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue
        := context builder return: (self expression generateHIRValueWith: context)
}.

ASTSequenceNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        let voidLiteral :=  context builder literal: void.
        let result mutable => HIRValue := voidLiteral.
        self expressions do: {:(ASTNode)expression :: Void |
            context builder isLastTerminator ifTrue: {
                result := voidLiteral
            } ifFalse: {
                result := expression generateHIRValueWith: context
            }
        }.

        result
    }
}.

ASTTupleSlotNamedAtNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        context builder tuple: (self tupleExpression generateHIRValueWith: context) typedSlotAt: self boundSlot.
    }.
}.

ASTTupleSlotNamedReferenceAtNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        context builder tuple: (self tupleExpression generateHIRValueWith: context) typedSlotReferenceAt: self boundSlot.
    }.
}.

ASTTupleSlotNamedAtPutNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        context builder tuple: (self tupleExpression generateHIRValueWith: context) typedSlotAt: self boundSlot put: (self valueExpression generateHIRValueWith: context).
    }.
}.

ASTUseNamedSlotsOfNode extend: {
    public override method doGenerateHIRValueWith: (context: HIRFunctionASTCompilationContext) ::=> HIRValue := {
        context setValue: (self tupleExpression generateHIRValueWith: context) forBinding: self binding.
        context builder literal: void.
    }.
}.

FunctionDefinition extend: {
    public method asHIRModuleForTarget: (compilationTarget: HIRCompilationTarget) ::=> HIRModule
        := (HIRModuleCompilationContext forTarget: compilationTarget)
            exclusiveCompilationMode: true;
            compileFunctionDefinition: self;
            finish.

    public method asHIRModule => HIRModule
        := HIRModuleCompilationContext forDefaultTarget
            exclusiveCompilationMode: true;
            compileFunctionDefinition: self;
            finish.
}.

Function extend: {
    public method asHIRModuleForTarget: (compilationTarget: HIRCompilationTarget) ::=> HIRModule
        := (HIRModuleCompilationContext forTarget: compilationTarget)
            exclusiveCompilationMode: true;
            declareFunctionDefinition: self definition;
            declareFunction: self;
            compileFunctionDefinition: self definition;
            finish.

    public method asHIRModule => HIRModule
        := HIRModuleCompilationContext forDefaultTarget
            exclusiveCompilationMode: true;
            declareFunctionDefinition: self definition;
            declareFunction: self;
            compileFunctionDefinition: self definition;
            finish.
}.
