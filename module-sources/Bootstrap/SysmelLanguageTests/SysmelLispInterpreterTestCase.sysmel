public class SysmelLispInterpreterTestCase superclass: TestCase; definition: {
    public method evaluateString: (string: String) ::=> AnyValue
        := SysmelLispLanguage analyzeAndEvaluateSourceCode: (SourceCode text: string directory: "" name: "test" language: #tlisp).

    public method testEmptyString => Void := {
        self assert: (self evaluateString: "") equals: void
    }.

    public method testStringSymbol => Void := {
        self assert: (self evaluateString: "#first") equals: #first.
        self assert: (self evaluateString: "#first #second") equals: #second.
    }.

    public method testIdentifier => Void := {
        self assert: (self evaluateString: "nil") equals: nil.
        self assert: (self evaluateString: "false") equals: false.
        self assert: (self evaluateString: "true") equals: true.
        self assert: (self evaluateString: "void") equals: void.
    }.

    public method testFunctionApplication => Void := {
        self assert: (self evaluateString: "(identityHash nil)") equals: nil identityHash.
        self assert: (self evaluateString: "(identityHash false)") equals: false identityHash.
        self assert: (self evaluateString: "(identityHash true)") equals: true identityHash.
        self assert: (self evaluateString: "(identityHash void)") equals: void identityHash.
    }.

    public method testNullaryLambdaApplication => Void := {
        self assert: (self evaluateString: "((lambda () nil))") equals: nil.
        self assert: (self evaluateString: "((lambda () false))") equals: false.
        self assert: (self evaluateString: "((lambda () true))") equals: true.
        self assert: (self evaluateString: "((lambda () void))") equals: void.
    }.

    public method testIdentityLambdaApplication => Void := {
        self assert: (self evaluateString: "((lambda (x) x) nil)") equals: nil.
        self assert: (self evaluateString: "((lambda (x) x) false)") equals: false.
        self assert: (self evaluateString: "((lambda (x) x) true)") equals: true.
        self assert: (self evaluateString: "((lambda (x) x) void)") equals: void.
    }.

    public method testIfExpression => Void := {
        self assert: (self evaluateString: "(if:then:else: true 1 2)") equals: 1.
        self assert: (self evaluateString: "(if:then:else: false 1 2)") equals: 2.
    }.

    public method testDefine => Void := {
        self assert: (self evaluateString: "(define myvar false) myvar") equals: false.
        self assert: (self evaluateString: "(define (myfunction) false) (myfunction)") equals: false.
    }.
}.
