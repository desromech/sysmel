public class SysmelParserTestCase superclass: TestCase; definition: {
    public method parseString: (string: String) ::=> ASTNode
        := SysmelLanguage parseSourceCode: (SourceCode text: string directory: nil name: "test" language: #sysmel).

    public method testEmptyString => Void := {
        let ast := self parseString: "".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 0sz.
    }.

    public method testSingleLineComment => Void := {
        let ast := self parseString: "## Single line comment".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 0sz.
    }.

    public method testMultiLineComment => Void := {
        let ast := self parseString: "
        #**
         * Multi line comment
         *#
        ".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 0sz.
    }.

    public method testIdentifierReference => Void := {
        let ast := self parseString: "identifier".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isIdentifierReferenceNode.
        let identifierNode := sequenceNode expressions first downCastTo: ASTIdentifierReferenceNode.
        self assert: identifierNode value equals: #identifier.
    }.

    public method testLiteralInteger => Void := {
        let ast := self parseString: "1234".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isLiteralNode.
        let literalNode := sequenceNode expressions first downCastTo: ASTLiteralNode.
        self assert: literalNode value equals: 1234.
    }.

    public method testLiteralSymbol => Void := {
        let ast := self parseString: "#test".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isLiteralNode.
        let literalNode := sequenceNode expressions first downCastTo: ASTLiteralNode.
        self assert: literalNode value equals: #test.
    }.
}.
