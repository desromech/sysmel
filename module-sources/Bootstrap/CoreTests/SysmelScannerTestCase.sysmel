public class SysmelScannerTestCase superclass: TestCase; definition: {
    public method scanString: (string: String) ::=> Array
        := SysmelLanguage scanSourceCode: (SourceCode text: string directory: nil name: "test" language: #tlisp).

    public method testEmptyString => Void := {
        self assert: (self scanString: "") isEmpty.
    }.

    public method testSingleLineComment => Void := {
        self assert: (self scanString: "## Single line comment") isEmpty.
    }.

    public method testMultiLineComment => Void := {
        self assert: (self scanString:"
        #**
         * Multi line comment
         *#
        ") isEmpty.
    }.

    public method testIdentifier => Void := {
        let tokenList := self scanString: "helloWorld1234".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Identifier.
        self assert: tokenList first value equals: #helloWorld1234.
    }.

    public method testScopedIdentifier => Void := {
        let tokenList := self scanString: "Scope::helloWorld1234".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Identifier.
        self assert: tokenList first value equals: #Scope::helloWorld1234.
    }.

    public method testScopedIdentifier2 => Void := {
        let tokenList := self scanString: "Scope::SubScope::helloWorld1234".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Identifier.
        self assert: tokenList first value equals: #Scope::SubScope::helloWorld1234.
    }.

    public method testOperator => Void := {
        let tokenList := self scanString: "+".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Operator.
        self assert: tokenList first value equals: #+.
    }.

    public method testOperator2 => Void := {
        let tokenList := self scanString: "||".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Operator.
        self assert: tokenList first value equals: #||.
    }.

    public method testScopedOperator => Void := {
        let tokenList := self scanString: "Scope::+".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Operator.
        self assert: tokenList first value equals: #Scope::+.
    }.

    public method testScopedOperator2 => Void := {
        let tokenList := self scanString: "Scope::SubScope::+".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Operator.
        self assert: tokenList first value equals: #Scope::SubScope::+.
    }.

    public method testKeyword => Void := {
        let tokenList := self scanString: "test:".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Keyword.
        self assert: tokenList first value equals: #test:.
    }.

    public method testScopedKeyword => Void := {
        let tokenList := self scanString: "Scope::test:".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Keyword.
        self assert: tokenList first value equals: #Scope::test:.
    }.

    public method testMultiKeyword => Void := {
        let tokenList := self scanString: "test:second:".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::MultiKeyword.
        self assert: tokenList first value equals: #test:second:.
    }.

    public method testScopedMultiKeyword => Void := {
        let tokenList := self scanString: "Scope::test:second:".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::MultiKeyword.
        self assert: tokenList first value equals: #Scope::test:second:.
    }.

    public method testIdentifierSymbol => Void := {
        let tokenList := self scanString: "#helloWorld1234".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Symbol.
        self assert: tokenList first value equals: #helloWorld1234.
    }.

    public method testIdentifierSymbol2 => Void := {
        let tokenList := self scanString: "#Scope::helloWorld1234".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Symbol.
        self assert: tokenList first value equals: #Scope::helloWorld1234.
    }.

    public method testOperatorSymbol => Void := {
        let tokenList := self scanString: "#+".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Symbol.
        self assert: tokenList first value equals: #+.
    }.

    public method testOperatorSymbol2 => Void := {
        let tokenList := self scanString: "#Scope::+".
        self assert: tokenList size equals: 1sz.
        self assert: tokenList first kind equals: SysmelTokenKind::Symbol.
        self assert: tokenList first value equals: #Scope::+.
    }.

}.
