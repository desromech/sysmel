public abstract class AsmRiscVInstruction superclass: AsmStreamElement.
public abstract class AsmRiscVInstructionDefinition superclass: Object.

public final class AsmRiscVRInstruction superclass: AsmRiscVInstruction.
public final class AsmRiscVRInstructionDefinition superclass: AsmRiscVInstructionDefinition.

public final class AsmRiscVRiInstruction superclass: AsmRiscVInstruction.
public final class AsmRiscVRiInstructionDefinition superclass: AsmRiscVInstructionDefinition.

public final class AsmRiscVIInstruction superclass: AsmRiscVInstruction.
public final class AsmRiscVIInstructionDefinition superclass: AsmRiscVInstructionDefinition.

public final class AsmRiscVSInstruction superclass: AsmRiscVInstruction.
public final class AsmRiscVSInstructionDefinition superclass: AsmRiscVInstructionDefinition.

public final class AsmRiscVBInstruction superclass: AsmRiscVInstruction.
public final class AsmRiscVBInstructionDefinition superclass: AsmRiscVInstructionDefinition.

public final class AsmRiscVUInstruction superclass: AsmRiscVInstruction.
public final class AsmRiscVUInstructionDefinition superclass: AsmRiscVInstructionDefinition.

public final class AsmRiscVJInstruction superclass: AsmRiscVInstruction.
public final class AsmRiscVJInstructionDefinition superclass: AsmRiscVInstructionDefinition.

public final class AsmRiscVOp32Instruction superclass: AsmRiscVInstruction.
public final class AsmRiscVOp32InstructionDefinition superclass: AsmRiscVInstructionDefinition.

public final class AsmRiscV64CompilationTarget superclass: AsmCompilationTarget; definition: {
    public override method elfMachine => UInt16
        := Elf::Machine::RISCV.

    public override method elfFlags => UInt32
        := Elf::Flags::RISCV::FloatAbiDouble.

    public override method coffMachine => UInt16
        := Coff::ImageFileMachine::RISCV64.

    public override method pointerSize => Size
        := 8sz.

    public override method uintPointerType => Type
        := UInt64.

    public override method padCodeSectionData: (data: ByteArray) at: (offset: Size) size: (size: Size) unreachable: (unreachable: Boolean) ::=> Void := {
        self assert: (offset % 4sz) == 0sz.
        self assert: (size % 4sz) == 0sz.

        let writeOffset mutable := offset.
        let endWriteOffset := offset + size.
        while: (writeOffset < endWriteOffset) do: (
            data uint32At: writeOffset put: (unreachable
                ifTrue: 2r000000000001_00000_000_00000_1110011 u32 #* ebreak *#
                ifFalse: 2r0110011 u32 #* add X0, X0, X0 *#
            )
        ) continueWith: (writeOffset := writeOffset + 4sz)
    }.
}.

AsmCompilationTarget extend: {
    __Meta__ extend: {
        public method riscv64 => AsmRiscV64CompilationTarget
            := AsmRiscV64CompilationTarget new.
    }.
}.

public abstract class AsmRiscVRegister superclass: AsmRegister; definition: {
    public field name => Symbol.
    public field value => UInt8.

    __Meta__ definition: {
        public method name: (name: Symbol) value: (value: UInt8) ::=> self
            := self new name: name; value: value; yourself.
    }.

    public method value32 => UInt32 := value asUInt32.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream string: name
    }.
}.

AsmRiscVInstructionDefinition definition: {
    public field mnemonic => Symbol.
    public field opcode => UInt32.

    public virtual method parseExtraParameters: (extraParameters: Array) ::=> Void := {

    }.

    public inline method opcodeBits ::=> UInt32
        := opcode.

    public inline method encodeRD: (register: AsmRiscVRegister) ::=> UInt32
        := register value asUInt32 << 7u32.

    public inline method encodeRS1: (register: AsmRiscVRegister) ::=> UInt32
        := register value asUInt32 << 15u32.

    public inline method encodeRS2: (register: AsmRiscVRegister) ::=> UInt32
        := register value asUInt32 << 20u32.
}.

AsmRiscVRInstruction definition: {
    public field definition => AsmRiscVRInstructionDefinition.
    public field rd => AsmRiscVRegister.
    public field rs1 => AsmRiscVRegister.
    public field rs2 => AsmRiscVRegister.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        definition writeInstruction: self on: stream
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream string: definition mnemonic;
            space; print: rd;
            nextPutAll: ", "; print: rs1;
            nextPutAll: ", "; print: rs2
    }.
}.

AsmRiscVRInstructionDefinition definition: {
    public field function3 => UInt8.
    public field function7 => UInt8.

    public override method parseExtraParameters: (extraParameters: Array) ::=> Void := {
        function3 := extraParameters first asUInt8.
        function7 := extraParameters second asUInt8.
    }.

    public inline method function3Bits => UInt32
        := function3 asUInt32 << 12u32.

    public inline method function7Bits => UInt32
        := function7 asUInt32 << 25u32.

    public method writeInstruction: (instruction: AsmRiscVRInstruction) on: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt32: self function7Bits | (self encodeRS2: instruction rs2) | (self encodeRS1: instruction rs1) | self function3Bits | (self encodeRD: instruction rd) | self opcodeBits.
    }.

    public method makeBuilderMethod
        := {:(AsmStreamBuilder)builder :(AsmRiscVRegister)rd :(AsmRiscVRegister)rs1 :(AsmRiscVRegister)rs2 :: AsmRiscVRInstruction |
            builder addElement: (AsmRiscVRInstruction new
                definition: self;
                rd: rd;
                rs1: rs1;
                rs2: rs2;
                yourself)
        } recompileAndOptimize
}.

AsmRiscVRiInstruction definition: {
    public field definition => AsmRiscVRiInstructionDefinition.
    public field rd => AsmRiscVRegister.
    public field rs1 => AsmRiscVRegister.
    public field rimmediate => AsmImmediate.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        definition writeInstruction: self on: stream
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream string: definition mnemonic;
            space; print: rd;
            nextPutAll: ", "; print: rs1;
            nextPutAll: ", "; print: rimmediate
    }.
}.

AsmRiscVRiInstructionDefinition definition: {
    public field function3 => UInt8.
    public field function7 => UInt8.

    public override method parseExtraParameters: (extraParameters: Array) ::=> Void := {
        function3 := extraParameters first asUInt8.
        function7 := extraParameters second asUInt8.
    }.

    public inline method function3Bits => UInt32
        := function3 asUInt32 << 12u32.

    public inline method function7Bits => UInt32
        := function7 asUInt32 << 25u32.

    public method writeInstruction: (instruction: AsmRiscVRiInstruction) on: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt32: self function7Bits | (instruction rimmediate evaluateImmediateUInt32 << 20u32) | (self encodeRS1: instruction rs1) | self function3Bits | (self encodeRD: instruction rd) | self opcodeBits.
    }.

    public method makeBuilderMethod
        := {:(AsmStreamBuilder)builder :(AsmRiscVRegister)rd :(AsmRiscVRegister)rs1 :(AsmImmediate)rimmediate :: AsmRiscVRiInstruction |
            builder addElement: (AsmRiscVRiInstruction new
                definition: self;
                rd: rd;
                rs1: rs1;
                rimmediate: rimmediate;
                yourself)
        } recompileAndOptimize
}.

AsmRiscVIInstruction definition: {
    public field definition => AsmRiscVIInstructionDefinition.
    public field rd => AsmRiscVRegister.
    public field rs1 => AsmRiscVRegister.
    public field immediate => AsmImmediate.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        definition writeInstruction: self on: stream
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream string: definition mnemonic;
            space; print: rd;
            nextPutAll: ", "; print: rs1;
            nextPutAll: ", "; print: immediate
    }.
}.

AsmRiscVIInstructionDefinition definition: {
    public field function3 => UInt8.

    public override method parseExtraParameters: (extraParameters: Array) ::=> Void := {
        function3 := extraParameters first asUInt8.
    }.

    public inline method function3Bits => UInt32
        := function3 asUInt32 << 12u32.

    public method encodeImmediate: (immediate: AsmImmediate) on: (stream: AsmObjectCodeStream) ::=> UInt32 := {
        0u32
    }.

    public method writeInstruction: (instruction: AsmRiscVIInstruction) on: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt32: (self encodeImmediate: instruction immediate on: stream) | (self encodeRS1: instruction rs1) | self function3Bits | (self encodeRD: instruction rd) | self opcodeBits.
    }.

    public method makeBuilderMethod
        := {:(AsmStreamBuilder)builder :(AsmRiscVRegister)rd :(AsmRiscVRegister)rs1 :(AsmImmediate)immediate :: AsmRiscVIInstruction |
            builder addElement: (AsmRiscVIInstruction new
                definition: self;
                rd: rd;
                rs1: rs1;
                immediate: immediate;
                yourself)
        } recompileAndOptimize
}.

AsmRiscVSInstruction definition: {
    public field definition => AsmRiscVSInstructionDefinition.
    public field rs1 => AsmRiscVRegister.
    public field rs2 => AsmRiscVRegister.
    public field immediate => AsmImmediate.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        definition writeInstruction: self on: stream
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream string: definition mnemonic;
            space; print: rs1;
            nextPutAll: ", "; print: rs2;
            nextPutAll: ", "; print: immediate
    }.
}.

AsmRiscVSInstructionDefinition definition: {
    public field function3 => UInt8.

    public override method parseExtraParameters: (extraParameters: Array) ::=> Void := {
        function3 := extraParameters first asUInt8.
    }.

    public inline method function3Bits => UInt32
        := function3 asUInt32 << 12u32.

    public method encodeImmediate: (immediate: AsmImmediate) on: (stream: AsmObjectCodeStream) ::=> UInt32 := {
        0u32
    }.

    public method writeInstruction: (instruction: AsmRiscVSInstruction) on: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt32: (self encodeImmediate: instruction immediate on: stream) | (self encodeRS1: instruction rs2) | (self encodeRS1: instruction rs1) | self function3Bits | self opcodeBits.
    }.

    public method makeBuilderMethod
        := {:(AsmStreamBuilder)builder :(AsmRiscVRegister)rs1 :(AsmRiscVRegister)rs2 :(AsmImmediate)immediate :: AsmRiscVSInstruction |
            builder addElement: (AsmRiscVSInstruction new
                definition: self;
                rs1: rs1;
                rs2: rs2;
                immediate: immediate;
                yourself)
        } recompileAndOptimize
}.

AsmRiscVBInstruction definition: {
    public field definition => AsmRiscVBInstructionDefinition.
    public field rs1 => AsmRiscVRegister.
    public field rs2 => AsmRiscVRegister.
    public field immediate => AsmImmediate.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        definition writeInstruction: self on: stream
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream string: definition mnemonic;
            space; print: rs1;
            nextPutAll: ", "; print: rs2;
            nextPutAll: ", "; print: immediate
    }.
}.

AsmRiscVBInstructionDefinition definition: {
    public field function3 => UInt8.

    public override method parseExtraParameters: (extraParameters: Array) ::=> Void := {
        function3 := extraParameters first asUInt8.
    }.

    public inline method function3Bits => UInt32
        := function3 asUInt32 << 12u32.

    public method encodeImmediate: (immediate: AsmImmediate) on: (stream: AsmObjectCodeStream) ::=> UInt32 := {
        0u32
    }.

    public method writeInstruction: (instruction: AsmRiscVBInstruction) on: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt32: (self encodeImmediate: instruction immediate on: stream) | (self encodeRS1: instruction rs2) | (self encodeRS1: instruction rs1) | self function3Bits | self opcodeBits.
    }.

    public method makeBuilderMethod
        := {:(AsmStreamBuilder)builder :(AsmRiscVRegister)rs1 :(AsmRiscVRegister)rs2 :(AsmImmediate)immediate :: AsmRiscVBInstruction |
            builder addElement: (AsmRiscVBInstruction new
                definition: self;
                rs1: rs1;
                rs2: rs2;
                immediate: immediate;
                yourself)
        } recompileAndOptimize
}.

AsmRiscVUInstruction definition: {
    public field definition => AsmRiscVUInstructionDefinition.
    public field rd => AsmRiscVRegister.
    public field immediate => AsmImmediate.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        definition writeInstruction: self on: stream
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream string: definition mnemonic;
            space; print: rd;
            nextPutAll: ", "; print: immediate
    }.
}.

AsmRiscVUInstructionDefinition definition: {
    public method encodeImmediate: (immediate: AsmImmediate) on: (stream: AsmObjectCodeStream) ::=> UInt32 := {
        0u32
    }.

    public method writeInstruction: (instruction: AsmRiscVUInstruction) on: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt32: (self encodeImmediate: instruction immediate on: stream) | (self encodeRD: instruction rd) | self opcodeBits.
    }.

    public method makeBuilderMethod
        := {:(AsmStreamBuilder)builder :(AsmRiscVRegister)rd :(AsmImmediate)immediate :: AsmRiscVUInstruction |
            builder addElement: (AsmRiscVUInstruction new
                definition: self;
                rd: rd;
                immediate: immediate;
                yourself)
        } recompileAndOptimize
}.

AsmRiscVJInstruction definition: {
    public field definition => AsmRiscVJInstructionDefinition.
    public field rd => AsmRiscVRegister.
    public field immediate => AsmImmediate.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        definition writeInstruction: self on: stream
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream string: definition mnemonic;
            space; print: rd;
            nextPutAll: ", "; print: immediate
    }.
}.

AsmRiscVJInstructionDefinition definition: {
    public method encodeImmediate: (immediate: AsmImmediate) on: (stream: AsmObjectCodeStream) ::=> UInt32 := {
        0u32
    }.

    public method writeInstruction: (instruction: AsmRiscVJInstruction) on: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt32: (self encodeImmediate: instruction immediate on: stream) | (self encodeRD: instruction rd) | self opcodeBits.
    }.

    public method makeBuilderMethod
        := {:(AsmStreamBuilder)builder :(AsmRiscVRegister)rd :(AsmImmediate)immediate :: AsmRiscVJInstruction |
            builder addElement: (AsmRiscVJInstruction new
                definition: self;
                rd: rd;
                immediate: immediate;
                yourself)
        } recompileAndOptimize
}.

AsmRiscVOp32Instruction definition: {
    public field definition => AsmRiscVOp32InstructionDefinition.
    public field rd => AsmRiscVRegister.
    public field immediate => AsmImmediate.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt32: definition opcode
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream string: definition mnemonic
    }.
}.

AsmRiscVOp32InstructionDefinition definition: {
    public method makeBuilderMethod
        := {:(AsmStreamBuilder)builder :: AsmRiscVOp32Instruction |
            builder addElement: (AsmRiscVOp32Instruction new
                definition: self;
                yourself)
        } recompileAndOptimize
}.

public final class AsmRiscVIntegerRegister superclass: AsmRiscVRegister; definition: {
}.

public global RISCV::X0  := AsmRiscVIntegerRegister name: #X0  value: 0u8.
public global RISCV::X1  := AsmRiscVIntegerRegister name: #X1  value: 1u8.
public global RISCV::X2  := AsmRiscVIntegerRegister name: #X2  value: 2u8.
public global RISCV::X3  := AsmRiscVIntegerRegister name: #X3  value: 3u8.
public global RISCV::X4  := AsmRiscVIntegerRegister name: #X4  value: 4u8.
public global RISCV::X5  := AsmRiscVIntegerRegister name: #X5  value: 5u8.
public global RISCV::X6  := AsmRiscVIntegerRegister name: #X6  value: 6u8.
public global RISCV::X7  := AsmRiscVIntegerRegister name: #X7  value: 7u8.
public global RISCV::X8  := AsmRiscVIntegerRegister name: #X8  value: 8u8.
public global RISCV::X9  := AsmRiscVIntegerRegister name: #X9  value: 9u8.
public global RISCV::X10 := AsmRiscVIntegerRegister name: #X10 value: 10u8.
public global RISCV::X11 := AsmRiscVIntegerRegister name: #X11 value: 11u8.
public global RISCV::X12 := AsmRiscVIntegerRegister name: #X12 value: 12u8.
public global RISCV::X13 := AsmRiscVIntegerRegister name: #X13 value: 13u8.
public global RISCV::X14 := AsmRiscVIntegerRegister name: #X14 value: 14u8.
public global RISCV::X15 := AsmRiscVIntegerRegister name: #X15 value: 15u8.
public global RISCV::X16 := AsmRiscVIntegerRegister name: #X16 value: 16u8.
public global RISCV::X17 := AsmRiscVIntegerRegister name: #X17 value: 17u8.
public global RISCV::X18 := AsmRiscVIntegerRegister name: #X18 value: 18u8.
public global RISCV::X19 := AsmRiscVIntegerRegister name: #X19 value: 19u8.
public global RISCV::X20 := AsmRiscVIntegerRegister name: #X20 value: 20u8.
public global RISCV::X21 := AsmRiscVIntegerRegister name: #X21 value: 21u8.
public global RISCV::X22 := AsmRiscVIntegerRegister name: #X22 value: 22u8.
public global RISCV::X23 := AsmRiscVIntegerRegister name: #X23 value: 23u8.
public global RISCV::X24 := AsmRiscVIntegerRegister name: #X24 value: 24u8.
public global RISCV::X25 := AsmRiscVIntegerRegister name: #X25 value: 25u8.
public global RISCV::X26 := AsmRiscVIntegerRegister name: #X26 value: 26u8.
public global RISCV::X27 := AsmRiscVIntegerRegister name: #X27 value: 27u8.
public global RISCV::X28 := AsmRiscVIntegerRegister name: #X28 value: 28u8.
public global RISCV::X29 := AsmRiscVIntegerRegister name: #X29 value: 29u8.
public global RISCV::X30 := AsmRiscVIntegerRegister name: #X30 value: 30u8.
public global RISCV::X31 := AsmRiscVIntegerRegister name: #X31 value: 31u8.

public global RISCV::Zero := AsmRiscVIntegerRegister name: #Zero value: 0u8.
public global RISCV::RA   := AsmRiscVIntegerRegister name: #RA   value: 1u8.
public global RISCV::SP   := AsmRiscVIntegerRegister name: #SP   value: 2u8.
public global RISCV::GP   := AsmRiscVIntegerRegister name: #GP   value: 3u8.
public global RISCV::TP   := AsmRiscVIntegerRegister name: #TP   value: 4u8.
public global RISCV::T0   := AsmRiscVIntegerRegister name: #T0   value: 5u8.
public global RISCV::T1   := AsmRiscVIntegerRegister name: #T1   value: 6u8.
public global RISCV::T2   := AsmRiscVIntegerRegister name: #T2   value: 7u8.
public global RISCV::FP   := AsmRiscVIntegerRegister name: #FP   value: 8u8.
public global RISCV::S1   := AsmRiscVIntegerRegister name: #S1   value: 9u8.
public global RISCV::A0   := AsmRiscVIntegerRegister name: #A0   value: 10u8.
public global RISCV::A1   := AsmRiscVIntegerRegister name: #A1   value: 11u8.
public global RISCV::A2   := AsmRiscVIntegerRegister name: #A2   value: 12u8.
public global RISCV::A3   := AsmRiscVIntegerRegister name: #A3   value: 13u8.
public global RISCV::A4   := AsmRiscVIntegerRegister name: #A4   value: 14u8.
public global RISCV::A5   := AsmRiscVIntegerRegister name: #A5   value: 15u8.
public global RISCV::A6   := AsmRiscVIntegerRegister name: #A6   value: 16u8.
public global RISCV::A7   := AsmRiscVIntegerRegister name: #A7   value: 17u8.
public global RISCV::S2   := AsmRiscVIntegerRegister name: #S2   value: 18u8.
public global RISCV::S3   := AsmRiscVIntegerRegister name: #S3   value: 19u8.
public global RISCV::S4   := AsmRiscVIntegerRegister name: #S4   value: 20u8.
public global RISCV::S5   := AsmRiscVIntegerRegister name: #S5   value: 21u8.
public global RISCV::S6   := AsmRiscVIntegerRegister name: #S6   value: 22u8.
public global RISCV::S7   := AsmRiscVIntegerRegister name: #S7   value: 23u8.
public global RISCV::S8   := AsmRiscVIntegerRegister name: #S8   value: 24u8.
public global RISCV::S9   := AsmRiscVIntegerRegister name: #S9   value: 25u8.
public global RISCV::S10  := AsmRiscVIntegerRegister name: #S10  value: 26u8.
public global RISCV::S11  := AsmRiscVIntegerRegister name: #S11  value: 27u8.
public global RISCV::T3   := AsmRiscVIntegerRegister name: #T3   value: 28u8.
public global RISCV::T4   := AsmRiscVIntegerRegister name: #T4   value: 29u8.
public global RISCV::T5   := AsmRiscVIntegerRegister name: #T5   value: 30u8.
public global RISCV::T6   := AsmRiscVIntegerRegister name: #T6   value: 31u8.

let instructionTypeTable := #{
    Op32: AsmRiscVOp32InstructionDefinition.
    R: AsmRiscVRInstructionDefinition.
    Ri: AsmRiscVRiInstructionDefinition.
    I: AsmRiscVIInstructionDefinition.
    S: AsmRiscVSInstructionDefinition.
    B: AsmRiscVBInstructionDefinition.
    U: AsmRiscVUInstructionDefinition.
    J: AsmRiscVJInstructionDefinition.
}.

let instructionDefinitionTable := #(
    (rv32i
        (lui lui:value:
            U 2r0110111)
        (auipc auipc:value:
            U 2r0010111)
        (jal jal:dest:
            J 2r1101111)
        (jalr jalr:base:offset:
            I 2r1101111 2r000)

        (beq beq:with:dest:
            B 2r1100011 2r000)
        (bne bne:with:dest:
            B 2r1100011 2r001)
        (blt blt:with:dest:
            B 2r1100011 2r100)
        (bge bge:with:dest:
            B 2r1100011 2r101)
        (bltu bltu:with:dest:
            B 2r1100011 2r110)
        (bgeu bgeu:with:dest:
            B 2r1100011 2r111)

        (lb lb:base:offset:
            I 2r0000011 2r000)
        (lh lh:base:offset:
            I 2r0000011 2r001)
        (lw lw:base:offset:
            I 2r0000011 2r010)
        (lbu lbu:base:offset:
            I 2r0000011 2r100)
        (lhu lhu:base:offset:
            I 2r0000011 2r101)

        (sb sb:base:offset:
            S 2r0100011 2r000)
        (sh sh:base:offset:
            S 2r0100011 2r001)
        (sw sw:base:offset:
            S 2r0100011 2r010)

        (addi addi:value:with:
            I 2r0010011 2r000)
        (slti slti:value:with:
            I 2r0010011 2r010)
        (sltiu sltiu:value:with:
            I 2r0010011 2r011)
        (xori xori:value:with:
            I 2r0010011 2r100)
        (ori ori:value:with:
            I 2r0010011 2r110)
        (andi andi:value:with:
            I 2r0010011 2r111)

        (slli slli:value:with:
            Ri 2r0010011 2r001 2r0000000)
        (srli srli:value:with:
            Ri 2r0010011 2r101 2r0000000)
        (srai slli:value:with:
            Ri 2r0010011 2r101 2r0100000)

        (add add:value:with:
            R 2r0110011 2r000 2r0000000)
        (sub sub:value:with:
            R 2r0110011 2r000 2r0100000)
        (sll sll:value:with:
            R 2r0110011 2r001 2r0000000)
        (slt slt:value:with:
            R 2r0110011 2r010 2r0000000)
        (sltu sltu:value:with:
            R 2r0110011 2r011 2r0000000)
        (xor xor:value:with:
            R 2r0110011 2r100 2r0000000)
        (srl srl:value:with:
            R 2r0110011 2r101 2r0000000)
        (sra srl:value:with:
            R 2r0110011 2r101 2r0100000)
        (or or:value:with:
            R 2r0110011 2r101 2r0000000)
        (and and:value:with:
            R 2r0110011 2r111 2r0000000)

        (ecall ecall
            Op32 2r000000000000_00000_000_00000_1110011)
        (ebreak ebreak
            Op32 2r000000000001_00000_000_00000_1110011)
    )
).

instructionDefinitionTable do: {:(Array)instructionSetSpec :: Void |
    let instructionSetName => Symbol := instructionSetSpec first.
    instructionSetSpec allButFirst do: {:(Array)instructionSpec :: Void |
        let mnemonic => Symbol := instructionSpec first.
        let selector => Symbol := instructionSpec second.
        let instructionTypeName => Symbol := instructionSpec third.
        let opcode => UInt32 := instructionSpec fourth asUInt32.

        let typeClass := instructionTypeTable at: instructionTypeName.
        let instructionDescription := typeClass new
            mnemonic: mnemonic;
            opcode: opcode;
            parseExtraParameters: (instructionSpec allButFirst: 4sz);
            yourself.

        let qualifiedSelector := StringStream new
            string: "riscv::"; string: instructionSetName; string: "::"; string: selector;
            asSymbol.
        let shortSelector := StringStream new
            string: "riscv::"; string: selector;
            asSymbol.
        let builderMethod := instructionDescription makeBuilderMethod.

        AsmStreamBuilder
            withSelector: qualifiedSelector addMethod: builderMethod;
            withSelector: shortSelector addMethod: builderMethod
    }
}.

AsmStreamBuilder extend: {
    public method riscv::nop => AsmRiscVRInstruction
        := self riscv::add: RISCV::Zero value: RISCV::Zero with: RISCV::Zero.
}.
