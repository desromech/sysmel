Function
    withSelector: #addFlag: addMethod: {:self :(Size)flag :: Void |
        self flags: self flags | flag
    };
    withSelector: #makeMacro addMethod: {:self :: self __type__ |
        self addFlag: (1sz << 0sz).
        self
    };
    withSelector: #makePure addMethod: {:self :: self __type__ |
        self addFlag: (1sz << 3sz).
        self
    };
    withSelector: #makeFinal addMethod: {:self :: self __type__ |
        self addFlag: (1sz << 4sz).
        self
    }.

AnyValue
    withSelector: #initialize addMethod: {:self :: Void | };
    withSelector: #yourself addMethod: {:self :: self __type__ | self } makePure makeFinal;

    withSelector: #postCopy addMethod: {:self :: Void | };
    withSelector: #shallowCopy addMethod: {:self :: self __type__ | RawTuple::shallowCopy(self) } makeFinal;
    withSelector: #copy addMethod: {:self :: self __type__ | self shallowCopy postCopy; yourself };

    withSelector: #isNil addMethod: {:self :: Boolean | self == nil } makePure makeFinal;
    withSelector: #isNotNil addMethod: {:self :: Boolean | self ~~ nil } makePure makeFinal;

    withSelector: #= addMethod: {:self :other :: Boolean | self == other } makePure;
    withSelector: #~= addMethod: {:self :other :: Boolean | self ~~ other } makePure;

    withSelector: #&& addMacroMethod: {:macroContext :self :other :: ASTIfNode |
        ASTIfNode new
            sourcePosition: macroContext sourcePosition;
            conditionExpression: self;
            trueExpression: other;
            falseExpression: (ASTLiteralNode new
                sourcePosition: macroContext sourcePosition;
                value: false;
                yourself);
            yourself
    } makeMacro;
    withSelector: #|| addMacroMethod: {:macroContext :self :other :: ASTIfNode |
        ASTIfNode new
            sourcePosition: macroContext sourcePosition;
            conditionExpression: self;
            trueExpression: (ASTLiteralNode new
                sourcePosition: macroContext sourcePosition;
                value: true;
                yourself);
            falseExpression: other;
            yourself
    } makeMacro;

    withSelector: #ifTrue: addMacroMethod: {:macroContext :self :trueExpression :: ASTIfNode |
        ASTIfNode new
            sourcePosition: macroContext sourcePosition;
            conditionExpression: self;
            trueExpression: trueExpression;
            yourself
    } makeMacro;
    withSelector: #ifFalse: addMacroMethod: {:macroContext :self :falseExpression :: ASTIfNode |
        ASTIfNode new
            sourcePosition: macroContext sourcePosition;
            conditionExpression: self;
            falseExpression: falseExpression;
            yourself
    } makeMacro;
    withSelector: #ifTrue:ifFalse: addMacroMethod: {:macroContext :self :trueExpression :falseExpression :: ASTIfNode |
        ASTIfNode new
            sourcePosition: macroContext sourcePosition;
            conditionExpression: self;
            trueExpression: trueExpression;
            falseExpression: falseExpression;
            yourself
    } makeMacro;
    withSelector: #ifFalse:ifTrue: addMacroMethod: {:macroContext :self :falseExpression :trueExpression :: ASTIfNode |
        ASTIfNode new
            sourcePosition: macroContext sourcePosition;
            conditionExpression: self;
            trueExpression: trueExpression;
            falseExpression: falseExpression;
            yourself
    } makeMacro.

Object
    withSelector: #class addMethod: {:self :: self __type__ __type__ | self __type__ } makePure makeFinal;
    withSelector: #species addMethod: {:self :: Class | self class };
    withSelector: #error: addMethod: {:self :(String)errorMessage :: Void | error(errorMessage) };
    withSelector: #assert: addMethod: {:self :(Boolean)condition :: Void |
        if: condition then: void else: error("Assertion failure.")
    };
    withSelector: #subclassResponsibility addMethod: {:self :: Void | self error: self __type__ printString -- " Subclass responsibility." }.

Type
    withSelector: #hasBytesContent addMethod: {:self :: Boolean |
        (self flags & 2sz) ~= 0sz
    };
    withSelector: #addTypeSlot: addMethod: {:self :extraSlot :: Void |
        if: self totalSlotCount ~~ nil then: (self error: "Cannot add type slot when the total slot count has already been computed").
        if: self pendingSlots == nil then: (self pendingSlots: ArrayList new).
        self pendingSlots add: extraSlot
    };
    withSelector: #validSlots addMethod: {:self |
        let: #pendingSlots with: self pendingSlots.
        if: pendingSlots ~~ nil then: {

            let: #pendingSlotsArray with: pendingSlots asArray.
            let: #baseIndex with: self validSupertypeTotalSlotCount + self slots size.

            pendingSlotsArray doWithIndex: {:pendingSlot :pendingSlotIndex :: Void |
                let: #slotIndex with: baseIndex + pendingSlotIndex.
                pendingSlot generateAccessorsOn: self withIndex: slotIndex
            }.

            self slots: self slots -- pendingSlotsArray.
            self pendingSlots: nil
        }.
        
        self slots
    };
    withSelector: #validSupertypeTotalSlotCount addMethod: {:self :: Size |
        let: #supertype with: self supertype.
        if: supertype == nil then: 0sz else: supertype validTotalSlotCount.
    };
    withSelector: #validTotalSlotCount addMethod: {:self :: Size |
        let: #totalSlotCount with: self totalSlotCount.
        if: totalSlotCount == nil then: {
            self totalSlotCount: self validSupertypeTotalSlotCount + self validSlots size.
            self totalSlotCount
        } else: totalSlotCount
    };
    withSelector: #basicAllocate addMethod: {:self :: self |
        let: #result with: (if: self hasBytesContent
            then: RawTuple::byteNew(0sz)
            else: RawTuple::new(self validTotalSlotCount)).
        (RawTuple::type:)(result, self).
        result
    };
    withSelector: #basicAllocate: addMethod: {:self :(Size)variableSize :: self |
        let: #result with: (if: self hasBytesContent
            then: RawTuple::byteNew(variableSize)
            else: RawTuple::new(self validTotalSlotCount + variableSize)).
        (RawTuple::type:)(result, self).
        result
    };
    withSelector: #basicNew addMethod: {:self :: self |
        self basicAllocate
    };
    withSelector: #basicNew: addMethod: {:self :(Size)variableSlotCount :: self |
        self basicAllocate: variableSlotCount
    };
    withSelector: #new addMethod: {:self :: self |
        self basicNew initialize; yourself
    };
    withSelector: #>> addMethod: {:self :selector |
        let: #methodDictionary with: self methodDictionary.
        if: methodDictionary ~~ nil
            then: (methodDictionary atOrNil: selector)
            else: nil
    };
    withSelector: #lookupSelector: addMethod: {:self :selector |
        let: #method with: self >> selector.
        if: method ~~ nil
        then: method
        else: {
            let: #supertype with: self supertype.
            if: supertype ~~ nil
                then: (supertype lookupSelector: selector)
                else: (nil)
        }
    }.

Stream
    withSelector: #print: addMethod: {:self :value :: Void | 
        value printOn: self
    };
    withSelector: #nl addMethod: {:self :: Void | 
        self nextPut: '\n'
    }.

AnyValue
    withSelector: #printString addMethod: {:self :: String | 
        let: #stream with: StringStream new.
        self printOn: stream.
        stream asString.
    };
    withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void |
        stream nextPutAll: "a " ; print: self __type__
    };
    withSelector: #fullPrintString addMethod: {:self :: String | 
        let: #stream with: StringStream new.
        self fullPrintOn: stream.
        stream asString.
    };
    withSelector: #fullPrintOn: addMethod: {:self :(Stream)stream :: Void |
        self printOn: stream
    }.

Type
    withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void |
        let: #name with: self name.
        if: name ~~ nil
            then: (stream nextPutAll: name)
            else: (stream nextPutAll: "a Type")
    }.

Void
    withSelector: #coerceValue: addMethod: {:self :value :: self | void };
    withSelector: #printString addMethod: {:self :: String | "void" };
    withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void | stream nextPutAll: "void" }.

UndefinedObject
    withSelector: #printString addMethod: {:self :: String | "nil" };
    withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void | stream nextPutAll: "nil" }.

False
    withSelector: #printString addMethod: {:self :: String | "false" };
    withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void | stream nextPutAll: "false" }.

True
    withSelector: #printString addMethod: {:self :: String | "true" };
    withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void | stream nextPutAll: "true" }.

String
    withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void |
        ## TODO: Implement this part properly.
        stream nextPut: '"'
        stream nextPutAll: self
        stream nextPut: '"'
    }.

StringSymbol
    withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void |
        ## TODO: Implement this part properly.
        stream nextPut: '#'; nextPutAll: self
    }.

Class
    withSelector: #withSelector:addClassMethod: addMethod: {:self :selector :method :: Void |
        self class withSelector: selector addMethod: method
    }.

Function
    withSelector: #hasFlag: addMethod: {:self :(Size)flag :: Boolean |
        (self flags & flag) ~= 0sz
    };

    withSelector: #isMacro addMethod: {:self :: Boolean |
        self hasFlag: (1sz << 0sz)
    };
    
    withSelector: #isVariadic addMethod: {:self :: Boolean |
        self hasFlag: (1sz << 1sz)
    };
    withSelector: #isCorePrimitive addMethod: {:self :: Boolean |
        self hasFlag: (1sz << 2sz)
    };

    withSelector: #isPure addMethod: {:self :: Boolean |
        self hasFlag: (1sz << 3sz)
    };
    withSelector: #isFinal addMethod: {:self :: Boolean |
        self hasFlag: (1sz << 4sz)
    };

    withSelector: #hasPragmaNamed: addMethod: {:self :selector :: Boolean |
        let: #body with: self body.
        (body ~~ nil) && (body hasPragmaNamed: selector)
    }.

ValueBox
    withSelector: #with: addClassMethod: {:self :value |
        self basicNew
            value: value;
            yourself
    };
    withSelector: #_ addMethod: {:self | self value };
    withSelector: #_: addMethod: {:self :newValue | self value: newValue. newValue };
    withSelector: #":=" addMethod: {:self :newValue | self value: newValue. newValue }.

Collection
    withSelector: #isEmpty addMethod: {:self :: Boolean |
        self size = 0sz
    };
    withSelector: #isNotEmpty addMethod: {:self :: Boolean |
        self size ~= 0sz
    }.

SequenceableCollection
    withSelector: #with: addClassMethod: {:self :value :: self |
        (self new: 1sz)
            at: 0sz put: value;
            yourself
    };
    withSelector: #anySatisfy: addMethod: {:self :aBlock :: Boolean |
        let: #index with: (ValueBox with: 0sz).
        let: #size with: self size.
        let: #hasFoundIt with: (ValueBox with: false).

        while: (if: hasFoundIt _ then: false else: index _ < self size) do: (
            hasFoundIt := aBlock(self at: index _)
        ) continueWith: (index := index _ + 1).
        hasFoundIt _
    };
    withSelector: #allSatisfy: addMethod: {:self :aBlock :: Boolean |
        let: #index with: (ValueBox with: 0sz).
        let: #size with: self size.
        let: #everythingIsFine with: (ValueBox with: true).

        while: (if: everythingIsFine _ then: index _ < self size else: false) do: (
            everythingIsFine := aBlock(self at: index _)
        ) continueWith: (index := index _ + 1).
        everythingIsFine _
    };
    withSelector: #collect: addMethod: {:self :aBlock :: self species |
        let: #index with: (ValueBox with: 0sz).
        let: #size with: self size.
        let: #result with: (self species new: size).

        while: index _ < self size do: {
            let: #i with: index _.
            result at: i put: aBlock(self at: i)
        } continueWith: (index := index _ + 1).

        result
    };
    withSelector: #do: addMethod: {:self :aBlock :: Void |
        let: #index with: (ValueBox with: 0sz).
        let: #size with: self size.

        while: index _ < self size do: (
            aBlock(self at: index _)
        ) continueWith: (index := index _ + 1)
    };
    withSelector: #doWithIndex: addMethod: {:self :aBlock :: Void |
        let: #index with: (ValueBox with: 0sz).
        let: #size with: self size.

        while: index _ < self size do: {
            let: #i with: index _.
            aBlock(self at: i, i)
        } continueWith: (index := index _ + 1)
    };
    withSelector: #-- addMethod: {:self :other :: self species |
        let: #size with: self size.
        let: #otherSize with: other size.
        let: #result with: (self species new: size + otherSize ).
        
        self doWithIndex: {:element :(Size)index :: Void |
            result at: index put: element
        }.

        other doWithIndex: {:element :(Size)index :: Void |
            result at: size + index put: element
        }.

        result
    };
    withSelector: #first addMethod: {:self | self at: 0sz };
    withSelector: #second addMethod: {:self | self at: 1sz };
    withSelector: #third addMethod: {:self | self at: 2sz };
    withSelector: #fourth addMethod: {:self | self at: 3sz };

    withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void |
        stream print: self class; nextPutAll: "(".
        self doWithIndex: {:element :index :: Void |
            if: index > 0 then: (stream nextPutAll: ", ").
            stream print: element.
            void
        }.

        stream nextPutAll: ")"
    };
    withSelector: #asArray addMethod: {:self :: Array |
        let: #array with: (Array new: self size).
        self doWithIndex: {:element :(Size)index :: Void |
            array at: index put: element
        }.

        array
    }.

ArrayList
    withSelector: #new: addClassMethod: {:self :(Size)initialSize :: self |
        self basicNew initializeWithSize: initialSize; yourself
    };
    withSelector: #initialize addMethod: {:self :: Void |
        self size: 0sz
    };
    withSelector: #initializeWithSize: addMethod: {:self :(Size)initialSize :: Void |
        self size: initialSize sz.
        self storage: (Array new: initialSize).
    };
    withSelector: #at: addMethod: {:self :(Size)index |
        if: index < self size then: {
            self storage at: index
        } else: {
            error("Index out of bounds.")
        }
    };
    withSelector: #at:put: addMethod: {:self :(Size)index :value :: Void |
        if: index < self size then: {
            self storage at: index + self offset put: value
        } else: {
            error("Index out of bounds.")
        }
    }.

StringStream
    withSelector: #initialize addMethod: {:self :: Void |
        self size: 0
    }.

Array
    withSelector: #new: addClassMethod: {:self :(Size)initialSize :: self |
        self basicNew: initialSize
    };
    withSelector: #at: addMethod: {:self :(Size)index |
        self __slotAt__: index
    };
    withSelector: #at:put: addMethod: {:self :(Size)index :value :: Void |
        self __slotAt__: index put: value
    };
    withSelector: #size addMethod: {:self :: Size |
        self __size__
    };
    withSelector: #asArray addMethod: {:self :: Array | self };
    withSelector: #asArraySlice addMethod: {:self :: ArraySlice |
        ArraySlice basicNew
            elements: self;
            offset: 0sz;
            size: self size;
            yourself
    }.

ByteArray
    withSelector: #at: addMethod: {:self :(Size)index |
        self __slotAt__: index
    };
    withSelector: #at:put: addMethod: {:self :(Size)index :value :: Void |
        self __slotAt__: index put: value
    };
    withSelector: #size addMethod: {:self :: Size |
        self __byteSize__
    };
    withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void |
        stream nextPutAll: "#[".
        self doWithIndex: {:element :index :: Void |
            if: index > 0sz then: (stream nextPutAll: ". ").
            stream print: element.
            void
        }.

        stream nextPutAll: "]"
    }.

ArraySlice
    withSelector: #new: addClassMethod: {:self :(Size)size :: self |
        self basicNew
            elements: (Array basicNew: size);
            offset: 0sz;
            size: size;
            yourself
    };
    withSelector: #at: addMethod: {:self :(Size)index |
        if: index < self size then: {
            self elements at: index + self offset
        } else: {
            error("Index out of bounds.")
        }
    };
    withSelector: #at:put: addMethod: {:self :(Size)index :value :: Void |
        if: index < self size then: {
            self elements at: index + self offset put: value
        } else: {
            error("Index out of bounds.")
        }
    }.

TypeSlot
    withSelector: #named:type:flags: addClassMethod: {:self :name :(Type)type :(Size)flags :: self |
        self new
            name: name;
            type: type;
            flags: flags;
            yourself
    };
    withSelector: #named:type: addClassMethod: {:self :name :(Type)type :: self |
        self named: name type: type flags: 0sz
    };
    withSelector: #named:flags: addClassMethod: {:self :name :(Size)flags :: self |
        self named: name type: nil flags: flags
    };
    withSelector: #named: addClassMethod: {:self :name :(Type)type :: self |
        self publicNamed: name type: nil
    };
    withSelector: #publicNamed:type: addClassMethod: {:self :name :(Type)type :: self |
        self named: name type: type flags: 1sz
    };
    withSelector: #publicNamed: addClassMethod: {:self :name :(Type)type :: self |
        self publicNamed: name type: nil
    };

    withSelector: #isPublic addMethod: {:self :: Boolean |
        (self flags & 1sz) ~= 0sz
    };
    withSelector: #generateAccessorsOn:withIndex: addMethod: {:self :(Type)type :(Size)slotIndex :: Void |
        if: self isPublic then: {
            let: #slotType with: self type.
            let: #getterName with: self name.
            let: #setterName with: (self name asString -- ":") asSymbol.

            ## Getter.
            type withSelector: getterName addMethod: ({:(type)self :: slotType | (RawTuple::slotAt:)(self, slotIndex) }
                makePure;
                makeFinal; 
                recompileAndOptimize).

            ## Setter
            type withSelector: setterName addMethod: ({:(type)self :(slotType)value :: Void | RawTuple::slotAt:put:(self, slotIndex, value) }
                makeFinal; 
                recompileAndOptimize).
        }
    }.

Type
    withSelector: #generatePublicAccessors addMethod: {:self :: Void |
        let: #baseSlotIndex with: self validSupertypeTotalSlotCount.
        self slots doWithIndex: {:slot :index :: Void |
            let: #slotIndex with: baseSlotIndex + index.
            slot generateAccessorsOn: self withIndex: slotIndex
        }.
    }.

Metaclass
    withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void |
        let: #thisClass with: self thisClass.
        if: thisClass ~~ nil
        then: (stream print: thisClass; nextPutAll: " class")
        else: (stream nextPutAll: "a "; print: self __type__)
    }.

## Primitive values print string.
(
    UInt8,Int8,Char8,
    UInt16,Int16,Char16,
    UInt32,Int32,Char32,
    UInt64,Int64,
    Float32,Float64,
    Integer
) do: {:SelfType :: Void |
    SelfType
        withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void |
        stream nextPutAll: self printString
    }.
}.

SourcePosition
    withSelector: #printOn: addMethod: {:self :(Stream)stream :: Void |
        let: #sourceCode with: self sourceCode.

        stream
            nextPutAll: (sourceCode directory FileSystem::joinPath: sourceCode name);
            nextPut: ':';
            print: self startLine;
            nextPut: '.';
            print: self startColumn;
            nextPut: '-';
            print: self endLine;
            nextPut: '.';
            print: self endColumn
    }.

Class
    withSelector: #subclassWithClassSlots: addMethod: {:self :(Array)classSlots  :: Class |
        let: #metaclass with: Metaclass basicNew.
        let: #metaclassSuper with: self class.
        metaclass
            flags: 1sz;
            supertype: metaclassSuper;
            slots: classSlots;
            totalSlotCount: metaclassSuper validTotalSlotCount + classSlots size;
            generatePublicAccessors.
        
        let: #class with: metaclass basicNew.
        class
            flags: 1sz;
            supertype: self;
            slots: ();
            totalSlotCount: nil.
        metaclass thisClass: class.
        class
    };
    withSelector: #subclassWithClassSlots:slots: addMethod: {:self :(Array)classSlots :(Array)instanceSlots :: Class |
        (self subclassWithClassSlots: classSlots)
            slots: instanceSlots;
            totalSlotCount: self validTotalSlotCount + instanceSlots size;
            generatePublicAccessors;
            yourself
    };
    withSelector: #subclass:classSlots:slots: addMethod: {:self :(StringSymbol)name :(Array)classSlots :(Array)instanceSlots :: Class |
        let: #class with: (self subclassWithClassSlots: classSlots slots: instanceSlots).
        class name: name.
        class
    };
    withSelector: #subclass:slots: addMethod: {:self :(StringSymbol)name :(Array)instanceSlots :: Class |
        self subclass: name classSlots: () slots: instanceSlots
    }.

Environment
    withSelector: #setSymbol:value: addMethod: {:self :selector :value :: value __type__ | self setSymbol: selector bindingWithValue: value. value };
    withSelector: #setPublicSymbol:value: addMethod: {:self :selector :value :: value __type__ | self setSymbol: selector bindingWithValue: value. value };
    withSelector: #withSelector:addMethod: addMethod: {:self :selector :method :: Void | self setSymbol: selector bindingWithValue: method }.
