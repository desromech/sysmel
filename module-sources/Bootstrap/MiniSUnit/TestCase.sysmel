public abstract class TestCase superclass: TestAsserter; definition: {
    __Meta__ definition: {
        public method withAllSubclassesRun ::=> Void := {
            let metrics := TestMetrics new.
            self withAllSubtypesDo: {:(TestCase class)eachClass :: Void |
                eachClass isAbstract ifFalse: {
                    eachClass runWithMetrics: metrics.
                }
            }.

            printLine(metrics).
        }.

        public method runWithMetrics: (metrics: TestMetrics) ::=> Void := {
            printLine(name).
            self testSelectors do: {:(Symbol)eachTestSelector :: Void |
                self run: eachTestSelector withMetrics: metrics.
            }.
        }.

        public method run: (testSelector: Symbol) withMetrics: (metrics: TestMetrics) ::=> Void := {
            print("-- ", testSelector asString).

            let testTime := {|
                self new
                    setUp;
                    perform: testSelector;
                    tearDown.
            } timeToRunInMicroseconds.

            printLine(" ", testTime asFloat64 * 0.001, " ms").
            metrics countTestWithRunningTime: testTime.
        }.

        public method testSelectors => Array := {
            let: #selectors with: OrderedCollection new.
            self withSupertypesDo: {:subtype :: Void |
                subtype selectorsDo: {:(StringSymbol)each :: Void |
                    if: (each beginsWith: "test") && (each numSelectorArgs = 0sz) then: {
                        selectors add: each
                    }
                }
            }.

            selectors asArray sort; yourself
        }.
    }.

    public method setUp => Void := {

    }.

    public method tearDown => Void := {

    }.
}.
