public abstract class TestCase superclass: TestAsserter; definition: {
    __Meta__ definition: {
        public method withAllSubclassesRun ::=> Void := {
            self withAllSubtypesDo: {:(TestCase class)eachClass :: Void |
                eachClass isAbstract ifFalse: {
                    eachClass run
                }
            }
        }.

        public method run ::=> Void := {
            printLine("Running ", self name).
            self testSelectors do: {:(Symbol)eachTestSelector :: Void |
                self run: eachTestSelector
            }
        }.

        public method run: (testSelector: Symbol) ::=> Void := {
            printLine("-- ", testSelector).
            self new
                setUp;
                perform: testSelector;
                tearDown.
        }.

        public method testSelectors => Array := {
            let: #selectors with: OrderedCollection new.
            self withSupertypesDo: {:subtype :: Void |
                subtype selectorsDo: {:(StringSymbol)each :: Void |
                    if: (each beginsWith: "test") && (each numSelectorArgs = 0sz) then: {
                        selectors add: each
                    }
                }
            }.

            selectors asArray sort; yourself
        }.
    }.

    public method setUp => Void := {

    }.

    public method tearDown => Void := {

    }.
}.
