## Force the compilation of SourcePosition printString early on for having a proper stacktrace.
FunctionDefinition
    withSelector: #compileIntoBytecode addMethod: {:(FunctionDefinition)self :: Void |
        self ensureAnalysis.
        self analyzedInnerFunctions do: {:each | each compileIntoBytecode }.
        self bytecode: (FunctionBytecodeDirectCompiler compileFunctionDefinition: self).
    }.

Function
    withSelector: #compileIntoBytecode addMethod: {:(Function)self :: Void |
        self definition ifNotNil: {:def | def compileIntoBytecode }
    }.

Type
    withSelector: #compileIntoBytecode addMethod: {:(Type)self :: Void |
        self allMethodsDo: {:eachMethod :: Void | eachMethod compileIntoBytecode }.
    }.

FunctionDefinition
    withSelector: #compileIntoBytecodeIfNeeded addMethod: {:(FunctionDefinition)self :: Void |
        self ensureAnalysis.
        self analyzedInnerFunctions do: {:each | each compileIntoBytecodeIfNeeded }.
        if: self bytecode == nil then: {
            self bytecode: (FunctionBytecodeDirectCompiler compileFunctionDefinition: self)
        }.
    }.

Function
    withSelector: #compileIntoBytecodeIfNeeded addMethod: {:(Function)self :: Void |
        self definition ifNotNil: {:def | def compileIntoBytecodeIfNeeded }
    }.

Type
    withSelector: #compileIntoBytecodeIfNeeded addMethod: {:(Type)self :: Void |
        self allMethodsDo: {:eachMethod :: Void | eachMethod compileIntoBytecodeIfNeeded }.
    }.

## Compile the compiler first.
if: true then: {
    let typeCompilationBlock := {:(Type)each |
        print("Compiling type if needed: ", each).
        let compilationTime := {:: Void | each compileIntoBytecodeIfNeeded } timeToRunInMicroseconds asFloat32 * 0.001f32.
        printLine(" ", compilationTime, " ms").
    }.

    (
        ValueBox,
        SourcePosition,
        Collection,
        SequenceableCollection,
        Array,
        ArrayList,
        Dictionary,
        IdentityDictionary,
        MethodDictionary,
        Function,
        FunctionDefinition,
        FunctionBytecodeAssemblerAbstractOperand,
        FunctionBytecodeAssemblerOperand,
        FunctionBytecodeAssemblerAbstractInstruction,
        FunctionBytecodeAssemblerLabel,
        FunctionBytecodeAssemblerInstruction,
        FunctionBytecodeAssembler,
        FunctionBytecodeDirectCompiler
    ) -- ASTNode withAllSubtypes do: typeCompilationBlock.

    ## This allows to activate the on-demand bytecode compiler.
    if: true then: {
        let: #onDemandCompileIntoBytecode with: {:(FunctionDefinition)self :: Void |
            self compileIntoBytecodeIfNeeded
        }.
        onDemandCompileIntoBytecode compileIntoBytecodeIfNeeded.

        FunctionDefinition
            withSelector: #onDemandCompileIntoBytecode addMethod: onDemandCompileIntoBytecode
    }.

    AnyValue withAllSubtypesDo: typeCompilationBlock.
}.


