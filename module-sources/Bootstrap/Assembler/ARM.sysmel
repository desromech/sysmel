AsmInstructionOperand extend: {
}.

let ARM::Bkpt := 2r1110_00010010_0000_0000_0000_0111_0000 u32.

public final class AsmARMCompilationTarget superclass: AsmCompilationTarget; definition: {
    public override method elfMachine => UInt16
        := Elf::Machine::ARM.

    public override method pointerSize => Size
        := 4sz.

    public override method uintPointerType => Type
        := UInt32.

    public override method padCodeSectionData: (data: ByteArray) at: (offset: Size) size: (size: Size) unreachable: (unreachable: Boolean) ::=> Void := {
        self assert: (offset % 4sz) == 0sz.
        self assert: (size % 4sz) == 0sz.

        let writeOffset mutable := offset.
        let endWriteOffset := offset + size.
        while: (writeOffset < endWriteOffset) do: (
            data uint32At: writeOffset put: (unreachable ifTrue: ARM::Bkpt ifFalse: 16rE1A00000 u32)
        ) continueWith: (writeOffset := writeOffset + 4sz)
    }.

}.

AsmCompilationTarget extend: {
    __Meta__ extend: {
        public method armv6k => AsmARMCompilationTarget
            := AsmARMCompilationTarget new.
    }.
}.

public final class AsmARMRegister superclass: AsmRegister; definition: {
    public field name => Symbol.
    public field value => UInt8.

    __Meta__ definition: {
        public method name: (name: Symbol) value: (value: UInt8) ::=> self
            := self new name: name; value: value; yourself.
    }.

    public method size => Size := 4sz.
    public method value32 => UInt32 := value asUInt32.

    public method printOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: name
    }.
}.

public global ARM::R0 := AsmARMRegister name: #R0 value: 0u8.
public global ARM::R1 := AsmARMRegister name: #R1 value: 1u8.
public global ARM::R2 := AsmARMRegister name: #R2 value: 2u8.
public global ARM::R3 := AsmARMRegister name: #R3 value: 3u8.
public global ARM::R4 := AsmARMRegister name: #R4 value: 4u8.
public global ARM::R5 := AsmARMRegister name: #R5 value: 5u8.
public global ARM::R6 := AsmARMRegister name: #R6 value: 6u8.
public global ARM::R7 := AsmARMRegister name: #R7 value: 7u8.
public global ARM::R8 := AsmARMRegister name: #R8 value: 8u8.
public global ARM::R9 := AsmARMRegister name: #R9 value: 9u8.
public global ARM::R10 := AsmARMRegister name: #R10 value: 10u8.
public global ARM::R11 := AsmARMRegister name: #R11 value: 11u8.
public global ARM::R12 := AsmARMRegister name: #R12 value: 12u8.
public global ARM::SP := AsmARMRegister name: #SP value: 13u8.
public global ARM::LR := AsmARMRegister name: #LR value: 14u8.
public global ARM::PC := AsmARMRegister name: #PC value: 15u8.

public global ARM::Condition::EQ := 2r0000 u8.
public global ARM::Condition::NE := 2r0001 u8.
public global ARM::Condition::CS := 2r0010 u8.
public global ARM::Condition::HS := 2r0010 u8.
public global ARM::Condition::CC := 2r0011 u8.
public global ARM::Condition::LO := 2r0011 u8.
public global ARM::Condition::MI := 2r0100 u8.
public global ARM::Condition::PL := 2r0101 u8.
public global ARM::Condition::VS := 2r0110 u8.
public global ARM::Condition::VC := 2r0111 u8.
public global ARM::Condition::HI := 2r1000 u8.
public global ARM::Condition::LS := 2r1001 u8.
public global ARM::Condition::GE := 2r1010 u8.
public global ARM::Condition::LT := 2r1011 u8.
public global ARM::Condition::GT := 2r1100 u8.
public global ARM::Condition::LE := 2r1101 u8.
public global ARM::Condition::AL := 2r1110 u8.

public class AsmARMInstruction superclass: AsmStreamElement; definition: {
    public field mnemonic => Symbol.
    public field condition => UInt8.

    public method size => Size := 4sz.

    public method initialize => Void := {
        condition := ARM::Condition::AL
    }
}.

public class AsmARMBranchInstruction superclass: AsmARMInstruction; definition: {
    public field link => Boolean.
    public field destination => AsmInstructionOperand.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        ## TODO: Add the destination value and relocation.
        stream nextPutUInt32:
            (condition asUInt32 << 28u32) | (2r111 u32 << 25u32) | ((link ifTrue: 1u32 ifFalse: 0u32) << 24u32)
    }.

    public method printOn: (stream: Stream) ::=> Void := {
        stream nextPut: 'b'.
        link ifTrue: (stream nextPut: 'l').
        stream space; print: destination
    }
}.

public class AsmARMDataProcessingInstruction superclass: AsmARMInstruction; definition: {
    public field opcode => UInt8.
    public field S => Boolean.
    public field Rn => AsmARMRegister.
    public field Rd => AsmARMRegister.
    public field Rm => AsmARMRegister.
    public field shift => UInt8.

    public method initialize => Void := {
        super initialize.
        Rn := ARM::R0.
        Rd := ARM::R0.
        Rm := ARM::R0.
    }.

    public method setForAnd => Void := {
        mnemonic := #and.
        opcode := 2r0000 u8.
    }.

    public method setForEOr => Void := {
        mnemonic := #eor.
        opcode := 2r0001 u8.
    }.

    public method setForSub => Void := {
        mnemonic := #sub.
        opcode := 2r0010 u8.
    }.

    public method setForRsb => Void := {
        mnemonic := #rsb.
        opcode := 2r0011 u8.
    }.

    public method setForAdd => Void := {
        mnemonic := #add.
        opcode := 2r0100 u8.
    }.

    public method setForAdc => Void := {
        mnemonic := #adc.
        opcode := 2r0101 u8.
    }.

    public method setForSbc => Void := {
        mnemonic := #adc.
        opcode := 2r0110 u8.
    }.

    public method setForRsc => Void := {
        mnemonic := #rsc.
        opcode := 2r0111 u8.
    }.

    public method setForTst => Void := {
        mnemonic := #tst.
        opcode := 2r1000 u8.
    }.

    public method setForTeq => Void := {
        mnemonic := #teq.
        opcode := 2r1001 u8.
    }.

    public method setForCmp => Void := {
        mnemonic := #cmp.
        opcode := 2r1010 u8.
    }.

    public method setForCmn => Void := {
        mnemonic := #cmn.
        opcode := 2r1011 u8.
    }.

    public method setForOrr => Void := {
        mnemonic := #orr.
        opcode := 2r1100 u8.
    }.

    public method setForMov => Void := {
        mnemonic := #mov.
        opcode := 2r1101 u8.
    }.

    public method setForBic => Void := {
        mnemonic := #bic.
        opcode := 2r1110 u8.
    }.

    public method setForMvn => Void := {
        mnemonic := #mvn.
        opcode := 2r1111 u8.
    }.
}.

public final class AsmARMDataProcessingImmediateShiftInstruction superclass: AsmARMDataProcessingInstruction; definition: {
    public field immediate => UInt8.
    public field shift => UInt8.

    public method setForNop => Void := {
        mnemonic := #nop.
        opcode := 2r1101 u8.
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt32:
            (condition asUInt32 << 28u32) | (opcode asUInt32 << 21u32) | (S ifTrue: (1u32 << 20u32) ifFalse: 0u32)
            | (Rn value32 << 16u32) | (Rd value32 << 12u32)
            | (immediate asUInt32 << 7u32) | (shift asUInt32 << 5u32)
            | Rm value32.
    }.

    public method printOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: mnemonic;
            space; print: Rd;
            nextPutAll: ", "; print: Rm;
            nextPutAll: ", "; print: Rn;
            nextPutAll: ", "; print: immediate; nextPutAll: " << "; print: shift
    }
}.

public final class AsmARMBreakpointInstruction superclass: AsmARMDataProcessingInstruction; definition: {
    public field number => UInt16.
    public method initialize => Void := {
        super initialize.
        mnemonic := #bkpt
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt32:
            (condition asUInt32 << 28u32)
                | (2r0001_0010 u32 << 20u32) | ((number asUInt32 >> 4u32) << 8u32)
                | (2r0111 u32 << 4u32 ) | (number asUInt32 & 2r1111 u32).
    }.

    public method printOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: mnemonic; space; print: number
    }
}.

public class AsmARMSoftwareInterruptInstruction superclass: AsmARMInstruction; definition: {
    public field number => UInt32.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt32: (condition asUInt32 << 28u32) | (2r1111 u32 << 24u32) | number
    }.

    public method printOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: "swi"; space; print: number
    }
}.

AsmStreamBuilder extend: {
    public method arm::b: (destination: AsmInstructionOperand) when: (condition: UInt8) ::=> AsmARMBranchInstruction
        := self addElement: (AsmARMBranchInstruction new
            mnemonic: #b;
            condition: condition;
            link: false;
            destination: destination;
            yourself).
    public method arm::b: (destination: AsmInstructionOperand) ::=> AsmARMBranchInstruction
        := self arm::b: destination when: ARM::Condition::AL.

    public method arm::bkpt: (number: UInt16) ::=> AsmARMBreakpointInstruction
        := self addElement: (AsmARMBreakpointInstruction new
            number: number;
            yourself).

    public method arm::bkpt ::=> AsmARMBreakpointInstruction
        := self arm::bkpt: 0u16.

    public method arm::bl: (destination: AsmInstructionOperand) when: (condition: UInt8) ::=> AsmARMBranchInstruction
        := self addElement: (AsmARMBranchInstruction new
            mnemonic: #bl;
            condition: condition;
            link: true;
            destination: destination;
            yourself).

    public method arm::bl: (destination: AsmInstructionOperand) ::=> AsmARMBranchInstruction
        := self arm::bl: destination when: ARM::Condition::AL.

    public method arm::nop ::=> AsmARMDataProcessingInstruction
        := self addElement: (AsmARMDataProcessingImmediateShiftInstruction new
            setForNop;
            yourself).

    public method arm::swi: (number: UInt32) ::=> AsmARMSoftwareInterruptInstruction
        := self addElement: (AsmARMSoftwareInterruptInstruction new
            mnemonic: #swi;
            condition: ARM::Condition::AL;
            number: number;
            yourself).
}.
