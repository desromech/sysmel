public global Elf32::Addr := UInt32.
public global Elf32::Off := UInt32.
public global Elf32::Half := UInt16.
public global Elf32::Word := UInt32.
public global Elf32::Sword := Int32.

public global Elf64::Addr := UInt64.
public global Elf64::Off := UInt64.
public global Elf64::Half := UInt16.
public global Elf64::Word := UInt32.
public global Elf64::Sword := Int32.
public global Elf64::Xword := UInt64.
public global Elf64::Sxword := Int64.

public global Elf::Ident::Magic0 := 0sz.
public global Elf::Ident::Magic1 := 1sz.
public global Elf::Ident::Magic2 := 2sz.
public global Elf::Ident::Magic3 := 3sz.
public global Elf::Ident::Class := 4sz.
public global Elf::Ident::Data := 5sz.
public global Elf::Ident::Version := 6sz.
public global Elf::Ident::OSAbi := 7sz.
public global Elf::Ident::AbiVersion := 8sz.
public global Elf::Ident::NIdent := 16sz.

public global Elf::Ident::Class32 := 1u8.
public global Elf::Ident::Class64 := 2u8.

public global Elf::Ident::Data2LSB := 1u8.
public global Elf::Ident::Data2MSB := 2u8.

public global Elf::Ident::CurrentVersion := 1u8.
public global Elf::CurrentVersion := 1u32.

public global Elf::Machine::I386 := 3u16.
public global Elf::Machine::X86_64 := 62u16.

public global Elf::Type::None := 0u16.
public global Elf::Type::Rel := 1u16.
public global Elf::Type::Exec := 2u16.
public global Elf::Type::Dyn := 3u16.
public global Elf::Type::Core := 4u16.

public struct Elf32::Header definition: {
    public field ident => UInt8[Elf::Ident::NIdent].
    public field type => Elf32::Half.
    public field machine => Elf32::Half.
    public field version => Elf32::Word.
    public field entry => Elf32::Addr.
    public field programHeaderOffset => Elf32::Off.
    public field sectionHeaderOffset => Elf32::Off.
    public field flags => Elf32::Word.
    public field elfHeaderSize => Elf32::Half.
    public field programHeaderEntrySize => Elf32::Half.
    public field programHeaderEntryNumber => Elf32::Half.
    public field sectionHeaderEntrySize => Elf32::Half.
    public field sectionHeaderEntryNumber => Elf32::Half.
    public field sectionNameStringStringTableIndex => Elf32::Half.

    public method initialize => Void := {
        ident
            at: Elf::Ident::Magic0 put: 16r7f u8;
            at: Elf::Ident::Magic1 put: 'E' asUInt8;
            at: Elf::Ident::Magic2 put: 'L' asUInt8;
            at: Elf::Ident::Magic3 put: 'F' asUInt8;
            at: Elf::Ident::Class put: Elf::Ident::Class32;
            at: Elf::Ident::Data put: Elf::Ident::Data2LSB;
            at: Elf::Ident::Version put: Elf::Ident::CurrentVersion.
        
        version := Elf::CurrentVersion.
    }.
}.

public struct Elf64::Header definition: {
    public field ident => UInt8[Elf::Ident::NIdent].
    public field type => Elf64::Half.
    public field machine => Elf64::Half.
    public field version => Elf64::Word.
    public field entry => Elf64::Addr.
    public field programHeaderOffset => Elf64::Off.
    public field sectionHeaderOffset => Elf64::Off.
    public field flags => Elf64::Word.
    public field elfHeaderSize => Elf64::Half.
    public field programHeaderEntrySize => Elf64::Half.
    public field programHeaderEntryNumber => Elf64::Half.
    public field sectionHeaderEntrySize => Elf64::Half.
    public field sectionHeaderEntryNumber => Elf64::Half.
    public field sectionNameStringStringTableIndex => Elf64::Half.

    public method initialize => Void := {
        ident
            at: Elf::Ident::Magic0 put: 16r7f u8;
            at: Elf::Ident::Magic1 put: 'E' asUInt8;
            at: Elf::Ident::Magic2 put: 'L' asUInt8;
            at: Elf::Ident::Magic3 put: 'F' asUInt8;
            at: Elf::Ident::Class put: Elf::Ident::Class64;
            at: Elf::Ident::Data put: Elf::Ident::Data2LSB;
            at: Elf::Ident::Version put: Elf::Ident::CurrentVersion.
        
        version := Elf::CurrentVersion.
    }.
}.

public struct Elf32::SectionHeader definition: {
    public field name => Elf64::Word.
    public field type => Elf64::Word.
    public field flags => Elf64::Xword.
    public field addr => Elf64::Addr.
    public field offset => Elf64::Off.
    public field size => Elf64::Xword.
    public field link => Elf64::Word.
    public field info => Elf64::Word.
    public field addrAlign => Elf64::Xword.
    public field entrySize => Elf64::Xword.
}.

public struct Elf64::SectionHeader definition: {
    public field name => Elf64::Word.
    public field type => Elf64::Word.
    public field flags => Elf64::Xword.
    public field addr => Elf64::Addr.
    public field offset => Elf64::Off.
    public field size => Elf64::Xword.
    public field link => Elf64::Word.
    public field info => Elf64::Word.
    public field addrAlign => Elf64::Xword.
    public field entrySize => Elf64::Xword.
}.

public struct Elf64::Symbol definition: {
    public field name => Elf64::Word.
    public field info => UInt8.
    public field other => UInt8.
    public field sectionHeaderIndex => Elf64::Half.
    public field value => Elf64::Addr.
    public field size => Elf64::Xword.
}.

public struct Elf64::Rel definition: {
    public field offset => Elf64::Addr.
    public field info => Elf64::Xword.
}.

public struct Elf64::Rela definition: {
    public field offset => Elf64::Addr.
    public field info => Elf64::Xword.
    public field addend => Elf64::Sxword.
}.

let header := Elf64::Header new
    type: Elf::Type::Rel;
    yourself.
printLine("Elf64 header ", header __type__ encodeValueAsByteArray: header).