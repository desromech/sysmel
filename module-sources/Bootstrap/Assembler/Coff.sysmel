public global Coff::ImageFileMachine::AMD64 := 16r8664 u16.
public global Coff::ImageFileMachine::I386 := 16r14c u16.
public global Coff::ImageFileMachine::ARM := 16r1c0 u16.
public global Coff::ImageFileMachine::ARM64 := 16raa64 u16.
public global Coff::ImageFileMachine::RISCV32 := 16r5032 u16.
public global Coff::ImageFileMachine::RISCV64 := 16r5064 u16.
public global Coff::ImageFileMachine::RISCV128 := 16r5128 u16.

public global Coff::ImageFile::ExecutableImage := 16r0002 u16.
public global Coff::ImageFile::System := 16r1000 u16.
public global Coff::ImageFile::DLL := 16r2000 u16.
public global Coff::ImageFile::LargeAddressAware := 16r0020 u16.

public global Coff::ImageSection::ContentCode := 16r0000_0002 u32.
public global Coff::ImageSection::ContentInitializedData := 16r0000_0040 u32.
public global Coff::ImageSection::ContentUnitializedData := 16r0000_0080 u32.

public global Coff::ImageSection::Align1Bytes    := 16r0010_0000 u32.
public global Coff::ImageSection::Align2Bytes    := 16r0020_0000 u32.
public global Coff::ImageSection::Align4Bytes    := 16r0030_0000 u32.
public global Coff::ImageSection::Align8Bytes    := 16r0040_0000 u32.
public global Coff::ImageSection::Align16Bytes   := 16r0050_0000 u32.
public global Coff::ImageSection::Align32Bytes   := 16r0060_0000 u32.
public global Coff::ImageSection::Align64Bytes   := 16r0070_0000 u32.
public global Coff::ImageSection::Align128Bytes  := 16r0080_0000 u32.
public global Coff::ImageSection::Align256Bytes  := 16r0090_0000 u32.
public global Coff::ImageSection::Align512Bytes  := 16r00A0_0000 u32.
public global Coff::ImageSection::Align1024Bytes := 16r00B0_0000 u32.
public global Coff::ImageSection::Align2048Bytes := 16r00C0_0000 u32.
public global Coff::ImageSection::Align4096Bytes := 16r00D0_0000 u32.
public global Coff::ImageSection::Align8192Bytes := 16r00E0_0000 u32.

public global Coff::ImageSection::LinkNumberOfRelocOverflow := 16r0100_0000 u32.

public global Coff::ImageSection::MemShared := 16r1000_0000 u32.
public global Coff::ImageSection::MemExecute := 16r2000_0000 u32.
public global Coff::ImageSection::MemRead := 16r4000_0000 u32.
public global Coff::ImageSection::MemWrite := 16r4000_0000 u32.

public global Coff::ImageSection::AlignMap := #{
    1sz    : Coff::ImageSection::Align1Bytes.
    2sz    : Coff::ImageSection::Align2Bytes.
    4sz    : Coff::ImageSection::Align4Bytes.
    8sz    : Coff::ImageSection::Align8Bytes.
    16sz   : Coff::ImageSection::Align16Bytes.
    32sz   : Coff::ImageSection::Align32Bytes.
    64sz   : Coff::ImageSection::Align64Bytes.
    128sz  : Coff::ImageSection::Align128Bytes.
    256sz  : Coff::ImageSection::Align256Bytes.
    512sz  : Coff::ImageSection::Align512Bytes.
    1024sz : Coff::ImageSection::Align1024Bytes.
    2048sz : Coff::ImageSection::Align2048Bytes.
    4096sz : Coff::ImageSection::Align4096Bytes.
    8192sz : Coff::ImageSection::Align8192Bytes.
}.

public global Coff::SymbolType::Null := 0u8.
public global Coff::SymbolDType::Null := 0u8.
public global Coff::SymbolDType::Function := 2u8.

public global Coff::SymbolStorageClass::External := 2u8.
public global Coff::SymbolStorageClass::Static := 3u8.

public global Coff::RelocationType::AMD64::Addr64   := 16r0001 u16.
public global Coff::RelocationType::AMD64::Addr32   := 16r0002 u16.
public global Coff::RelocationType::AMD64::Addr32N  := 16r0003 u16.
public global Coff::RelocationType::AMD64::Rel32    := 16r0004 u16.
public global Coff::RelocationType::AMD64::Section  := 16r000A u16.
public global Coff::RelocationType::AMD64::Secrel   := 16r000B u16.

public global Coff::RelocationType::I386::Dir32   := 16r0006 u16.
public global Coff::RelocationType::I386::Dir32NB := 16r0007 u16.
public global Coff::RelocationType::I386::Section := 16r000A u16.
public global Coff::RelocationType::I386::Secrel  := 16r000B u16.
public global Coff::RelocationType::I386::Rel32   := 16r0014 u16.

public final class Coff::StringTable superclass: Object; definition: {
    public field stringStream => StringStream.
    public field stringIndexTable => Dictionary.
    
    public field size => Size.
    public field data => ByteArray.
    
    public field offsetOfEncodedElementInByteStream => Size.

    public override method initialize => Void := {
        stringStream := StringStream new.
        stringIndexTable := Dictionary new.
        self addString: "".
    }.

    public method addString: (string: String) ::=> Size
        := stringIndexTable at: string ifAbsentPut: {:: Size |
            let index := size.
            stringStream nextPutAll: string; nextPut: 0c8.
            size := size + (string size + 1sz).
            index
        }.

    public method finish => Void := {
        data := stringStream asByteArray.
        size := data size.
    }.

    public override method sizeOfByteEncoding => Size := 4sz + size.
    public override method canEncodeInBytes => Boolean := true.

    public override method encodeInBytes: (destination: ByteArray) atOffset: (destinationOffset: Size) ::=> Void := {
        destination
            uint32At: destinationOffset put: self sizeOfByteEncoding asUInt32;
            replaceFrom: destinationOffset + 4sz until: destinationOffset + data size with: data
    }.
}.

public final class Coff::Header superclass: ByteSerializablePackedObject; definition: {
    public field machine => UInt16.
    public field numberOfSections => UInt16.
    public field timestamp => UInt32.
    public field pointerToSymbolTable => UInt32.
    public field numberOfSymbols => UInt32.
    public field optionalHeaderSize => UInt16.
    public field characteristics => UInt16.
}.

public final class Coff::SectionHeader superclass: ByteSerializablePackedObject; definition: {
    public field name => Char8[8sz].
    public field virtualSize => UInt32.
    public field virtualAddress => UInt32.
    public field sizeOfRawData => UInt32.
    public field pointerToRawData => UInt32.
    public field pointerToRelocations => UInt32.
    public field pointerToLinenumbers => UInt32.
    public field numberOfRelocations => UInt16.
    public field numberOfLinenumbers => UInt16.
    public field characteristics => UInt32.

    public method writeName: (newName: String) ::=> Void := {
        self assert: newName size <= 8sz.
        newName doWithIndex: {:(Char8)each :(Size)index :: Void |
            name at: index put: each
        }
    }.

    public method name: (newName: String) stringTable: (stringTable: Coff::StringTable) ::=> Void := {
        newName size <= 8sz ifTrue: {
            self writeName: newName
        } ifFalse: {
            self writeName: "/" -- (stringTable addString: newName) asString
        }
    }.
}.

public final class Coff::Symbol superclass: ByteSerializablePackedObject; definition: {
    public field name => Char8[8sz].
    public field value => UInt32.
    public field sectionNumber => UInt16.
    public field type => UInt16.
    public field storageClass => UInt8.
    public field numberOfAuxSymbols => UInt8.

    public method type: (newType: UInt8) dtype: (newDType: UInt8) ::=> Void := {
        type := newType asUInt16 | (newDType asUInt16 << 8u16)
    }.

    public method writeName: (newName: String) ::=> Void := {
        self assert: newName size <= 8sz.
        newName doWithIndex: {:(Char8)each :(Size)index :: Void |
            name at: index put: each
        }
    }.

    public method writeNamePointer: (namePointer: UInt32) ::=> Void := {
        name
            at: 0sz put: 0c8;
            at: 1sz put: 0c8;
            at: 2sz put: 0c8;
            at: 3sz put: 0c8;
            at: 4sz put: namePointer asChar8;
            at: 5sz put: (namePointer >> 8u32) asChar8;
            at: 6sz put: (namePointer >> 16u32) asChar8;
            at: 7sz put: (namePointer >> 24u32) asChar8
    }.

    public method name: (newName: String) stringTable: (stringTable: Coff::StringTable) ::=> Void := {
        newName size <= 8sz ifTrue: {
            self writeName: newName
        } ifFalse: {
            self writeNamePointer: (stringTable addString: newName) asUInt32
        }
    }.
}.

public final class Coff::Relocation superclass: ByteSerializablePackedObject; definition: {
    public field virtualAddress => UInt32.
    public field symbolTableIndex => UInt32.
    public field type => UInt16.
}.

public final class Coff::SymbolTable superclass: Object; definition: {
    public field symbols => OrderedCollection.
    protected field sectionIndexTable => Dictionary.
    protected field sectionSymbolTable => Dictionary.
    protected field symbolDictionary => Dictionary.

    public override method initialize => Void := {
        symbols := OrderedCollection new.
        sectionIndexTable := Dictionary new.
        sectionSymbolTable := Dictionary new.
        symbolDictionary := Dictionary new.
    }.

    public method addSection: (section: AsmObjectCodeSection) index: (sectionIndex: Size) ::=> Void := {
        let sectionSymbol := Coff::Symbol new
            sectionNumber: sectionIndex asUInt16 + 1u16;
            storageClass: Coff::SymbolStorageClass::Static;
            yourself.
        sectionSymbolTable at: section put: symbols size asUInt32.
        sectionIndexTable at: section put: sectionIndex asUInt32 + 1u32.
        symbols add: sectionSymbol.
    }.

    public method mapSectionNumber: (section: AsmObjectCodeSection) ::=> UInt32
        := section ifNil: 0u32 ifNotNil: (sectionIndexTable at: section).

    public method addSymbol: (symbol: AsmSymbol) stringTable: (stringTable: Coff::StringTable) ::=> Void := {
        symbol isPrivate ifTrue: (return: void).

        let coffSymbol := Coff::Symbol new
            name: symbol name asString stringTable: stringTable;
            sectionNumber: (self mapSectionNumber: symbol section) asUInt16;
            value: symbol value asUInt32;
            type: Coff::SymbolType::Null dtype: (symbol isFunction ifTrue: Coff::SymbolDType::Function ifFalse: Coff::SymbolDType::Null);
            storageClass: (symbol isPrivate ifTrue: Coff::SymbolStorageClass::Static ifFalse: Coff::SymbolStorageClass::External);
            yourself.
        symbolDictionary at: symbol put: symbols size asUInt32.
        symbols add: coffSymbol.
    }.

    public method indexOfSymbol: (symbol: AsmSymbol) ::=> UInt32 := {
        symbol isPrivate
            ifTrue: (sectionSymbolTable at: symbol section)
            ifFalse: (symbolDictionary at: symbol)
    }.
}.

public final class AsmObjectCoffFileWriter superclass: AsmObjectFileWriter; definition: {
    public override method encodeObjectCode: (objectCode: AsmObjectCode) ::=> ByteArray := {
        let compilationTarget := objectCode compilationTarget.

        let header := Coff::Header new
            machine: compilationTarget coffMachine;
            yourself.

        let stringTable := Coff::StringTable new.
        let symbolTable := Coff::SymbolTable new.

        let fileLayout := OrderedCollection new.
        fileLayout add: header.

        let sectionHeaders := OrderedCollection new.
        let sectionDataElements := OrderedCollection new.

        ## Emit the sections.
        objectCode sections do: {:(AsmObjectCodeSection)eachSection :: Void |
            let characteristics mutable => UInt32 := Coff::ImageSection::AlignMap at: eachSection alignment asSize.
            eachSection loaded
                ifTrue: (characteristics := characteristics | Coff::ImageSection::ContentInitializedData)
                ifFalse: (characteristics := characteristics | Coff::ImageSection::ContentUnitializedData).
            eachSection executable
                ifTrue: (characteristics := characteristics | Coff::ImageSection::ContentCode | Coff::ImageSection::MemExecute).
            eachSection readable ifTrue: (characteristics := characteristics | Coff::ImageSection::MemRead).
            eachSection writeable ifTrue: (characteristics := characteristics | Coff::ImageSection::MemWrite).

            let sectionHeader := Coff::SectionHeader new
                name: eachSection name asString stringTable: stringTable;
                sizeOfRawData: eachSection size asUInt32;
                characteristics: characteristics;
                yourself.
            symbolTable addSection: eachSection index: sectionHeaders size.
            sectionHeaders add: sectionHeader.
            sectionDataElements add: eachSection.
        }.

        ## Convert the symbols.
        objectCode symbols do: {:(AsmSymbol)eachSymbol :: Void |
            symbolTable addSymbol: eachSymbol stringTable: stringTable
        }.

        ## Convert the relocations.
        let relocationTables := OrderedCollection new.
        let sectionRelocationPointers := OrderedCollection new.
        objectCode sections doWithIndex: {:(AsmObjectCodeSection)eachSection :(Size)sectionHeaderIndex :: Void |
            let sectionHeader := sectionHeaders at: sectionHeaderIndex.
            let relocations := eachSection relocations.
            relocations isNotEmpty ifTrue: {
                let relocationTableLabel := ByteStreamEncodingLabel new.
                relocationTables add: relocationTableLabel.
                sectionRelocationPointers add: relocationTableLabel.
                self assert: relocations size < 16rffff sz.
                sectionHeader numberOfRelocations: relocations size asUInt16.

                relocations do: {:(AsmObjectCodeRelocation)eachRelocation :: Void |
                    let symbol := eachRelocation symbol.
                    let extraAddend := symbol isPrivate ifTrue: (symbol value asInt64) ifFalse: (0i64).
                    eachRelocation applyAddendInTargetSection: eachSection withExtraAddend: extraAddend.
                    relocationTables add: (Coff::Relocation new
                        virtualAddress: (eachRelocation offset asUInt32);
                        symbolTableIndex: (symbolTable indexOfSymbol: symbol);
                        type: (compilationTarget convertCoffRelocationTypeOf: eachRelocation);
                        yourself)
                }
            } ifFalse: {
                sectionRelocationPointers add: nil
            }
        }.

        let symbolTableLabel := ByteStreamEncodingLabel new.
        stringTable finish.

        fileLayout
            addAll: sectionHeaders;
            addAll: objectCode sections;
            add: symbolTableLabel;
            addAll: symbolTable symbols;
            add: stringTable;
            addAll: relocationTables;
            computeOffsetsOfEncodedElementsInByteStream.

        sectionDataElements doWithIndex: {:dataElement :(Size)index :: Void |
            dataElement ifNotNil: {
                (sectionHeaders at: index)
                    pointerToRawData: dataElement offsetOfEncodedElementInByteStream asUInt32
            }.
        }.
        sectionRelocationPointers doWithIndex: {:relocationPointer :(Size)index :: Void |
            relocationPointer ifNotNil: {
                (sectionHeaders at: index)
                    pointerToRelocations: relocationPointer offsetOfEncodedElementInByteStream asUInt32
            }.
        }.

        header
            numberOfSections: sectionHeaders size asUInt16;
            numberOfSymbols: symbolTable symbols size asUInt32;
            pointerToSymbolTable: symbolTableLabel offsetOfEncodedElementInByteStream asUInt32.
        fileLayout encodedElementsInByteArray
    }.
}.


AsmCompilationTarget extend: {
    public method useCoff => self __type__ := {
        objectFileWriter := AsmObjectCoffFileWriter new.
        self
    }.

    public abstract method coffMachine => UInt16
        := self subclassResponsibility.

    public abstract method convertCoffRelocationTypeOf: (relocation: AsmObjectCodeRelocation) ::=> UInt16
        := self subclassResponsibility.
}.
