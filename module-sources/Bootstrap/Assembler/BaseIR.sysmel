public final class AsmStream superclass: Object.
public class AsmInstructionOperand superclass: Object.
public class AsmStreamElement superclass: AsmInstructionOperand.

public class AsmStreamElement superclass: Object; definition: {
    ## Instruction links.
    public field previous => AsmStreamElement.
    public field next => AsmStreamElement.

    public field position => Size.
    ##public field section => Size.

    ## Debugging information
    public field debugSourcePosition => SourcePosition.
    public field debugSourceNode => ASTNode.
    public field debugSourceEnvironment => Environment.

    public method initialize => Void := {
        position := 0sz
    }.

    public virtual method isFormattedWithIndentation => Boolean := true.

    public abstract method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void
        := self subclassResponsibility.

    public virtual method selectEncodingAlternatives => Void := {
        ## By default do nothing
    }.
}.

AsmInstructionOperand definition: {
    public method isImmediate => Boolean := false.

    public method isRegister => Boolean := false.
    public method isRegisterOrRegisterAddress => Boolean := false.

    public abstract method size => Size := self subclassResponsibility.
}.

public class AsmRegister superclass: AsmInstructionOperand; definition: {
    public method isRegister => Boolean := true.
    public method isRegisterOrRegisterAddress => Boolean := true.
}.

public final class AsmStream superclass: Object; definition: {
    public field firstElement => AsmStreamElement.
    public field lastElement => AsmStreamElement.

    public method addElement: (element: AsmStreamElement) before: (position: AsmStreamElement) ::=> Void := {
        let before := position ifNotNil: position previous ifNil: lastElement.
        let after := position.

        before ifNotNil: {
            before next: element.
            element previous: before.
        } ifNil: {
            firstElement := element
        }.

        after ifNotNil: {
            after previous: element.
            element next: after
        } ifNil: {
            lastElement := element
        }.
    }.

    public method addElement: (element: AsmStreamElement) after: (position: AsmStreamElement) ::=> Void := {
        let before := position .
        let after := position ifNotNil: position next ifNil: firstElement.

        before ifNotNil: {
            before next: element.
            element previous: before.
        } ifNil: {
            firstElement := element
        }.

        after ifNotNil: {
            after previous: element.
            element next: after
        } ifNil: {
            lastElement := element
        }.
    }.

    public method addElement: (element: AsmStreamElement) ::=> Void
        := self addElement: element before: nil.

    public method addFirstElement: (element: AsmStreamElement) ::=> Void
        := self addElement: element after: nil.

    public method elementsDo: aBlock ::=> Void := {
        let position mutable := firstElement.
        while: position isNotNil do: {
            let nextPosition := position next.
            aBlock(position).
            position := nextPosition
        }
    }.

    public method selectElementsEncodingAlternatives ::=> Void := {
        self elementsDo: {:(AsmStreamElement)each :: Void |
            each selectEncodingAlternatives.
        }.
    }.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        self elementsDo: {:(AsmStreamElement)each :: Void |
            each isFormattedWithIndentation ifTrue: (stream nextPutAll: "    ").
            stream fullPrint: each; nl
        }
    }.

    public method assemble => AsmObjectCode := {
        let objectCodeBuilder := AsmObjectCodeBuilder new.
        self
            selectElementsEncodingAlternatives.

        ## Compute sizes.
        let sizeStream := objectCodeBuilder newSizeStream.
        self elementsDo: {:(AsmStreamElement)each :: Void |
            each writeOnObjectCodeStream: sizeStream.
        }.

        objectCodeBuilder allocateMemoryForWriting.
        let writeStream := objectCodeBuilder newWriteStream.
        self elementsDo: {:(AsmStreamElement)each :: Void |
            each writeOnObjectCodeStream: writeStream.
        }.

        objectCodeBuilder finish
    }.
}.

public final class AsmAlignDirective superclass: AsmStreamElement; definition: {
    public field alignment => Size.

    public override method isFormattedWithIndentation => Boolean := false.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: ".align "; print: alignment
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream alignTo: alignment
    }.
}.

public final class AsmLabel superclass: AsmStreamElement; definition: {
    public field symbol => AsmSymbol.

    public override method isFormattedWithIndentation => Boolean := false.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream print: symbol; nextPut: ':'.
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream recordSymbol: symbol
    }.
}.

public final class AsmLabelEnd superclass: AsmStreamElement; definition: {
    public field symbol => AsmSymbol.

    public override method isFormattedWithIndentation => Boolean := false.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: "/* "; print: symbol; nextPutAll: " end */".
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream recordSymbolEnd: symbol
    }.
}.

public final class AsmSectionDirective superclass: AsmStreamElement; definition: {
    public field name => Symbol.

    public field executable => Boolean.
    public field writeable => Boolean.
    public field readable => Boolean.
    public field loaded => Boolean.

    public override method isFormattedWithIndentation => Boolean := false.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: ".section "; nextPutAll: name.
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        (stream enterSectionNamed: name)
            addExecutable: executable;
            addWriteable: writeable;
            addReadable: readable;
            addLoaded: loaded
    }.
}.

public final class AsmByteDirective superclass: AsmStreamElement; definition: {
    public field value => UInt8.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: ".byte "; print: value.
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPut: value
    }.
}.

public final class AsmSByteDirective superclass: AsmStreamElement; definition: {
    public field value => Int8.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: ".byte "; print: value.
    }.
    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutInt8: value
    }.
}.

public final class AsmWordDirective superclass: AsmStreamElement; definition: {
    public field value => UInt16.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: ".word "; print: value.
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt16: value
    }.
}.

public final class AsmSWordDirective superclass: AsmStreamElement; definition: {
    public field value => Int16.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: ".word "; print: value.
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutInt16: value
    }.
}.

public final class AsmDWordDirective superclass: AsmStreamElement; definition: {
    public field value => UInt32.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: ".word "; print: value.
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt32: value
    }.
}.

public final class AsmSDWordDirective superclass: AsmStreamElement; definition: {
    public field value => Int32.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: ".dword "; print: value.
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutInt32: value
    }.
}.

public final class AsmQWordDirective superclass: AsmStreamElement; definition: {
    public field value => UInt64.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: ".word "; print: value.
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutUInt64: value
    }.
}.

public final class AsmSQWordDirective superclass: AsmStreamElement; definition: {
    public field value => Int64.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: ".qword "; print: value.
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutInt64: value
    }.
}.

public final class AsmFloatDirective superclass: AsmStreamElement; definition: {
    public field value => Float32.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: ".float "; print: value.
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutFloat32: value
    }.
}.

public final class AsmDoubleDirective superclass: AsmStreamElement; definition: {
    public field value => Float64.

    public method fullPrintOn: (stream: Stream) ::=> Void := {
        stream nextPutAll: ".double "; print: value.
    }.

    public override method writeOnObjectCodeStream: (stream: AsmObjectCodeStream) ::=> Void := {
        stream nextPutFloat64: value
    }.
}.

public final class AsmStreamBuilder superclass: Object; definition: {
    public field stream => AsmStream.

    ## Debugging information
    public field debugSourcePosition => SourcePosition.
    public field debugSourceNode => ASTNode.
    public field debugSourceEnvironment => Environment.

    public method addElement: (element: AsmStreamElement) ::=> element __type__ := {
        stream addElement: element.

        element
            debugSourcePosition: debugSourcePosition;
            debugSourceNode: debugSourceNode;
            debugSourceEnvironment: debugSourceEnvironment;
            yourself
    }.

    public method label: (symbol: AsmSymbol) ::=> AsmLabel
        := self addElement: (AsmLabel new
            symbol: symbol;
            yourself).

    public method label ::=> AsmLabel
        := self label: nil.

    public method endLabel: (symbol: AsmSymbol) ::=> AsmLabelEnd
        := self addElement: (AsmLabelEnd new
            symbol: symbol;
            yourself).

    public method blockNamed: (symbol: AsmSymbol) with: (aBlock: (AsmStreamBuilder => Void)) ::=> AsmLabel := {
        let label := self label: symbol.
        aBlock(self).
        self endLabel: symbol.
        label
    }.

    public method symbolNamed: (name: Symbol) ::=> AsmSymbol
        := AsmSymbol new
            name: name;
            yourself.

    public method align: (alignment: Size) ::=> AsmAlignDirective
        := self addElement: (AsmAlignDirective new
            alignment: alignment;
            yourself).

    public method textSection ::=> AsmSectionDirective
        := self addElement: (AsmSectionDirective new
            name: #".text";
            loaded: true;
            executable: true;
            readable: true;
            yourself).

    public method dataSection ::=> AsmSectionDirective
        := self addElement: (AsmSectionDirective new
            name: #".data";
            loaded: true;
            readable: true;
            writeable: true;
            yourself).

    public method rodataSection ::=> AsmSectionDirective
        := self addElement: (AsmSectionDirective new
            name: #".rodata";
            loaded: true;
            readable: true;
            yourself).

    public method bssSection ::=> AsmSectionDirective
        := self addElement: (AsmSectionDirective new
            name: #".bss";
            readable: true;
            writeable: true;
            yourself).

    public method byte: (value: UInt8) ::=> AsmByteDirective
        := self addElement: (AsmByteDirective new
            value: value;
            yourself).

    public method sbyte: (value: Int8) ::=> AsmSByteDirective
        := self addElement: (AsmSByteDirective new
            value: value;
            yourself).

    public method word: (value: UInt16) ::=> AsmWordDirective
        := self addElement: (AsmWordDirective new
            value: value;
            yourself).

    public method sword: (value: Int16) ::=> AsmSWordDirective
        := self addElement: (AsmSWordDirective new
            value: value;
            yourself).

    public method dword: (value: UInt32) ::=> AsmDWordDirective
        := self addElement: (AsmDWordDirective new
            value: value;
            yourself).

    public method sdword: (value: Int32) ::=> AsmSDWordDirective
        := self addElement: (AsmSDWordDirective new
            value: value;
            yourself).

    public method qword: (value: UInt64) ::=> AsmQWordDirective
        := self addElement: (AsmQWordDirective new
            value: value;
            yourself).

    public method sqword: (value: Int64) ::=> AsmSQWordDirective
        := self addElement: (AsmSQWordDirective new
            value: value;
            yourself).

    public method float: (value: Float32) ::=> AsmFloatDirective
        := self addElement: (AsmFloatDirective new
            value: value;
            yourself).

    public method double: (value: Float64) ::=> AsmDoubleDirective
        := self addElement: (AsmDoubleDirective new
            value: value;
            yourself).
}.

AsmObjectCodeStream extend: {
    public abstract method nextPutIPRelativeI32: (operand: AsmInstructionOperand) extraOffset: (extraOffset: Int32) ::=> Void
        := self subclassResponsibility.

    public method nextPutIPRelativeI32: (operand: AsmInstructionOperand) ::=> Void := {
        self nextPutIPRelativeI32: operand extraOffset: 4i32
    }.
}.

AsmObjectCodeSizeStream extend: {
    public override method nextPutIPRelativeI32: (operand: AsmInstructionOperand) extraOffset: (extraOffset: Int32) ::=> Void := {
        activeSection increaseSizeBy: 4sz
    }.
}.

AsmObjectCodeWriteStream extend: {
    public override method nextPutIPRelativeI32: (operand: AsmInstructionOperand) extraOffset: (extraOffset: Int32) ::=> Void := {
        ## TODO: Implement this in a proper way.
        self nextPutUInt32: 0u32
    }.
}.

AsmStream extend: {
    __Meta__ extend: {
        public method buildWith: (aBlock: (AsmStreamBuilder => Void)) ::=> self := {
            let result := self new.
            let builder := AsmStreamBuilder new
                stream: result;
                yourself.
            aBlock(builder).
            result
        }
    }
}
