public class NativeCodeLinker superclass: Object; definition: {
    public field keepingIRTextForDebugging => Boolean.
    private field sectionNameTable => Dictionary.
    private field sections => OrderedCollection.
    private field symbolTable => NativeCodeLinkerSymbolTable.
    private field sourceSymbolTables => OrderedCollection.
    private field programEntities => OrderedCollection.
    private field programEntityImportedSymbols => OrderedCollection.
    private field hirTextIR => StringStream.
    private field mirTextIR => StringStream.
    private field asmTextIR => StringStream.

    public override method initialize => Void := {
        sectionNameTable := Dictionary new.
        sections := OrderedCollection new.
        symbolTable := NativeCodeLinkerSymbolTable new.
        sourceSymbolTables := OrderedCollection new.
        programEntities := OrderedCollection new.
        programEntityImportedSymbols := OrderedCollection new.
    }.

    public method addNativeCode: (nativeCode: NativeCode) ::=> Void := {
        nativeCode symbolTable ifNotNil: {
            sourceSymbolTables add: nativeCode symbolTable
        }.

        nativeCode sections do: {:(NativeCodeSection)sourceSection :: Void |
            (self getOrCreateSectionNamed: sourceSection name)
                addSourceSection: sourceSection
        }.

        programEntities addAll: nativeCode programEntities.
        programEntityImportedSymbols addAll: nativeCode programEntityImportedSymbols.

        nativeCode hirTextIR ifNotNil: {
            hirTextIR ifNil: (hirTextIR := StringStream new).
            hirTextIR string: nativeCode hirTextIR
        }.
        nativeCode mirTextIR ifNotNil: {
            mirTextIR ifNil: (mirTextIR := StringStream new).
            mirTextIR string: nativeCode mirTextIR
        }.
        nativeCode asmTextIR ifNotNil: {
            asmTextIR ifNil: (asmTextIR := StringStream new).
            asmTextIR string: nativeCode asmTextIR
        }
    }.

    public method addNativeCodes: (nativeCodes: Array) ::=> Void := {
        nativeCodes do: {:(NativeCode)each :: Void |
            self addNativeCode: each
        }
    }.

    public method getOrCreateSectionNamed: (name: Symbol) ::=> NativeCodeLinkerSection
        := sectionNameTable at: name ifAbsentPut: {:: NativeCodeLinkerSection  |
            let linkerSection := NativeCodeLinkerSection new.
            sections add: linkerSection.
            linkerSection
        }.

    public method finish => NativeCode := {
        let linkedSymbolTable := symbolTable
            addSections: sections;
            addSymbolTables: sourceSymbolTables;
            link.

        let nativeCode := NativeCode new
            sections: (sections collect: {:(NativeCodeLinkerSection)eachSection :: NativeCodeSection |
                (eachSection linkWithSymbolTable: symbolTable)
                    symbolTable: linkedSymbolTable;
                    yourself
            }) asArray;
            symbolTable: linkedSymbolTable;
            programEntities: (programEntities collect: {:(NativeCodeProgramEntity)eachProgramEntity :: NativeCodeProgramEntity |
                eachProgramEntity copy
                    contentSymbol: (symbolTable convertSymbolObject: eachProgramEntity contentSymbol);
                    trampolineTarget: (symbolTable convertSymbolObject: eachProgramEntity trampolineTarget);
                    yourself
            }) asArray;
            hirTextIR: (hirTextIR ifNotNil: (hirTextIR asString));
            mirTextIR: (mirTextIR ifNotNil: (mirTextIR asString));
            asmTextIR: (asmTextIR ifNotNil: (asmTextIR asString));
            yourself.

        let remainingImportedSymbols := OrderedCollection new. 
        programEntityImportedSymbols do: {:(Association)each :: Void |
            let programEntity => ProgramEntity := each key.
            let importedSymbol => NativeCodeSymbol := (symbolTable convertSymbolObject: each value).
            importedSymbol isNotNil && importedSymbol section isNil ifTrue: {
                remainingImportedSymbols add: programEntity -> importedSymbol
            }.
        }.
        
        nativeCode programEntityImportedSymbols: remainingImportedSymbols asArray.

        nativeCode
    }.
}.
