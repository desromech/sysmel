public class NativeCodeLinkerSymbolTableConversionMap superclass: Object; definition: {
    public field symbols => Array.
    public field addends => Array.

    public method convertSymbolIndex: (index: UInt32) ::=> UInt32
        := (index > 0u32) && (index asSize <= symbols size)
            ifTrue: (symbols at: index asSize - 1sz)
            ifFalse: 0u32.

    public method convertSymbolAddend: (index: UInt32) ::=> Int64
        := (index > 0u32) && (index asSize <= addends size)
            ifTrue: (addends at: index asSize - 1sz)
            ifFalse: 0i64.

}.

public class NativeCodeLinkerSymbolTable superclass: Object; definition: {
    private field symbols => OrderedCollection.
    private field symbolDictionary => ObjectPointerDictionary.
    private field convertedSymbolDictionary => Dictionary.
    private field convertedSymbolObjectDictionary => Dictionary.
    private field objectSymbolDictionary => ObjectPointerDictionary.
    private field sectionDictionary => ObjectPointerDictionary.
    private field sectionOffsetDictionary => ObjectPointerDictionary.

    private field symbolTableConversionMaps => ObjectPointerDictionary.

    public override method initialize => Void := {
        symbols := OrderedCollection new.
        objectSymbolDictionary := ObjectPointerDictionary new.
        convertedSymbolDictionary := Dictionary new.
        convertedSymbolObjectDictionary := Dictionary new.
        symbolDictionary := ObjectPointerDictionary new.
        sectionDictionary := ObjectPointerDictionary new.
        sectionOffsetDictionary := ObjectPointerDictionary new.
        symbolTableConversionMaps := ObjectPointerDictionary new.
    }.

    public method addSections: (sections: OrderedCollection) ::=> Void := {
        ## Make the section symbols first.
        sections do: {:(NativeCodeLinkerSection)eachSection :: Void |
            let sectionSymbol := NativeCodeSymbol new
                section: eachSection linkedSection;
                type: NativeCodeSymbol::Type::Section;
                visibility: NativeCodeSymbol::Visibility::Private;
                yourself.

            symbols add: sectionSymbol.
            let symbolIndex := symbols size asUInt32.
            symbolDictionary at: eachSection put: symbolIndex.

            let sectionOffset mutable := 0sz.
            eachSection sourceSections do: {:(NativeCodeSection)eachSourceSection :: Void |
                sectionOffset := sectionOffset alignedTo: eachSourceSection alignment.
                symbolDictionary at: eachSourceSection put: symbolIndex.
                sectionDictionary at: eachSourceSection put: eachSection linkedSection.
                sectionOffsetDictionary at: eachSourceSection put: sectionOffset.
                sectionOffset := sectionOffset + eachSourceSection size
            }
        }.

        ## Convert the per-section symbol table.
        sections do: {:(NativeCodeLinkerSection)eachSection :: Void |
            eachSection sourceSections do: {:(NativeCodeSection)eachSourceSection :: Void |
                self convertSymbolTable: eachSourceSection symbolTable
            }.
        }.
    }.

    public method addSymbolTables: (symbolTables: OrderedCollection) ::=> Void := {
        symbolTables do: {:(NativeCodeSymbolTable)eachSymbolTable :: Void |
            self convertSymbolTable: eachSymbolTable
        }
    }.

    public method convertSymbolObject: (symbol: NativeCodeSymbol) ::=> NativeCodeSymbol := {
        symbol ifNil: {return: nil}.

        symbol isGCObject ifTrue: {
            self assert: symbol name isNil.
            self assert: symbol isPrivate.
            symbols at: (self convertSymbolIndex: symbol) asSize - 1sz
        } ifFalse: {
            symbol isPrivate ifTrue: {
                let convertedSymbol := convertedSymbolObjectDictionary at: symbol ifAbsentPut: { :: NativeCodeSymbol |
                    let newSymbol := NativeCodeSymbol new
                        name: symbol name;
                        type: symbol type;
                        visibility: symbol visibility;
                        yourself.
                }.

                symbol section ifNotNil: {
                    let sectionOffset => Size := sectionOffsetDictionary at: symbol section.
                    convertedSymbol
                        section: (sectionDictionary at: symbol section);
                        value: (symbol value + sectionOffset asIntPointer);
                        yourself.
                }.

                convertedSymbol
            } ifFalse: {
                symbols at: (self convertSymbolIndex: symbol) asSize - 1sz
            }
        }.
    }.

    public method convertSymbolIndex: (symbol: NativeCodeSymbol) ::=> UInt32 := {
        symbol ifNil: {return: 0u32}.
        
        symbol isGCObject ifTrue: {
            self assert: symbol name isNil.
            self assert: symbol isPrivate.

            let convertedSymbol := objectSymbolDictionary at: symbol objectValue ifAbsentPut: { :: NativeCodeSymbol |
                let newSymbol := NativeCodeSymbol new
                    objectValue: symbol objectValue;
                    type: symbol type;
                    visibility: symbol visibility;
                    yourself.

                symbols add: newSymbol.
                symbolDictionary at: newSymbol put: symbols size asUInt32.
                newSymbol
            }.

            symbolDictionary at: convertedSymbol
        } ifFalse: {
            self assert: symbol name isNotNil.
            ## Make sure the converted symbol exists.
            let convertedSymbol := convertedSymbolDictionary at: symbol name ifAbsentPut: { :: NativeCodeSymbol |
                let newSymbol := NativeCodeSymbol new
                    name: symbol name;
                    type: symbol type;
                    visibility: symbol visibility;
                    yourself.

                symbols add: newSymbol.
                symbolDictionary at: newSymbol put: symbols size asUInt32.

                newSymbol
            }.

            symbol section ifNotNil: {
                let sectionOffset => Size := sectionOffsetDictionary at: symbol section.
                convertedSymbol
                    section: (sectionDictionary at: symbol section);
                    value: (symbol value + sectionOffset asIntPointer);
                    yourself.
            }.

            symbolDictionary at: convertedSymbol
        }.
    }.

    public method convertSymbolTable: (symbolTable: NativeCodeSymbolTable) ::=> NativeCodeLinkerSymbolTableConversionMap
        := symbolTableConversionMaps at: symbolTable ifAbsentPut: {:: NativeCodeLinkerSymbolTableConversionMap |
            let conversionMap := NativeCodeLinkerSymbolTableConversionMap new.
            let symbolCount := symbolTable symbols size.
            conversionMap
                symbols: (Array new: symbolCount);
                addends: (Array new: symbolCount).

            symbolTable symbols doWithIndex: {:(NativeCodeSymbol)sourceSymbol :(Size)index :: Void |
                sourceSymbol isPrivate && sourceSymbol isGCObject not ifTrue: {
                    self assert: sourceSymbol section isNotNil.
                    let sectionSymbolIndex => UInt32 := symbolDictionary at: sourceSymbol section.
                    let sectionOffset => Size := sectionOffsetDictionary at: sourceSymbol section.
                    conversionMap symbols at: index put: sectionSymbolIndex.
                    conversionMap addends at: index put: sectionOffset asInt64.
                } ifFalse: {
                    conversionMap symbols at: index put: (self convertSymbolIndex: sourceSymbol).
                    conversionMap addends at: index put: 0i64.
                }
            }.

            conversionMap
        }.

    public method link => NativeCodeSymbolTable
        := NativeCodeSymbolTable new
            symbols: symbols asArray;
            yourself
}.
