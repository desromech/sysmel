public class NativeCodeLinkerSection superclass: Object; definition: {
    public field sourceSections => OrderedCollection.
    public field linkedSection => NativeCodeSection.

    public field debugSourcePositions => OrderedOffsetTableBuilder.
    public field debugSourceEnvironments => OrderedOffsetTableBuilder.

    public override method initialize => Void := {
        sourceSections := OrderedCollection new.
        linkedSection := NativeCodeSection new.
        linkedSection alignment: 1sz.

        debugSourcePositions := OrderedOffsetTableBuilder new.
        debugSourceEnvironments := OrderedOffsetTableBuilder new.
    }.

    public method addSourceSection: (sourceSection: NativeCodeSection) ::=> Void := {
        linkedSection name ifNil: {
            linkedSection name: sourceSection name.
            linkedSection machoSectionName: sourceSection machoSectionName.
            linkedSection machoSegmentName: sourceSection machoSegmentName.
        }.

        linkedSection size: (linkedSection size alignedTo: sourceSection alignment).
        linkedSection alignment: (linkedSection alignment max: sourceSection alignment).
        linkedSection size: linkedSection size + sourceSection size.
        linkedSection flags: linkedSection flags | sourceSection flags.

        sourceSections add: sourceSection
    }.

    public method linkWithSymbolTable: (symbolTable: NativeCodeLinkerSymbolTable) ::=> NativeCodeSection := {
        linkedSection size: (linkedSection size alignedTo: linkedSection alignment).
        linkedSection isNoBits ifFalse: {
            linkedSection data: (ByteArray new: linkedSection size).
        }.
        
        let writePosition mutable := 0sz.
        let encoder := NativeCodeRelocationEncoder new.
        let cfi := OrderedCollection new.
        sourceSections do: {:(NativeCodeSection)sourceSection :: Void |
            writePosition := writePosition alignedTo: sourceSection alignment.
            sourceSection isNoBits ifFalse: {
                sourceSection data ifNotNil: {
                    linkedSection data replaceBytesFrom: writePosition count: sourceSection data size with: sourceSection data
                }
            }.

            sourceSection debugSourcePositions ifNotNil: {
                debugSourcePositions addOffsetTable: sourceSection debugSourcePositions withOffset: writePosition asUInt32
            }.
            sourceSection debugSourceEnvironments ifNotNil: {
                debugSourceEnvironments addOffsetTable: sourceSection debugSourceEnvironments withOffset: writePosition asUInt32
            }.

            ## Convert the relocations.
            sourceSection relocations ifNotNil: {
                let symbolTableMap := symbolTable convertSymbolTable: sourceSection symbolTable.

                sourceSection relocations decodedRelocationsDo: {:(UInt8)type :(UInt32)symbolIndex :(UInt32)offset :(Int64)addend :: Void |
                    let convertedSymbolIndex := symbolTableMap convertSymbolIndex: symbolIndex.
                    let convertedSymbolAddend := symbolTableMap convertSymbolAddend: symbolIndex.
                    encoder type: type symbolIndex: convertedSymbolIndex offset: writePosition asUInt32 + offset addend: convertedSymbolAddend + addend
                }.
            }.

            ## Convert the CFIs
            sourceSection callFrameInformations do: {:(NativeCodeCallFrameInformation)each :: Void |
                cfi add: (each copy
                    incrementAddressBy: writePosition asInt32;
                    yourself)
            }.

            writePosition := writePosition + sourceSection size
        }.

        linkedSection
            relocations: encoder finish;
            callFrameInformations: cfi asArray;
            debugSourcePositions: debugSourcePositions finish;
            debugSourceEnvironments: debugSourceEnvironments finish;
            yourself
    }.
}.
