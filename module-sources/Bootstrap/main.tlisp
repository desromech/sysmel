## Some utility functions.

## until:do:
(define (until:do: stop block)
    (define ibox (RawTuple::new 1))
    (define (i) (RawTuple::slotAt: ibox 0))
    (define (i: v) (RawTuple::slotAt:put: ibox 0 v))
    (i: 0)
    (while:do:continueWith: (Integer::< (i) stop)
        (block (i))
        (i: (Integer::+ (i) 1)))
)

## exportInstrinsicBuiltInBinding
(define (exportInstrinsicBuiltInBinding symbol binding)
    (Environment::setSymbol:bindingWithValue: __Global__ symbol binding))

## Type::validMethodDictionary
(define (Type::validMethodDictionary type)
    (define existingMethodDictionary (RawTuple::slotAt: type Type::Layout::methodDictionary))
    (if:then:else: (== existingMethodDictionary nil)
        (begin
            (define newMethodDictionary (MethodDictionary::new))
            (RawTuple::slotAt:put: type Type::Layout::methodDictionary newMethodDictionary)
            newMethodDictionary)
        existingMethodDictionary))

## Type::validVirtualMethodDictionary
(define (Type::validVirtualMethodDictionary type)
    (define existingMethodDictionary (RawTuple::slotAt: type Type::Layout::virtualMethodDictionary))
    (if:then:else: (== existingMethodDictionary nil)
        (begin
            (define newMethodDictionary (MethodDictionary::new))
            (RawTuple::slotAt:put: type Type::Layout::virtualMethodDictionary newMethodDictionary)
            newMethodDictionary)
        existingMethodDictionary))

## Setup a getter method.
(define (setupGetter getter)
    (RawTuple::slotAt:put: getter Function::Layout::flags FunctionFlags::GetterFlags)
    (Function::recompileAndOptimize getter))

## Setup a setter method.
(define (setupSetter setter)
    (RawTuple::slotAt:put: setter Function::Layout::flags FunctionFlags::SetterFlags)
    (Function::recompileAndOptimize setter))

## Bootstrap environment reflection core.
(define (makeTypeAccessors type)
    (define typeName (RawTuple::slotAt: type Type::Layout::name))

    (define (exportAndBindInstanceMethod selector method)
        (define exportedName (StringSymbol::intern (String::concat: typeName (String::concat: "::" (asString selector)))))
        (MethodDictionary::at:put: (Type::validMethodDictionary type) selector method)
        (exportInstrinsicBuiltInBinding exportedName method))

    (define slots (RawTuple::slotAt: type Type::Layout::slots))
    (define slotCount (RawTuple::size slots))
    (define supertype (RawTuple::slotAt: type Type::Layout::supertype))
    (define supertypeSlotCount (if:then:else: (== supertype nil)
        0
        (RawTuple::slotAt: supertype Type::Layout::totalSlotCount)))
    (until:do: slotCount (lambda (localSlotIndex)
        (define slot (RawTuple::slotAt: slots localSlotIndex))
        (define slotName (RawTuple::slotAt: slot TypeSlot::Layout::name))
        (define slotFlags (RawTuple::slotAt: slot TypeSlot::Layout::flags))
        (define slotType (RawTuple::slotAt: slot TypeSlot::Layout::type))

        ## Getter
        (exportAndBindInstanceMethod slotName
            (setupGetter (lambda ((self type) => slotType)
                (RawTuple::typeSlotAt: self slot))))

        ## Setter
        (exportAndBindInstanceMethod (StringSymbol::intern (String::concat: (asString slotName) ":"))
            (setupSetter (lambda ((self type) (value slotType) => Void)
                (RawTuple::typeSlotAt:put: self slot value)))
        ))))

(define intrinsicTypeCount (RawTuple::slotAt: BootstrapEnv::IntrinsicTypes 0))
(define intrinsicTypes (RawTuple::slotAt: BootstrapEnv::IntrinsicTypes 1))
(until:do: intrinsicTypeCount (lambda (i)
    (define intrinsicType (RawTuple::slotAt: intrinsicTypes i))
    (makeTypeAccessors intrinsicType)
    ))

## Type::lookupLocalSelector
(define (Type::lookupLocalSelector type selector)
    (define existingMethodDictionary (RawTuple::slotAt: type Type::Layout::methodDictionary))
    (if:then:else: (== existingMethodDictionary nil)
        nil
        (MethodDictionary::atOrNil: existingMethodDictionary selector)))

## Type::checkNoOverridenSelector
(define (Type::checkNoOverridenSelector type selector)
    (if:then: (~~ nil type)
        (begin
            (define existingMethod (Type::lookupLocalSelector type selector))
            (if:then:else: (== existingMethod nil)
                (Type::checkNoOverridenSelector (Type::supertype type) selector)
                (error (String::concat: "Overriding non-virtual method with selector " (printString selector)))
                ))))

## Type::checkNoOverridenSelector
(define (Type::checkVirtualDispatchSelectorExistence type selector)
    (if:then:else: (~~ nil type)
        (begin
            (define existingMethod (Type::lookupLocalSelector type selector))
            (if:then:else: (== existingMethod nil)
                (Type::checkVirtualDispatchSelectorExistence (Type::supertype type) selector)
                (if:then: (Boolean::not (Function::hasVirtualDispatch existingMethod))
                    (error (String::concat: "Overriding method declaration does not have virtual dispatch supertype with selector " (printString selector))))))
        (error (String::concat: "Overriding method does not have declaration in supertype with selector " (printString selector)))))

## Type::withSelector:addMethod:
(define (Type::withSelector:addMethod: type selector method)
    (define methodDict (Type::validMethodDictionary type))
    (define existentMethod (MethodDictionary::atOrNil: methodDict selector))
    (define isCorePrimitive (Function::isCorePrimitive existentMethod))
    (define hasVirtualDispatch (Function::hasVirtualDispatch method))
    (if:then:else: isCorePrimitive
        (Function::adoptDefinitionOf: existentMethod method)
        (MethodDictionary::at:put: methodDict selector method))
    (Type::flushLookupSelector: type selector)
    (if:then:else: hasVirtualDispatch
        (begin
            (if:then: (Function::hasOverrideDispatch method)
                (Type::checkVirtualDispatchSelectorExistence (Type::supertype type) selector))
            (MethodDictionary::at:put: (Type::validVirtualMethodDictionary type) selector method)
        )
        (Type::checkNoOverridenSelector (Type::supertype type) selector))

    (ProgramEntity::recordBindingWithOwnerAndName method type selector))

## Type::validMacroMethodDictionary
(define (Type::validMacroMethodDictionary type)
    (define existingMethodDictionary (Type::macroMethodDictionary type))
    (if:then:else: (== existingMethodDictionary nil)
        (begin
            (define newMethodDictionary (MethodDictionary::new))
            (Type::macroMethodDictionary: type newMethodDictionary)
            newMethodDictionary)
        existingMethodDictionary))

## Type::withSelector:addMacroMethod:
(define (Type::withSelector:addMacroMethod: type selector method)
    (define methodDict (Type::validMacroMethodDictionary type))
    (MethodDictionary::at:put: methodDict selector method)
    (Type::flushMacroLookupSelector: type selector)
    (ProgramEntity::recordBindingWithOwnerAndName method type selector))

## Type::validFallbackMethodDictionary
(define (Type::validFallbackMethodDictionary type)
    (define existingMethodDictionary (Type::fallbackMethodDictionary type))
    (if:then:else: (== existingMethodDictionary nil)
        (begin
            (define newMethodDictionary (MethodDictionary::new))
            (Type::fallbackMethodDictionary: type newMethodDictionary)
            newMethodDictionary)
        existingMethodDictionary))

## Type::withSelector:addFallbackMethod:
(define (Type::withSelector:addFallbackMethod: type selector method)
    (define methodDict (Type::validFallbackMethodDictionary type))
    (MethodDictionary::at:put: methodDict selector method)
    (Type::flushFallbackLookupSelector: type selector)
    (ProgramEntity::recordBindingWithOwnerAndName method type selector))

(define (Function::makeOverride function)
    (Function::flags: function FunctionFlags::Override)
    function)

(Type::withSelector:addMethod: SourcePosition #printString (Function::makeOverride (lambda (sourcePosition)
    (define sourceDirectory (SourceCode::directory (SourcePosition::sourceCode sourcePosition)))
    (define sourceName (SourceCode::name (SourcePosition::sourceCode sourcePosition)))
    (define sourcePath (FileSystem::joinPath: sourceDirectory sourceName))

    (define startLine (SourcePosition::startLine sourcePosition))
    (define startColumn (SourcePosition::startColumn sourcePosition))
    (define startString (String::concat: (String::concat: (asString startLine) ".") (asString startColumn)))

    (define endLine (SourcePosition::endLine sourcePosition))
    (define endColumn (SourcePosition::endColumn sourcePosition))
    (define endString (String::concat: (String::concat: (asString endLine) ".") (asString endColumn)))

    (String::concat: (String::concat: (String::concat: sourcePath ":") startString)
        (String::concat: "-" endString))
    )))

(exportInstrinsicBuiltInBinding #Type::withSelector:addMacroMethod: Type::withSelector:addMacroMethod:)
(exportInstrinsicBuiltInBinding #Type::validMacroMethodDictionary Type::validMacroMethodDictionary)

(exportInstrinsicBuiltInBinding #Type::withSelector:addMethod: Type::withSelector:addMethod:)
(exportInstrinsicBuiltInBinding #Type::validMethodDictionary Type::validMethodDictionary)

(exportInstrinsicBuiltInBinding #Type::withSelector:addFallbackMethod: Type::withSelector:addFallbackMethod:)
(exportInstrinsicBuiltInBinding #Type::validFallbackMethodDictionary Type::validFallbackMethodDictionary)

## Register the Type methods.
(Type::withSelector:addMethod: Type #withSelector:addMethod: Type::withSelector:addMethod:)
(Type::withSelector:addMethod: Type #validMethodDictionary Type::validMethodDictionary)

(Type::withSelector:addMethod: Type #withSelector:addMacroMethod: Type::withSelector:addMacroMethod:)
(Type::withSelector:addMethod: Type #validMacroMethodDictionary Type::validMacroMethodDictionary)

(Type::withSelector:addMethod: Type #withSelector:addFallbackMethod: Type::withSelector:addFallbackMethod:)
(Type::withSelector:addMethod: Type #validFallbackMethodDictionary Type::validFallbackMethodDictionary)

## Load the sysmel sources.
(loadSourceNamed: "Bootstrap.sysmel")
