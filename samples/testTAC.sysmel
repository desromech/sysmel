let module := TACModule new
    compilationTarget: AsmCompilationTarget x86_64 useElf asTacCompilationTarget;
    yourself.
let addFunction := module build: #add function: {:(TACFunctionBuilder)functionBuilder :: Void |
    let function := functionBuilder function.
    let x := function newArgument: #x withType: Int32.
    let y := function newArgument: #y withType: Int32.
    function arguments: (x, y).

    functionBuilder basicBlock: #entry build: {:(TACBlockBuilder)asm :: Void |
        let result := asm temporaryInt32.
        asm
            int32Add: x with: y into: result;
            returnInt32: result
    }
}.

module build: #main function: {:(TACFunctionBuilder)functionBuilder :: Void |
    functionBuilder basicBlock: #entry build: {:(TACBlockBuilder)asm :: Void |
        let result := asm temporaryInt32.

        asm
            callInt32: addFunction arguments: (42i32 asTacConstant, -5i32 asTacConstant) result: result;
            returnInt32: result
    }
}.

printLine(module fullPrintString).
let targetAssembly := module asTargetIR.
printLine(targetAssembly fullPrintString).
targetAssembly assemble writeObjectToFileNamed: "testTAC.x86_64.elf64".
