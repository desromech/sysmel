#*
{
function returnVar() => Int32 := {
    let var mutable => Int32 := 1i32.
    let secondVar mutable := var + 3i32.

    var + secondVar.

    var < secondVar
        ifTrue: (var + 42i32)
        ifFalse: (secondVar + 42i32)
}.

let module := returnVar asHIRModule.
printLine(module fullPrintString).

HIRPromoteAllocaPass runInModule: module.
HIRConstantPropagationPass runInModule: module.
printLine(module fullPrintString).
}.
*#

#*
{
function mySelect(switch: Int32, x: Int32, y: Int32, z: Int32, w: Int32) => Int32 := {
    let result mutable := x.
    switch = 0i32 ifFalse: {
        switch = 1i32 ifTrue: {
            result := y
        } ifFalse: {
            result := z
        }
    }.

    switch = 3i32 ifTrue: {
        result := result + w
    }.

    result
}.

let module := mySelect asHIRModule.
printLine(module fullPrintString).

HIRPromoteAllocaPass runInModule: module.
printLine(module fullPrintString).
}.

{
function myLoop(N: Int32) => Int32 := {
    let count mutable := 0i32.
    while: count < N do: {
        count := count + 2i32.
    }.

    count
}.

let module := myLoop asHIRModule.
printLine(module fullPrintString).

HIRPromoteAllocaPass runInModule: module.
printLine(module fullPrintString).
}.

{
function myDoWhileLoop(N: Int32) => Int32 := {
    let count mutable := 0i32.
    do: {
        count := count + 2i32.
    } while: (count < N).

    count
}.

let module := myDoWhileLoop asHIRModule.
printLine(module fullPrintString).

HIRPromoteAllocaPass runInModule: module.
printLine(module fullPrintString).
}.
*#

#*
{

public inline pure function fibonacci(n: Int32) => Int32 := {
    n <= 1i32 ifTrue: {
        return: 1i32
    } ifFalse: {
        fibonacci(n - 1i32) + fibonacci(n - 2i32)
    }
}.

public inline function plus(x: Int32, y: Int32) => Int32
    := x + y.

public inline function outerPlusSingle(x: Int32, y: Int32, z: Int32) => Int32
    := plus(x, y).

public inline function outerPlus(x: Int32, y: Int32, z: Int32) => Int32
    := plus(plus(x, y), z).

public inline function extraOuterPlus(x: Int32, y: Int32, z: Int32) => Int32
    := plus(outerPlus(x, y, z), fibonacci(plus(y, z))).

public inline function caller() => Int32
    := extraOuterPlus(1i32, 2i32, 3i32).

let module := HIRModuleCompilationContext forDefaultTarget
    exclusiveCompilationMode: true;
    compileFunctionsWithDefinitions: (caller, fibonacci, extraOuterPlus, plus, outerPlus);
    ##compileFunctionsWithDefinitions: (plus, outerPlusSingle, outerPlus);
    ##compileFunctionsWithDefinitions: (plus, outerPlusSingle);
    finish.

printLine(module fullPrintString).

##HIRInliningPass runInModule: module.
HIRInliningPass new
    functionPasses: HIRStandardFunctionOptimizationPasses;
    runInModule: module.

printLine(module fullPrintString).

}

*#

#*
{
let module := HIRModuleCompilationContext forDefaultTarget
    exclusiveCompilationMode: true;
    compileFunctionsWithDefinitions: (ObjectModel::lookupMethodWithInlineCache, ObjectModel::sendWithReceiverType2);
    finish.

printLine(module fullPrintString).

##HIRInliningPass runInModule: module.
HIRInliningPass new
    functionPasses: HIRStandardFunctionOptimizationPasses;
    runInModule: module.

printLine(module fullPrintString).
}
*#

{
let module := HIRModuleCompilationContext forDefaultTarget
    exclusiveCompilationMode: true;
    compileFunctionsWithDefinitions: (RawTuple::type,);
    finish.

printLine(module fullPrintString).

module performStandardOptimizations.

printLine(module fullPrintString).
}
