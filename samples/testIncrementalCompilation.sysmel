#*
{
let addFunctionNativeCode := (AsmStream for: AsmCompilationTarget x86_64 useElf buildWith: {:(AsmStreamBuilder)builder :: Void |
    let addFunctionSymbol := (builder symbolNamed: #add)
        makeFunction;
        makePublic;
        yourself.

    builder
        textSection;
        align: 16sz unreachable: true;
        blockNamed: addFunctionSymbol with: {:(AsmStreamBuilder)builder :: Void |
            builder
                x86::endbr64;
                x86::mov: X86::RAX src: X86::RDI;
                x86::add: X86::RAX with: X86::RSI;
                x86::ret
        }
}) assemble asNativeCode.

let mainFunctionNativeCode := (AsmStream for: AsmCompilationTarget x86_64 useElf buildWith: {:(AsmStreamBuilder)builder :: Void |
    let addFunctionSymbol := (builder symbolNamed: #add)
        makeFunction;
        makePublic;
        yourself.

    builder
        textSection;
        align: 16sz unreachable: true;
        blockNamed: ((builder symbolNamed: #main) makeFunction; makePublic; yourself) with: {:(AsmStreamBuilder)builder :: Void |
            builder
                x86::endbr64;
                x86::push: X86::RBP;
                x86::mov: X86::RBP src: X86::RSP;

                x86::mov: X86::RDI src: 2i32 asAsmImmediate;
                x86::mov: X86::RSI src: 3i32 asAsmImmediate;
                x86::call: addFunctionSymbol dword;

                x86::mov: X86::RSP src: X86::RBP;
                x86::pop: X86::RBP;
                x86::ret
        }.
}) assemble asNativeCode.

printLine(addFunctionNativeCode fullPrintString).
printLine(mainFunctionNativeCode fullPrintString).

let linkedCode := NativeCodeLinker new
    addNativeCode: mainFunctionNativeCode;
    addNativeCode: addFunctionNativeCode;
    finish.
printLine(linkedCode fullPrintString).
}.

{
let addModule := (MIRModule forContext: MIRContext new)
    compilationTarget: AsmCompilationTarget x86_64 setForLinux asMirCompilationTarget;
    build: #add function: {:(MIRFunctionBuilder)functionBuilder :: Void |
        let function := functionBuilder function.
        let x := function newArgument: #x withType: Int32.
        let y := function newArgument: #y withType: Int32.
        function arguments: (x, y).

        functionBuilder basicBlock: #entry build: {:(MIRBlockBuilder)mir :: Void |
            mir returnInt32: (mir int32Add: x with: y type: Int32)
        }
    };
    yourself.

let addModuleNativeCodeIR := addModule asTargetNativeCodeIR.
printLine(addModuleNativeCodeIR fullPrintString).
let addModuleNativeCode := addModuleNativeCodeIR asNativeCode.
printLine(addModuleNativeCode fullPrintString).

let mainModule := MIRModule forContext: MIRContext new.
mainModule
    compilationTarget: AsmCompilationTarget x86_64 setForLinux asMirCompilationTarget;
    build: #main function: {:(MIRFunctionBuilder)functionBuilder :: Void |
        let function := functionBuilder function.
        let argc := function newArgument: #argc withType: Int32.
        let argv := function newArgument: #argv withType: Char8 const pointer.
        function arguments: (argc, argv).

        functionBuilder basicBlock: #entry build: {:(MIRBlockBuilder)mir :: Void |
            let addFunction := mainModule importFunctionNamed: #add.
            mir returnInt32: (mir callInt32: addFunction arguments: (argc, mir int32: 3i32) type: Int32)
        }
    };
    yourself.

let mainModuleNativeCodeIR := mainModule asTargetNativeCodeIR.
printLine(mainModuleNativeCodeIR fullPrintString).
let mainModuleNativeCode := mainModuleNativeCodeIR asNativeCode.
printLine(mainModuleNativeCode fullPrintString).

let linkedCode := NativeCodeLinker new
    addNativeCode: mainModuleNativeCode;
    addNativeCode: addModuleNativeCode;
    finish.
printLine(linkedCode fullPrintString).
}.
*#

{
public function add(a: Int32, b: Int32) => Int32
    := a + b.

public externC function main(argc: Int32, argv: Char8 const pointer) ::=> Int32
    := add(argc, 3i32).

let hirModule := HIRModuleCompilationContext forDefaultTarget
    exclusiveCompilationMode: true;
    compileFunctionsWithDefinitions: (add, main);
    finish.

hirModule performStandardOptimizations.
##printLine(hirModule fullPrintString).

let nativeCodes := hirModule asNativeCodesFor: AsmCompilationTarget x86_64 setForLinux asMirCompilationTarget keepingIRTextForDebugging: true.
printLine(nativeCodes fullPrintString).

let nativeCode := hirModule asNativeCodeFor: AsmCompilationTarget x86_64 setForLinux asMirCompilationTarget keepingIRTextForDebugging: true.
printLine(nativeCode fullPrintString).

}.

#*
*#