let module := MIRModule new
    compilationTarget: AsmCompilationTarget x86_64 useElf asTacCompilationTarget;
    yourself.
let addFunction := module build: #add function: {:(MIRFunctionBuilder)functionBuilder :: Void |
    let function := functionBuilder function.
    let x := function newArgument: #x withType: Int32.
    let y := function newArgument: #y withType: Int32.
    function arguments: (x, y).

    functionBuilder basicBlock: #entry build: {:(MIRBlockBuilder)mir :: Void |
        mir returnInt32: (mir int32Add: x with: y type: Int32)
    }
}.

let floatAddFunction := module build: #floatAdd function: {:(MIRFunctionBuilder)functionBuilder :: Void |
    let function := functionBuilder function.
    let x := function newArgument: #x withType: Float32.
    let y := function newArgument: #y withType: Float32.
    function arguments: (x, y).

    functionBuilder basicBlock: #entry build: {:(MIRBlockBuilder)mir :: Void |
        mir returnFloat32: (mir float32Add: x with: y type: Float32)
    }
}.

let doubleAddFunction := module build: #doubleAdd function: {:(MIRFunctionBuilder)functionBuilder :: Void |
    let function := functionBuilder function.
    let x := function newArgument: #x withType: Float64.
    let y := function newArgument: #y withType: Float64.
    function arguments: (x, y).

    functionBuilder basicBlock: #entry build: {:(MIRBlockBuilder)mir :: Void |
        mir returnFloat64: (mir float64Add: x with: y type: Float64)
    }
}.

module build: #main function: {:(MIRFunctionBuilder)functionBuilder :: Void |
    functionBuilder basicBlock: #entry build: {:(MIRBlockBuilder)mir :: Void |
        mir returnInt32: (mir callInt32: addFunction arguments: (42i32 asTacConstant, -5i32 asTacConstant) type: Int32)
    }
}.

printLine(module fullPrintString).
let targetAssembly := module asTargetIR.
printLine(targetAssembly fullPrintString).
targetAssembly assemble writeObjectToFileNamed: "testMIR.x86_64.elf64".
