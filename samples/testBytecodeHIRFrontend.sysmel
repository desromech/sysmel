#*
{
function returnVar() => Int32 := {
    let var mutable => Int32 := 1i32.
    let secondVar mutable := var + 3i32.

    var + secondVar.

    var < secondVar
        ifTrue: (var + 42i32)
        ifFalse: (secondVar + 42i32)
}.

printLine((returnVar ensureAnalysis; definition) bytecode fullPrintString).

let module := returnVar asHIRModuleFromBytecode.
printLine(module fullPrintString).

}.
*#

{
let function := Stream >> #nextPutAllBytesOf:.
printLine((function ensureAnalysis; definition) bytecode fullPrintString).

let module := function asHIRModuleFromBytecodeForTarget: AsmCompilationTarget x86_64 asMirCompilationTarget asHIRCompilationTarget.
printLine(module fullPrintString).

module performStandardOptimizations.
printLine(module fullPrintString).
}

#*{
let function := Elf64::Header >> #initialize .##Namespace >> #basicInitialize.
printLine((function ensureAnalysis; definition) bytecode fullPrintString).

let module := function asHIRModuleFromBytecodeForTarget: AsmCompilationTarget x86_64 asMirCompilationTarget asHIRCompilationTarget.
printLine(module fullPrintString).

module performStandardOptimizations.
printLine(module fullPrintString).
}
*#

#*{
public struct MyStruct definition: {
    public field x => Int32.
    public field y => Int32.
}.

function myStruct() => Int32 := {
    let s mutable := MyStruct new.
    s x
}.

printLine((myStruct ensureAnalysis; definition) bytecode fullPrintString).

let module := myStruct asHIRModuleFromBytecode.
printLine(module fullPrintString).
}.
*#

#*
{
let function := Array >> #hash.
printLine((function ensureAnalysis; definition) sourceAnalyzedDefinition bodyNode fullPrintString).
printLine((function ensureAnalysis; definition) bytecode fullPrintString).

let module := function asHIRModule.
printLine(module fullPrintString).
}.
*#