let myPrint := {:(Array)elements... :: Void |
    elements do: {:each :: Void | each asString writeOntoStdout}
}.

let myPrintLine := {:(Array)elements... :: Void |
    elements do: {:each :: Void | each asString writeOntoStdout}.
    "\n" writeOntoStdout
}.

let myObject := Object new.
public externC function main(argc: Int32, argv: Char8 const pointer pointer) => Int32 := {
    "Hello World\n" writeOntoStdout.

    argc negated asString writeOntoStdout.

    ##let initialize := ObjectModel::lookupVirtualSelector(myObject, #initialize).
    ##let initialize := ObjectModel::lookupVirtualSelectorWithReceiverType(Object, #initialize).
    let myObject := Object basicAllocate.

    let i mutable := 0i32.
    while: (i < argc) do: {
        (String fromCString: argv[i asIntPointer]) writeOntoStdout.
        "\n" writeOntoStdout.
    } continueWith: (i := i + 1i32).

    0i32
}.

let compilationTarget := AsmCompilationTarget x86_64 useElf asTacCompilationTarget.

let ssaModule := main asSSAModule.
printLine(ssaModule fullPrintString).

let tacModule := ssaModule asTACModuleFor: compilationTarget.
printLine(tacModule fullPrintString).

let targetAssembly := tacModule asTargetIR.
printLine(targetAssembly fullPrintString).
targetAssembly assemble writeObjectToFileNamed: "testTACSSA.x86_64.elf64".
