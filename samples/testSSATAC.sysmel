##public externC function puts(string: Char8 const pointer) => Int32.
public externC function write(fd: Int32, buf: Void const pointer, count: Size) => IntPointer.
public externC function strlen(str: Char8 const pointer) => Size.

String extend: {
    public final method writeOntoStdout => Void := {
        write(1i32, self __rawContentsPointer__, self size).
    }.
}.

let myPrint := {:(Array)elements... :: Void |
    elements do: {:each :: Void | each asString writeOntoStdout}
}.

let myPrintLine := {:(Array)elements... :: Void |
    elements do: {:each :: Void | each asString writeOntoStdout}.
    "\n" writeOntoStdout
}.

public externC function main(argc: Int32, argv: Char8 const pointer pointer) => Int32 := {
    ## Int16 division
    #*
    {
        let a mutable := 12u16.
        let b mutable := 4u16.
        a / b.
    }.

    {
        let a mutable := 12u16.
        let b mutable := 4u16.
        a % b.
    }.

    {
        let a mutable := 12i16.
        let b mutable := 4i16.
        a / b.
    }.

    {
        let a mutable := 12i16.
        let b mutable := 4i16.
        a % b.
    }.
    *#

    ## Int32 division
    #*
    {
        let a mutable := 12u32.
        let b mutable := 4u32.
        a / b.
    }.

    {
        let a mutable := 12u32.
        let b mutable := 4u32.
        a % b.
    }.

    {
        let a mutable := 12i32.
        let b mutable := 4i32.
        a / b.
    }.

    {
        let a mutable := 12i32.
        let b mutable := 4i32.
        a % b.
    }.
    *#

    ## Int64 division
    #*
    {
        let a mutable := 12u64.
        let b mutable := 4u64.
        a / b.
    }.

    {
        let a mutable := 12u64.
        let b mutable := 4u64.
        a % b.
    }.

    {
        let a mutable := 12i64.
        let b mutable := 4i64.
        a / b.
    }.

    {
        let a mutable := 12i64.
        let b mutable := 4i64.
        a % b.
    }.
    *#

    "Hello World\n" writeOntoStdout.

    let initialize := Object lookupVirtualSelector: #initialize.

    let i mutable := 0i32.
    while: (i < argc) do: {
        let arg := argv[i asIntPointer].
        write(1i32, arg reinterpretCastTo: Void const pointer, strlen(arg)).
        "\n" writeOntoStdout.
    } continueWith: (i := i + 1i32).

    0i32
}.

let compilationTarget := AsmCompilationTarget x86_64 useElf asTacCompilationTarget.

let ssaModule := main asSSAModule.
printLine(ssaModule fullPrintString).

let tacModule := ssaModule asTACModuleFor: compilationTarget.
printLine(tacModule fullPrintString).

let targetAssembly := tacModule asTargetIR.
printLine(targetAssembly fullPrintString).
targetAssembly assemble writeObjectToFileNamed: "testTACSSA.x86_64.elf64".
