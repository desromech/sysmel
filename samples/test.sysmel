#*
AnyValue withAllSubtypesDo: {:each |
    printLine(each)
}.
*#

##printLine("Function bytecodes ", FunctionBytecode allInstances size).

#*
printLine(Untyped).
printLine(Untyped __type__).

printLine(AnyValue).
printLine(AnyValue __type__).

printLine(Type supertype).
printLine(Type supertype supertype).
printLine(Type supertype supertype supertype).

printLine(1 perform: #+ with: 2).

public class TestClass superclass: Object; definition: {
    protected field first => Int32.
    protected field second => Int32.

    public method initialize => Void := {
        first := 1i32.
        second := first + 1i32.
    }.

    public method mySecond => Int32 
        := second.
}.

printLine(((TestClass >> #initialize) ensureAnalysis; definition) bytecode fullPrintString).
printLine(((TestClass >> #mySecond) ensureAnalysis; definition) bytecode fullPrintString).

let testObject := TestClass new.
tuple: testObject slotNamedAt: #first put: 4i32.
tuple: testObject slotNamedAt: #second put: (tuple: testObject slotNamedAt: #first) + 1i32.
printLine(tuple: testObject slotNamedAt: #first).
printLine(tuple: testObject slotNamedAt: #second).

printLine(tuple: TestClass new slotNamedAt: #first).
##printLine(TestClass new first).
printLine(TestClass new mySecond).

*#

public function myPublicAddFunction(x: Int32, y: Int32) => Int32
    := x + y.

printLine(myPublicAddFunction(2i32, 4i32)).

function myAddFunction(x: Int32, y: Int32) => Int32
    := x + y.

printLine(myAddFunction(2i32, 4i32)).

function myPlusN(n: Int32) => (Int32 => Int32)
    := function(x: Int32) => Int32 := x + n.
printLine(myPlusN(5)(7)).

function myPlusN2(n: Int32) => (Int32 => Int32) :={
    function result(x: Int32) => Int32
        := x + n.
    result
}.
printLine(myPlusN2(5)(7)).