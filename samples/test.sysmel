printLine("Hello World from Sysmel in Tuuvm").
printLine(Integer::+(42, 1)).

printLine(42 identityHash).
printLine(42 __type__).
printLine({}).
printLine({|}).
printLine({:x | x }).
printLine({:x :y | x + y}).
printLine({:x :y :: Int32 | x + y}).

printLine({:(Integer)x | x}(2)).
printLine({:(Integer)x :: Integer | x}(2)).

printLine(2 + 3).
printLine({:(Integer)x :(Integer)y | x + y }(2, 3)).
printLine({:(Integer)x :(Integer)y :: Integer | x + y }(2, 3)).

let: #x with: 3.
printLine(x).

printLine(42 + 1).

printLine(send(#+ , 42, 1)).

printLine(42).
printLine(42 printString).

let: #square with: {:(Int32)x :: Int32 | x*x}.
printLine(square).
printLine(square body expressions).
printLine(square sourcePosition).
printLine(square body sourcePosition).

printLine(#[]).
printLine(#[1]).
printLine(#[1 . 2 . 3]).
printLine((Array, ArraySlice)).

printLine(`'42).
printLine(``42).
printLine(``(`,(ASTSequenceNode new))).

printLine(0.0).
printLine(1.5 + 2.25).
printLine(0.0f32).
printLine(1.5f32 + 2.25f32).

let: #ClassBuilder with: (Object subclass: #ClassBuilder slots: (
    TypeSlot publicNamed: #fields type: ArrayList ,
    TypeSlot publicNamed: #classFields type: ArrayList
)).

let: #MetaBuilder with: (Object subclass: #MetaBuilder slots: ()).

MetaBuilder
    withSelector: #analyzeAndEvaluateMessageSendNode:forReceiver:withEnvironment: addClassMethod: {:self :messageSendNode :receiver :environment |
        let: #selfReceiver with: (ASTLiteralNode new
            sourcePosition: messageSendNode receiver sourcePosition;
            value: receiver;
            yourself). 
        let: #messageWithSelfReceiver with: (messageSendNode copy
            receiver: selfReceiver;
            yourself).

        receiver analyzeAndEvaluateMessageSendNode: messageWithSelfReceiver withEnvironment: environment
    };
    withSelector: #analyzeMessageSendNode:withEnvironment: addClassMethod: {:self :messageSendNode :environment |
        messageSendNode receiver value analyzeMessageSendNode: messageSendNode withEnvironment: environment
    };
    withSelector: #analyzeAndEvaluateMessageSendNode:withEnvironment: addMethod: {:self :messageSendNode :environment |
        self subclassResponsibility
    };
    withSelector: #analyzeMessageSendNode:withEnvironment: addMethod: {:self :messageSendNode :environment |
        self subclassResponsibility
    }.

let: #MetaBuilderFactory with: (MetaBuilder subclass: #MetaBuilderFactor slots: (
    TypeSlot publicNamed: #metaBuilderClass type: Class,
)).

MetaBuilderFactory
    withSelector: #for: addClassMethod: {:self :metaBuilderClass :: self |
        self new
            metaBuilderClass: metaBuilderClass;
            yourself
    };
    withSelector: #analyzeAndEvaluateMessageSendNode:withEnvironment: addMethod: {:self :messageSendNode :environment |
        let: #metaBuilderInstance with: self metaBuilderClass new.
        let: #metaBuilderInstanceNode with: (ASTLiteralNode new
            sourcePosition: messageSendNode receiver sourcePosition;
            value: metaBuilderInstance;
            yourself).
        let: #messageWithMetaBuilderInstance with: (messageSendNode copy
            receiver: metaBuilderInstanceNode;
            yourself).
        metaBuilderInstance analyzeAndEvaluateMessageSendNode: messageWithMetaBuilderInstance withEnvironment: environment
    };
    withSelector: #analyzeMessageSendNode:withEnvironment: addMethod: {:self :messageSendNode :environment |
        let: #metaBuilderInstance with: self metaBuilderClass new.
        let: #metaBuilderInstanceNode with: (ASTLiteralNode new
            sourcePosition: messageSendNode receiver sourcePosition;
            value: metaBuilderInstance;
            yourself).
        let: #messageWithMetaBuilderInstance with: (messageSendNode copy
            receiver: metaBuilderInstanceNode;
            yourself).
        metaBuilderInstance analyzeMessageSendNode: messageWithMetaBuilderInstance withEnvironment: environment
    }.

let: #MacroMetaBuilder with: (MetaBuilder subclass: #MacroMetaBuilder slots: ()).

MacroMetaBuilder
    withSelector: #analyzeAndEvaluateMessageSendNode:withEnvironment: addMethod: {:self :messageSendNode :environment |
        (self expandMessageSendNode: messageSendNode withEnvironment: environment) astAnalyzeAndEvaluateWithEnvironment: environment
    };
    withSelector: #analyzeMessageSendNode:withEnvironment: addMethod: {:self :messageSendNode :environment |
        (self expandMessageSendNode: messageSendNode withEnvironment: environment) astAnalyzeWithEnvironment: environment
    };
    withSelector: #expandMessageSendNode:withEnvironment: addMethod: {:self :messageSendNode :environment :: ASTNode |
        self subclassResponsibility
    };
    withSelector: #finishExpansionWithMessageSendNode:environment: addMethod: {:self :messageSendNode :environment :: ASTNode |
        messageSendNode copy
            receiver: (self finishExpansionWithEnvironment: environment);
            yourself
    };
    withSelector: #finishExpansionWithEnvironment: addMethod: {:self :environment :: ASTNode |
        self subclassResponsibility
    }.

let: #MethodMetaBuilder with: (MacroMetaBuilder subclass: #MethodMetaBuilder slots: (
    TypeSlot publicNamed: #sourcePosition type: SourcePosition ,
    TypeSlot publicNamed: #selector type: ASTNode ,
    TypeSlot publicNamed: #resultType type: ASTNode ,
    TypeSlot publicNamed: #body type: ASTNode ,
    TypeSlot publicNamed: #arguments type: ArraySlice
)).

ASTNode
    withSelector: #parseAsArgumentNode addMethod: {:self :: ASTArgumentNode |
        self error: self asString -- " is not a valid argument expression."
    }.

ASTArgumentNode
    withSelector: #parseAsArgumentNode addMethod: {:self :: ASTArgumentNode | self }.

ASTIdentifierReferenceNode
    withSelector: #parseAsArgumentNode addMethod: {:self :: ASTArgumentNode |
        ASTArgumentNode new
            sourcePosition: self sourcePosition;
            isForAll: false;
            name: (ASTLiteralNode new
                sourcePosition: self sourcePosition;
                value: self value;
                yourself);
            yourself
    }.

MethodMetaBuilder
    withSelector: #expandMessageSendNode:withEnvironment: addMethod: {:self :messageSendNode :environment :: ASTNode |
        self sourcePosition: messageSendNode sourcePosition.

        if: self selector == nil then: {
            self selector: messageSendNode selector.
            self arguments: (messageSendNode arguments collect: {:each | each parseAsArgumentNode}).
            messageSendNode receiver
        } else: {
            if: messageSendNode selector isLiteralNode then: {
                let: #selectorValue with: messageSendNode selector value.
                if: selectorValue == #":=" then: {
                    self body: messageSendNode arguments first.
                    self finishExpansionWithEnvironment: environment
                } else: {
                    if: selectorValue == #=> then: {
                        self resultType: messageSendNode arguments first.
                        messageSendNode receiver
                    } else: {
                        self finishExpansionWithMessageSendNode: messageSendNode environment: environment
                    }
                }.
            } else: {
                self finishExpansionWithMessageSendNode: messageSendNode environment: environment
            }
        }.
    };
    withSelector: #":=" addMethod: {:self :(ASTNode)bodyNode :: ASTNode |
        <metaBuilder>
        self body: bodyNode.
        self continueExpanding
    };
    withSelector: #finishExpansionWithEnvironment: addMethod: {:self :environment :: ASTNode |
        let: #selfArgument with: (ASTArgumentNode new
            sourcePosition: self sourcePosition;
            isForAll: false;
            name: `'#self;
            type: `'SelfType;
            yourself).
        let: #arguments with: ((Array with: selfArgument) -- self arguments) asArraySlice.
        let: #methodNode with: (ASTLambdaNode new
            sourcePosition: self sourcePosition;
            arguments: arguments;
            body: self body;
            resultType: self resultType;
            yourself
        ).
        
        ``(__OwnerProgramEntity__ withSelector: `,(self selector) addMethod: `,methodNode)
    }.

let: #method with: (MetaBuilderFactory for: MethodMetaBuilder).

Type
    withSelector: #extend: addMacroMethod: {:macroContext :self :extensionBlock :: ASTNode |
        ``{
            let: #SelfType with: `,self.
            let: #__OwnerProgramEntity__ with: SelfType.
            `,extensionBlock
        }
    } makeMacro.

Object extend: {
    method testMethod => Void := {
        printLine(self, " testMethod").
    }.

    method testMethodWithArgument: arg ::=> Void := {
        printLine(self, " testMethodWithArgument: ", arg).
    }.

}.

Object new testMethod.
Object new testMethodWithArgument: 42.
