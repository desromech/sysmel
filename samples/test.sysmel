printLine("Hello World from Sysmel in Tuuvm").
printLine(Integer::+(42, 1)).

printLine(42 identityHash).
printLine(42 __type__).
printLine({}).
printLine({|}).
printLine({:x | x }).
printLine({:x :y | x + y}).
printLine({:x :y :: Int32 | x + y}).

printLine({:(Integer)x | x}(2)).
printLine({:(Integer)x :: Integer | x}(2)).

printLine(2 + 3).
printLine({:(Integer)x :(Integer)y | x + y }(2, 3)).
printLine({:(Integer)x :(Integer)y :: Integer | x + y }(2, 3)).

let: #x with: 3.
printLine(x).

printLine(42 + 1).

printLine(send(#+ , 42, 1)).

printLine(42).
printLine(42 printString).

let: #square with: {:(Int32)x :: Int32 | x*x}.
printLine(square).
printLine(square body expressions).
printLine(square sourcePosition).
printLine(square body sourcePosition).

printLine(#[]).
printLine(#[1]).
printLine(#[1 . 2 . 3]).
printLine((Array, ArraySlice)).

printLine(`'42).
printLine(``42).
printLine(``(`,(ASTSequenceNode new))).

printLine(0.0).
printLine(1.5 + 2.25).
printLine(0.0f32).
printLine(1.5f32 + 2.25f32).

let testValue := 42.
printLine(testValue).

Object extend: {
    __Meta__ definition: {
        public method testClassMethod := {
            printLine(self, " testClassMethod")
        }.
    }.

    public method testMethod => Void := {
        let localVar := 42.
        printLine(self, " testMethod ", localVar).
    }.

    public method testMethodWithArgument: arg ::=> Void := {
        printLine(self, " testMethodWithArgument: ", arg).
    }.
}.

Object testClassMethod.
Object new testMethod.
Object new testMethodWithArgument: 42.
printLine(Object lookupSelector: #testMethod, " ", (Object lookupSelector: #testMethod) hasPragmaNamed: #testPragma).

public class TestClass superclass: Object; definition: {
    public field testField.
    public method myTestMethod => Int32 := {
        42i32
    }.

    public pure method square: x
        := x*x.
}.
printLine(TestClass).
printLine(TestClass new myTestMethod).
printLine(2, " ", TestClass new square: 2).
