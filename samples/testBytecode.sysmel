#*
let bytecodes := FunctionBytecode new
    literalVector: #(42);
    argumentCount: 0sz;
    captureVectorSize: 0sz;
    localVectorSize: 0sz;
    instructions: #[
        FunctionBytecode::Opcode::Nop.
        FunctionBytecode::Opcode::Return. 2u8. 0u8.
    ];
    yourself.

printLine(bytecodes fullPrintString).
printLine(bytecodes asFunction ()).
*#

printLine({:n :y | {:x | x + n} (y) }(3, 2)).

(
    ({| 42}, #()),
    ({:c :a :b | if: c then: a else: b }, (false, 1, 2)),
    ({:x :y | if: x < y then: x else: y }, #(1 2)),
    ({:x | { x } }, #(3)),

    ({:(Int32)x :(Int32)y | x + y }, (3, 2)),
    ({:x :f | f(x) }, (3, {:x | "x: " -- x printString})),

    ({:n | {:x | x + n} }, #(3)),
    ({:n :y | {:x | x + n} (y) }, #(3 2)),

    ({| let x := 42. x }, #()),
    ({| let x mutable := 42. x := x + 5. x }, #()),
    ({:(Int32)n :: Int32 |
        let result mutable := 0i32.
        let i mutable := 0i32.
        while: (i < n) do: {
            result := result + (i*3i32)
        } continueWith: ( i := i + 1i32 ).
        result
    }, (Array with: 50i32)),

    ({:x :y | (x, 2, y)
    }, #(1 5))

) do: {:functionAndArguments :: Void |
    let function := functionAndArguments first.
    let arguments := functionAndArguments second.
    let compiledBytecodes := FunctionBytecodeDirectCompiler compileFunction: function.

    printLine(compiledBytecodes fullPrintString).
    printLine(arguments, " := ", apply(compiledBytecodes asFunction, arguments)).
}.
