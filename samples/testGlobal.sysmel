#*
public struct TestStruct definition: {
    public field intField => Int32.
    public field floatField => Float32.

    public nogc method sum => Float32
        := intField asFloat32 + floatField.
}.

public threadLocal myMutableGlobal mutable := 42i32.

public function increment() => Int32
    := myMutableGlobal := myMutableGlobal + 1i32.

printLine(increment()).
printLine(increment()).
printLine(increment()).

public nogc function makeStruct() => Int32 := {
    let s mutable := TestStruct basicNew.
    s sum asInt32
}.

public coldcc nogc function coldCCCalled(arg0: UIntPointer, arg1: UIntPointer) => Void := {
    increment()
}.

public nogc function coldCCCaller() => Void := {
    coldCCCalled(42uptr, 43uptr)
}.

public hotcc nogc function hotCCCalled(arg0: UIntPointer, arg1: UIntPointer) => Void := {
    increment()
}.

public hotcc nogc function hotCCCallingCold(arg0: UIntPointer, arg1: UIntPointer) => Void := {
    coldCCCalled(arg0, arg1)
}.

public nogc function hotCCCaller() => Void := {
    hotCCCalled(42uptr, 43uptr)
}.

let hirModule := HIRModuleCompilationContext forDefaultTarget
    exclusiveCompilationMode: true;
    compileFunctionsWithDefinitions: (hotCCCaller, hotCCCalled, hotCCCallingCold, coldCCCaller, coldCCCalled, increment);##(increment,); ##(makeStruct, TestStruct >> #sum); ##(increment, ExceptionSetjmpBuffer >> #setjmp, ExceptionSetjmpBuffer >> #longjmp);
    finish.

printLine(hirModule fullPrintString).
*#

public function testSwitch(v: Int32) => Float32 := {
    switch: v withCases: #{
        0i32 : 0f32.
        1i32 : 1f32.
        _: -1f32
    }.
}.

let hirModule := HIRModuleCompilationContext forDefaultTarget
    exclusiveCompilationMode: true;
    compileFunctionsWithDefinitions: (testSwitch,);
    finish.

printLine(hirModule fullPrintString).

let mirModule := hirModule asMIRModuleFor: AsmCompilationTarget x86_64 setForLinux asMirCompilationTarget.
##let mirModule := hirModule asMIRModuleFor: AsmCompilationTarget x86_64 setForWindows asMirCompilationTarget.
printLine(mirModule fullPrintString).

let lirModule := mirModule asTargetIR.
printLine(lirModule fullPrintString).

lirModule assemble writeObjectToFileNamed: "testGlobal.o".
