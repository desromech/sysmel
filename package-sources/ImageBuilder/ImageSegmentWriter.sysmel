public class ImageSegmentWriter definition: {
    public field objectTrace => ImageObjectTrace.
    public field segmentSize => UInt64.
    public field segmentAlignment => UInt64.
    public field segmentData => ByteArray.
    public field objectOffsetTable => Array.

    public virtual method serializeObjectTrace: (theObjectTrace: ImageObjectTrace) ::=> Void := {
        objectTrace := theObjectTrace.

        self computeObjectOffsets.
        segmentData := ByteArray new: segmentSize asSize.
        self writeObjects.
    }.

    public virtual method computeObjectOffsets => Void := {
        objectOffsetTable := Array new: objectTrace objectList size.
        segmentSize := 0u64.
        objectTrace objectList doWithIndex: {:(Untyped)object :(Size)index :: Void |
            let objectAlignment := self computeAlignmentOfObject: object.
            let objectSize := self computeSizeOfObject: object.
            let objectOffset := segmentSize alignedTo: objectAlignment.
            objectOffsetTable at: index put: objectOffset.
            segmentSize := objectOffset + objectSize.
            segmentAlignment := segmentAlignment max: objectAlignment
        }.

        segmentSize := segmentSize alignedTo: segmentAlignment.
    }.

    public virtual method writeObjects => Void := {
        objectTrace objectList doWithIndex: {:(Untyped)object :(Size)index :: Void |
            let offset => UInt64 := objectOffsetTable at: index.
            self writeObject: object atOffset: offset asSize
        }.
    }.

    public abstract method writeObject: (object: Untyped) atOffset: (offset: Size) ::=> Void
        := self subclassResponsibility.

    public abstract method computeAlignmentOfObject: (object: Untyped) ::=> UInt64
        := self subclassResponsibility.

    public abstract method computeSizeOfObject: (object: Untyped) ::=> UInt64
        := self subclassResponsibility.
}.
