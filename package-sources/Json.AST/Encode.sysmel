ASTNode extend: {
    public override method encodeAsJsonStyleObject
        := self subclassResponsibility.

    public override method encodeAsJsonString => String
        := self encodeAsJsonStyleObject encodeAsJsonString.
}.

ASTArgumentNode extend: {
    public override method encodeAsJsonStyleObject
        := #{
            kind: #ASTArgumentNode.
            sourcePosition: sourcePosition.
            analyzedType: analyzedType encodeAsJsonStyleObject.
            isForAll: isForAll.
            name: name encodeAsJsonStyleObject.
            type: type encodeAsJsonStyleObject.
            binding: binding encodeAsJsonStyleObject.
        }
}.

ASTFunctionApplicationNode extend: {
    public override method encodeAsJsonStyleObject
        := #{
            kind: #ASTFunctionApplicationNode.
            sourcePosition: sourcePosition.
            analyzedType: analyzedType encodeAsJsonStyleObject.
            functionExpression: functionExpression encodeAsJsonStyleObject.
            arguments: (arguments collect: {:(ASTNode)each | each encodeAsJsonStyleObject}).
            applicationFlags: applicationFlags.
        }
}.

ASTIdentifierReferenceNode extend: {
    public override method encodeAsJsonStyleObject
        := #{
            kind: #ASTIdentifierReferenceNode.
            sourcePosition: sourcePosition.
            analyzedType: analyzedType encodeAsJsonStyleObject.
            value: value.
            binding: binding encodeAsJsonStyleObject.
        }
}.

ASTLambdaNode extend: {
    public override method encodeAsJsonStyleObject => Dictionary
        := #{
            kind: #ASTLambdaNode.
            sourcePosition: sourcePosition.
            analyzedType: analyzedType encodeAsJsonStyleObject.
            name: name.
            flags: flags.
            callingConventionName: callingConventionName.
            arguments: (arguments collect: {:(ASTNode)each | each encodeAsJsonStyleObject}).
            resultType: resultType.
            body: body.
            hasLazyAnalysis: hasLazyAnalysis.
        }
}.

ASTLiteralNode extend: {
    public override method encodeAsJsonStyleObject
        := #{
            kind: #ASTLiteralNode.
            sourcePosition: sourcePosition.
            analyzedType: analyzedType encodeAsJsonStyleObject.
            value: ((RawTuple::type(self value) ifNil: Untyped) encodeAsJsonStyleObjectValue: self value).
        }
}.

ASTMessageSendNode extend: {
    public override method encodeAsJsonStyleObject
        := #{
            kind: #ASTMessageSendNode.
            sourcePosition: sourcePosition.
            analyzedType: analyzedType encodeAsJsonStyleObject.
            receiver: receiver encodeAsJsonStyleObject.
            receiverLookupType: receiverLookupType encodeAsJsonStyleObject.
            selector: selector encodeAsJsonStyleObject.
            arguments: (arguments collect: {:(ASTNode)each | each encodeAsJsonStyleObject}).
            isDynamic: isDynamic.
            applicationFlags: applicationFlags.
        }
}.

ASTSequenceNode extend: {
    public override method encodeAsJsonStyleObject
        := #{
            kind: #ASTSequenceNode.
            sourcePosition: sourcePosition.
            analyzedType: analyzedType encodeAsJsonStyleObject.
            expressions: (expressions collect: {:(ASTNode)each | each encodeAsJsonStyleObject}).
            pragmas: (pragmas collect: {:(ASTNode)each | each encodeAsJsonStyleObject}).
        }
}.

ASTUseNamedSlotsOfNode extend: {
    public override method encodeAsJsonStyleObject
        := #{
            kind: #ASTUseNamedSlotsOfNode.
            sourcePosition: sourcePosition.
            analyzedType: analyzedType encodeAsJsonStyleObject.
            tupleExpression: tupleExpression encodeAsJsonStyleObject.
        }
}.

ASTVariableDefinitionNode extend: {
    public override method encodeAsJsonStyleObject => Dictionary
        := #{
            kind: #ASTVariableDefinitionNode.
            sourcePosition: sourcePosition.
            analyzedType: analyzedType encodeAsJsonStyleObject.
            nameExpression: nameExpression encodeAsJsonStyleObject.
            valueExpression: valueExpression encodeAsJsonStyleObject.
            isMacroSymbol: isMacroSymbol.
            isMutable: isMutable.
            isPublic: isPublic.
            isExternal: isExternal.
            isThreadLocal: isThreadLocal.
            binding: binding encodeAsJsonStyleObject.
        }
}.

SymbolValueBinding extend: {
    public override method encodeAsJsonStyleObject => Dictionary
        := #{
            kind: #SymbolValueBinding.
            sourcePosition: sourcePosition.
            name: self name encodeAsJsonStyleObject.
            type: type encodeAsJsonStyleObject.
            isMutable: isMutable.
            isExternal: isExternal.
            isThreadLocal: isThreadLocal.
        }
}.

SymbolArgumentBinding extend: {
    public override method encodeAsJsonStyleObject => Dictionary
        := #{
            kind: #SymbolArgumentBinding.
            sourcePosition: sourcePosition.
            name: self name encodeAsJsonStyleObject.
            type: type encodeAsJsonStyleObject.
        }
}.

SymbolLocalBinding extend: {
    public override method encodeAsJsonStyleObject => Dictionary
        := #{
            kind: #SymbolLocalBinding.
            sourcePosition: sourcePosition.
            name: self name encodeAsJsonStyleObject.
            type: type encodeAsJsonStyleObject.
        }
}.

SymbolCaptureBinding extend: {
    public override method encodeAsJsonStyleObject => Dictionary
        := #{
            kind: #SymbolCaptureBinding.
            sourcePosition: sourcePosition.
            name: self name encodeAsJsonStyleObject.
            type: type encodeAsJsonStyleObject.
        }
}.
