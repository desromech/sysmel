SequenceableCollection definition: {
    public method beginsWith: (prefix: SequenceableCollection) ::=> Boolean := {
        let prefixSize := prefix size.
        if: self size < prefixSize then: {return: false}.

        let i mutable := 0sz.
        while: (i < prefixSize) do: {
            if: (self at: i) ~= (prefix at: i) then: {return: false}
        } continueWith: (i := i + 1sz).

        true
    }.

    public method endsWith: (suffix: SequenceableCollection) ::=> Boolean := {
        let suffixSize := suffix size.
        let size := self size.
        if: size < suffixSize then: {return: false}.

        let i mutable := 0sz.
        while: (i < suffixSize) do: {
            if: (self at: size - suffixSize + i) ~= (suffix at: i) then: {return: false}
        } continueWith: (i := i + 1sz).

        true
    }.

    public pure method withoutPrefix: (prefix: SequenceableCollection) ::=> self species
        := self allButFirst: ((self beginsWith: prefix) ifTrue: prefix size ifFalse: 0sz).

    public virtual pure method withoutSuffix: (suffix: SequenceableCollection) ::=> self species
        := self allButLast: ((self endsWith: suffix) ifTrue: suffix size ifFalse: 0sz).

    public override method addAllIntoOrderedCollection: (orderedCollection: OrderedCollection) ::=> Void :=  {
        orderedCollection ensureCapacityForAtLeast: self size.
        let size := self size.
        let i mutable := 0sz.
        while: (i < size) do: {
            orderedCollection add: (self at: i)
        } continueWith: (i := i + 1sz).
    }.

    public override method addAllIntoSet: (set: Set) ::=> Void :=  {
        let size := self size.
        let i mutable := 0sz.
        while: (i < size) do: {
            set add: (self at: i)
        } continueWith: (i := i + 1sz).
    }.

    public inline method reverseDo: aBlock ::=> Void := {
        let i mutable := 0sz,
        let size := self size.
        while: (i < size) do: {
            aBlock(self at: size - i - 1sz)
        } continueWith: (i := i + 1sz)
    }.
}.