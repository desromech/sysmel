ExceptionSetjmpBuffer definition: {
    public nogc method longjmp => Unwinds := {
        <primitive: #Exception::longjmp>
        printLine("TODO: ExceptionSetjmpBuffer longjmp").
        sysmel_pal_abort().
    }.
}.

ExceptionStackRecord __type__ definition: {
    public method unwindUntil: (targetRecord: ExceptionStackRecord pointer) ::=> Void := {
        let currentPosition mutable := ExceptionStackRecord::LastActive.
        while: (currentPosition isNotNil && (currentPosition ~~ targetRecord)) do: {
            let record := currentPosition.
            currentPosition := currentPosition _ previous.
            ExceptionStackRecord::LastActive := currentPosition.

            record _ isCleanUp ifTrue: {
                let cleanUpRecord := record reinterpretCastTo: ExceptionCleanUpActionStackRecord pointer.
                cleanUpRecord _ cleanUpAction()
            }
        }.
    }.

    public method findHandlerRecordFor: (exception: Exception) ::=> ExceptionOnDoStackRecord pointer := {
        let currentPosition mutable := ExceptionStackRecord::ActiveHandlerRecord
            ifNil: ExceptionStackRecord::LastActive
            ifNotNil: ExceptionStackRecord::ActiveHandlerRecord _ previous.

        while: (currentPosition isNotNil) do: {
            currentPosition _ isOnDo ifTrue: {
                let onDoRecord := currentPosition reinterpretCastTo: ExceptionOnDoStackRecord pointer.
                (onDoRecord _ exceptionFilter handlesException: exception) ifTrue: {
                    return: onDoRecord
                }
            }
        } continueWith: (currentPosition := currentPosition _ previous).

        nil
    }.
}.

Exception definition: {
    __Meta__ definition: {
        public method signal ::=> Unwinds
            := self new signal.

        public method signal: (messageText: String) ::=> Unwinds
            := self new messageText: messageText; signal
    }.

}.

Exception withSelector: #signal replaceMethod: {:(Exception)self :: Unwinds |
    let handlerRecord := ExceptionStackRecord findHandlerRecordFor: self.
    handlerRecord ifNil: {
        printLine(self).
        sysmel_pal_abort().
    } ifNotNil: {
        ExceptionStackRecord::ActiveHandlerRecord := handlerRecord.
        handlerRecord _ exceptionResult: handlerRecord _ exceptionBlock(self).
        ExceptionStackRecord::ActiveHandlerRecord := nil.
        ExceptionStackRecord unwindUntil: handlerRecord.
        
        ExceptionStackRecord::LastActive := handlerRecord _ previous.
        GCStackFrameRecord::LastActive := handlerRecord _ gcStackFrameRecord.
        (handlerRecord _ __slotNamedReferenceAt__: #setjmpBuffer) longjmp
    }.
}.

(Function::ensure:) adoptDefinitionOf: {:body :(() => Void)cleanUp :: AnyValue |
    <primitive: #Function::ensure: >

    ## Make the clean up stack record.
    let stackRecord mutable := ExceptionCleanUpActionStackRecord basicAllocate.
    stackRecord
        previous: ExceptionStackRecord::LastActive;
        kind: ExceptionStackRecord::Kind::CleanUp;
        cleanUpAction: cleanUp.
    ExceptionStackRecord::LastActive := stackRecord address.

    ## Evaluate the body.
    let result := body().
    
    ## Remove the clean up stack record.
    ExceptionStackRecord::LastActive := stackRecord previous.

    ## Execute the clean up action.
    cleanUp().

    ## Return the result.
    result
}.

(Function::on:do:) adoptDefinitionOf: {:self :exceptionFilter :exceptionBlock :: self __type__ canonicalResultType |
    <primitive: #Function::on:do: >

    ## Make the clean up stack record.
    let stackRecord mutable := ExceptionOnDoStackRecord basicAllocate.
    stackRecord
        previous: ExceptionStackRecord::LastActive;
        kind: ExceptionStackRecord::Kind::OnDo;
        exceptionFilter: exceptionFilter;
        exceptionBlock: exceptionBlock;
        gcStackFrameRecord: GCStackFrameRecord::LastActive.
    ExceptionStackRecord::LastActive := stackRecord address.

    ## Perform setjmp
    ## FIXME: Avoid this explicit __slotNamedReferenceAt__:
    (stackRecord __slotNamedReferenceAt__: #setjmpBuffer) setjmp ifFalse: {
        let result := self().
        ExceptionStackRecord::LastActive := stackRecord previous.
        result
    } ifTrue: {
        stackRecord exceptionResult
    }.
}.

error adoptDefinitionOf: {:(String)message :: Unwinds |
    Error signal: message.
    sysmel_pal_abort().
}.

primitiveFailedError adoptDefinitionOf: {:: Unwinds |
    Error signal: "Primitive failed".
    sysmel_pal_abort().
}.
