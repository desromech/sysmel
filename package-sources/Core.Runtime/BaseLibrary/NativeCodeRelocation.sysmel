public global NativeCodeRelocation::Addend::Size8 := 0u8.
public global NativeCodeRelocation::Addend::Size16 := 1u8.
public global NativeCodeRelocation::Addend::Size32 := 2u8.
public global NativeCodeRelocation::Addend::Size64 := 3u8.

public global NativeCodeRelocation::Type::None := 0u8.
public global NativeCodeRelocation::Type::Absolute := 1u8.
public global NativeCodeRelocation::Type::Relative := 2u8.
public global NativeCodeRelocation::Type::RelativePLT := 3u8.
public global NativeCodeRelocation::Type::RelativeGOT := 4u8.
public global NativeCodeRelocation::Type::SectionRelative := 5u8.
public global NativeCodeRelocation::Type::TPOffset := 6u8.

public global NativeCodeRelocation::Type::Absolute8 := NativeCodeRelocation::Type::Absolute | (NativeCodeRelocation::Addend::Size8 << 6u8).
public global NativeCodeRelocation::Type::Relative8 := NativeCodeRelocation::Type::Relative | (NativeCodeRelocation::Addend::Size8 << 6u8).
public global NativeCodeRelocation::Type::SectionRelative8 := NativeCodeRelocation::Type::SectionRelative | (NativeCodeRelocation::Addend::Size8 << 6u8).

public global NativeCodeRelocation::Type::Absolute16 := NativeCodeRelocation::Type::Absolute | (NativeCodeRelocation::Addend::Size16 << 6u8).
public global NativeCodeRelocation::Type::Relative16 := NativeCodeRelocation::Type::Relative | (NativeCodeRelocation::Addend::Size16 << 6u8).
public global NativeCodeRelocation::Type::SectionRelative16 := NativeCodeRelocation::Type::SectionRelative | (NativeCodeRelocation::Addend::Size16 << 6u8).

public global NativeCodeRelocation::Type::Absolute32 := NativeCodeRelocation::Type::Absolute | (NativeCodeRelocation::Addend::Size32 << 6u8).
public global NativeCodeRelocation::Type::Relative32 := NativeCodeRelocation::Type::Relative | (NativeCodeRelocation::Addend::Size32 << 6u8).
public global NativeCodeRelocation::Type::RelativePLT32 := NativeCodeRelocation::Type::RelativePLT | (NativeCodeRelocation::Addend::Size32 << 6u8).
public global NativeCodeRelocation::Type::RelativeGOT32 := NativeCodeRelocation::Type::RelativeGOT | (NativeCodeRelocation::Addend::Size32 << 6u8).
public global NativeCodeRelocation::Type::SectionRelative32 := NativeCodeRelocation::Type::SectionRelative | (NativeCodeRelocation::Addend::Size32 << 6u8).
public global NativeCodeRelocation::Type::TPOffset32 := NativeCodeRelocation::Type::TPOffset | (NativeCodeRelocation::Addend::Size32 << 6u8).

public global NativeCodeRelocation::Type::Absolute64 := NativeCodeRelocation::Type::Absolute | (NativeCodeRelocation::Addend::Size64 << 6u8).
public global NativeCodeRelocation::Type::Relative64 := NativeCodeRelocation::Type::Relative | (NativeCodeRelocation::Addend::Size64 << 6u8).
public global NativeCodeRelocation::Type::SectionRelative64 := NativeCodeRelocation::Type::SectionRelative | (NativeCodeRelocation::Addend::Size64 << 6u8).

public global NativeCodeRelocation::Type::NameTable := #{
    NativeCodeRelocation::Type::Absolute8 : #absolute8.
    NativeCodeRelocation::Type::Relative8 : #relative8.
    NativeCodeRelocation::Type::SectionRelative8 : #sectionRelative8.

    NativeCodeRelocation::Type::Absolute16 : #absolute16.
    NativeCodeRelocation::Type::Relative16 : #relative16.
    NativeCodeRelocation::Type::SectionRelative16 : #sectionRelative16.

    NativeCodeRelocation::Type::Absolute32 : #absolute32.
    NativeCodeRelocation::Type::Relative32 : #relative32.
    NativeCodeRelocation::Type::RelativePLT32 : #relativePlt32.
    NativeCodeRelocation::Type::RelativeGOT32 : #relativeGot32.
    NativeCodeRelocation::Type::SectionRelative32 : #sectionRelative32.
    NativeCodeRelocation::Type::TPOffset32 : #tpoffset32.

    NativeCodeRelocation::Type::Absolute64 : #absolute64.
    NativeCodeRelocation::Type::Relative64 : #relative64.
    NativeCodeRelocation::Type::SectionRelative64 : #sectionRelative64.
}.

NativeCodeRelocationTable definition: {
    public method decodedRelocationsDo: (aBlock: (UInt8, UInt32, UInt32, Int64) => Void) ::=> Void := {
        let encodedSize := self size.
        let position mutable := 0sz.

        while: position < encodedSize do: {
            let typeAndSymbolIndex := self uint32At: position.
            let type := typeAndSymbolIndex asUInt8.
            let symbolIndex := typeAndSymbolIndex >> 8u32.
            position := position + 4sz.

            let offset := self uint32At: position.
            position := position + 4sz.

            let addendSize := type >> 6u8.
            let addend mutable := 0i64.

            switch: addendSize withCases: #{
                NativeCodeRelocation::Addend::Size8 : {
                    addend := (self int8At: position) asInt64.
                    position := position + 1sz.
                }.
                NativeCodeRelocation::Addend::Size16 : {
                    addend := (self int16At: position) asInt64.
                    position := position + 2sz.
                }.
                NativeCodeRelocation::Addend::Size32 : {
                    addend := (self int32At: position) asInt64.
                    position := position + 4sz.
                }.
                NativeCodeRelocation::Addend::Size64 : {
                    addend := self int64At: position.
                    position := position + 8sz.
                }.
                _: {}
            }.


            aBlock(type, symbolIndex, offset, addend)
        }
    }.

    public method fullPrintOn: (stream: Stream) withSymbolTable: (symbolTable: NativeCodeSymbolTable) ::=> Void := {
        self decodedRelocationsDo: {:(UInt8)type :(UInt32)symbolIndex :(UInt32)offset :(Int64)addend :: Void |
            stream string: "  ".
            offset printHexOn: stream.
            stream space; string: (NativeCodeRelocation::Type::NameTable at: type);
                space; print: (symbolTable atOrNil: symbolIndex).
            addend ~= 0i64 ifTrue: (stream space; print: addend).
            stream nl
        }
    }.
}.

public final class NativeCodeRelocationEncoder superclass: Object; definition: {
    private field out => ByteStream.
    public field symbolDictionary => Dictionary.

    public override method initialize => Void := {
        out := ByteStream new.
    }.

    public method finish => NativeCodeRelocationTable := {
        out size = 0sz ifTrue: {
            return: nil
        }.

        let result => AnyValue := out asByteArray.
        (RawTuple::type:)(result, NativeCodeRelocationTable).
        result
    }.

    public method type: (type: UInt8) symbolIndex: (symbolIndex: UInt32) offset: (offset: UInt32) addend8: (addend: Int8)::=> Void := {
        self assert: (type >> 6u8) = NativeCodeRelocation::Addend::Size8.
        out nextPutUInt32: type asUInt32 | (symbolIndex << 8u32); nextPutUInt32: offset; nextPutInt8: addend
    }.

    public method type: (type: UInt8) symbolIndex: (symbolIndex: UInt32) offset: (offset: UInt32) addend16: (addend: Int16)::=> Void := {
        self assert: (type >> 6u8) = NativeCodeRelocation::Addend::Size16.
        out nextPutUInt32: type asUInt32 | (symbolIndex << 8u32); nextPutUInt32: offset; nextPutInt16: addend
    }.

    public method type: (type: UInt8) symbolIndex: (symbolIndex: UInt32) offset: (offset: UInt32) addend32: (addend: Int32)::=> Void := {
        self assert: (type >> 6u8) = NativeCodeRelocation::Addend::Size32.
        out nextPutUInt32: type asUInt32 | (symbolIndex << 8u32); nextPutUInt32: offset; nextPutInt32: addend
    }.

    public method type: (type: UInt8) symbolIndex: (symbolIndex: UInt32) offset: (offset: UInt32) addend64: (addend: Int64)::=> Void := {
        self assert: (type >> 6u8) = NativeCodeRelocation::Addend::Size64.
        out nextPutUInt32: type asUInt32 | (symbolIndex << 8u32); nextPutUInt32: offset; nextPutInt64: addend
    }.

    public method type: (type: UInt8) symbolIndex: (symbolIndex: UInt32) offset: (offset: UInt32) addend: (addend: Int64)::=> Void := {
        out nextPutUInt32: type asUInt32 | (symbolIndex << 8u32); nextPutUInt32: offset.

        let addendSize := type >> 6u8.
        switch: addendSize withCases: #{
        NativeCodeRelocation::Addend::Size8 : {
            out nextPutInt8: addend asInt8.
        }.
        NativeCodeRelocation::Addend::Size16 : {
            out nextPutInt16: addend asInt16.
        }.
        NativeCodeRelocation::Addend::Size32 : {
            out nextPutInt32: addend asInt32.
        }.
        NativeCodeRelocation::Addend::Size64 : {
            out nextPutInt64: addend.
        }.
        _: (self error: "Unsupported addend size.")
        }.
    }.
}.
