public global NativeCodeLocationList::OpcodeOperandSize::Size0 := 0u8.
public global NativeCodeLocationList::OpcodeOperandSize::Size1 := 1u8.
public global NativeCodeLocationList::OpcodeOperandSize::Size2 := 2u8.
public global NativeCodeLocationList::OpcodeOperandSize::Size4 := 3u8.

public global NativeCodeLocationList::Opcode::BeginNoInterval := 0u8.
public global NativeCodeLocationList::Opcode::BeginInterval := 1u8.
public global NativeCodeLocationList::Opcode::Register := 2u8.
public global NativeCodeLocationList::Opcode::FrameOffset := 3u8.
public global NativeCodeLocationList::Opcode::CaptureVectorOffset := 4u8.

public global NativeCodeLocationList::Opcode::BeginInterval8 := NativeCodeLocationList::Opcode::BeginInterval | (NativeCodeLocationList::OpcodeOperandSize::Size1 << 6u8).
public global NativeCodeLocationList::Opcode::BeginInterval16 := NativeCodeLocationList::Opcode::BeginInterval | (NativeCodeLocationList::OpcodeOperandSize::Size2 << 6u8).
public global NativeCodeLocationList::Opcode::BeginInterval32 := NativeCodeLocationList::Opcode::BeginInterval | (NativeCodeLocationList::OpcodeOperandSize::Size4 << 6u8).

public global NativeCodeLocationList::Opcode::Register8 := NativeCodeLocationList::Opcode::Register | (NativeCodeLocationList::OpcodeOperandSize::Size1 << 6u8).
public global NativeCodeLocationList::Opcode::Register16 := NativeCodeLocationList::Opcode::Register | (NativeCodeLocationList::OpcodeOperandSize::Size2 << 6u8).
public global NativeCodeLocationList::Opcode::Register32 := NativeCodeLocationList::Opcode::Register | (NativeCodeLocationList::OpcodeOperandSize::Size4 << 6u8).

public global NativeCodeLocationList::Opcode::FrameOffset8 := NativeCodeLocationList::Opcode::FrameOffset | (NativeCodeLocationList::OpcodeOperandSize::Size1 << 6u8).
public global NativeCodeLocationList::Opcode::FrameOffset16 := NativeCodeLocationList::Opcode::FrameOffset | (NativeCodeLocationList::OpcodeOperandSize::Size2 << 6u8).
public global NativeCodeLocationList::Opcode::FrameOffset32 := NativeCodeLocationList::Opcode::FrameOffset | (NativeCodeLocationList::OpcodeOperandSize::Size4 << 6u8).

public global NativeCodeLocationList::Opcode::CaptureVectorOffset8 := NativeCodeLocationList::Opcode::CaptureVectorOffset | (NativeCodeLocationList::OpcodeOperandSize::Size1 << 6u8).
public global NativeCodeLocationList::Opcode::CaptureVectorOffset16 := NativeCodeLocationList::Opcode::CaptureVectorOffset | (NativeCodeLocationList::OpcodeOperandSize::Size2 << 6u8).
public global NativeCodeLocationList::Opcode::CaptureVectorOffset32 := NativeCodeLocationList::Opcode::CaptureVectorOffset | (NativeCodeLocationList::OpcodeOperandSize::Size4 << 6u8).

public global NativeCodeLocationList::Opcode::NameTable := #{
    NativeCodeLocationList::Opcode::BeginNoInterval : #beginNoInterval.
    NativeCodeLocationList::Opcode::BeginInterval : #beginInterval.
    NativeCodeLocationList::Opcode::Register : #register.
    NativeCodeLocationList::Opcode::FrameOffset : #frameOffset.
    NativeCodeLocationList::Opcode::CaptureVectorOffset : #captureVectorOffset.
}.

NativeCodeLocationList definition: {
    public method decodedInstructionsDo: (aBlock: (Boolean, UInt32, UInt32, UInt8, Int32) => Void) ::=> Void := {
        let encodedSize := self size.
        let position mutable := 0sz.

        let hasInterval mutable := false.
        let intervalStartPC mutable := 0u32.
        let intervalEndPC mutable := 0u32.

        while: position < encodedSize do: {
            let opcode := self uint8At: position.
            let operation := opcode & 63u8.
            let operandSize := opcode >> 6u8.
            position := position + 1sz.

            operation = NativeCodeLocationList::Opcode::BeginNoInterval ifTrue: {
                hasInterval := false.
                continue()
            }.

            operation = NativeCodeLocationList::Opcode::BeginInterval ifTrue: {
                hasInterval := true.

                intervalStartPC := self uint32At: position.
                position := position + 4sz.

                intervalEndPC := self uint32At: position.
                position := position + 4sz.

                continue()
            }.

            let operand mutable := 0i32.
            switch: operandSize withCases: #{
            NativeCodeLocationList::OpcodeOperandSize::Size1 : {
                operand := (self int8At: position) asInt32.
                position := position + 1sz.
            }.
            NativeCodeLocationList::OpcodeOperandSize::Size2 : {
                operand := (self int16At: position) asInt32.
                position := position + 2sz.
            }.
            NativeCodeLocationList::OpcodeOperandSize::Size4 : {
                operand := self int32At: position.
                position := position + 4sz.
            }.
            _: {}
            }.

            aBlock(hasInterval, intervalStartPC, intervalEndPC, operation, operand)
        }
    }.
}.

public final class NativeCodeLocationListEncoder superclass: Object; definition: {
    private field out => ByteStream.

    public override method initialize => Void := {
        out := ByteStream new.
    }.

    public method beginWithIntervalStart: (startPC: UInt32) end: (endPC: UInt32) ::=> Void := {
        self assert: startPC < 16rFFFF_FFFF u32.
        out nextPutUInt8: NativeCodeLocationList::Opcode::BeginInterval; nextPutUInt32: startPC; nextPutUInt32: endPC
    }.

    public method beginWithoutInterval ::=> Void := {
        out nextPutUInt8: NativeCodeLocationList::Opcode::BeginNoInterval
    }.

    public method operation: (operation: UInt8) operand: (operand: Int32) ::=> Void := {
        operand = 0i32 ifTrue: {
            out nextPutUInt8: operation.
            return: void
        }.

        operand asInt8 asInt32 = operand ifTrue: {
            out nextPutUInt8: operation | (NativeCodeLocationList::OpcodeOperandSize::Size1 << 6u8); nextPutInt8: operand asInt8.
            return: void
        }.

        operand asInt16 asInt32 = operand ifTrue: {
            out nextPutUInt8: operation | (NativeCodeLocationList::OpcodeOperandSize::Size2 << 6u8); nextPutInt16: operand asInt16.
            return: void
        }.

        out nextPutUInt8: operation | (NativeCodeLocationList::OpcodeOperandSize::Size4 << 6u8); nextPutInt32: operand
    }.

    public method register: (register: Int32) ::=> Void
        := self operation: NativeCodeLocationList::Opcode::Register operand: register.

    public method frameOffset: (offset: Int32) ::=> Void
        := self operation: NativeCodeLocationList::Opcode::FrameOffset operand: offset.

    public method captureVectorOffset: (offset: Int32) ::=> Void
        := self operation: NativeCodeLocationList::Opcode::CaptureVectorOffset operand: offset.

    public method finish => NativeCodeLocationList := {
        out size = 0sz ifTrue: {
            return: nil
        }.

        let result => AnyValue := out asByteArray.
        (RawTuple::type:)(result, NativeCodeLocationList).
        result
    }.
}.
