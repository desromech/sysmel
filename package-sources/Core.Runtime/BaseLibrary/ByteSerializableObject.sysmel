public class ByteSerializableObject superclass: Object; definition: {
    __Meta__ extend: {
        public override method encodeValue: (value: Untyped) inBytes: (bytes: ByteArray) atOffset: (offset: Size) ::=> Void := {
            self ensureLayoutIsComputed.
            ObjectModel::isLogical() ifTrue: {
                self allSlotsDo: {:(TypeSlot)eachSlot :: Void |
                    eachSlot type encodeValueIn: value atTypeSlot: eachSlot inBytes: bytes atOffset: offset + eachSlot offset
                }
            } ifFalse: {
                memcpy(
                    (bytes __rawContentsBytePointer__ + offset asIntPointer) reinterpretCastTo: Void pointer,
                    value __untypedRawContentsBytePointer__ reinterpretCastTo: Void const pointer,
                    self validInstanceSize
                ).
            }.
        }.

        public override method decodeValueFromBytes: (bytes: ByteArray) atOffset: (offset: Size) ::=> self := {
            let result := self basicAllocate.
            self ensureLayoutIsComputed.

            self allSlotsDo: {:(TypeSlot)eachSlot :: Void |
                (RawTuple::typeSlotAt:put:)(result, eachSlot,
                    eachSlot type decodeValueFromBytes: bytes atOffset: offset + eachSlot offset
                )
            }.

            result
        }.
    }.

    public override method sizeOfByteEncoding => Size := self __type__ validInstanceSize. 
    public override method canEncodeInBytes => Boolean := true.
}.

public class ByteSerializablePackedObject superclass: Object; definition: {
    __Meta__ extend: {
        public override method encodeValue: (value: Untyped) inBytes: (bytes: ByteArray) atOffset: (offset: Size) ::=> Void := {
            let destOffset mutable := offset.

            self allSlotsDo: {:(TypeSlot)eachSlot :: Void |
                eachSlot type encodeValueIn: value atTypeSlot: eachSlot inBytes: bytes atOffset: offset + eachSlot offset.
                destOffset := destOffset + eachSlot type valueSize
            }
        }.

        public override method decodeValueFromBytes: (bytes: ByteArray) atOffset: (offset: Size) ::=> self := {
            let result := self basicAllocate.
            let sourceOffset mutable := offset.

            self allSlotsDo: {:(TypeSlot)eachSlot :: Void |
                (RawTuple::typeSlotAt:put:)(result, eachSlot,
                    eachSlot type decodeValueFromBytes: bytes atOffset: sourceOffset
                ).
                sourceOffset := sourceOffset + eachSlot type valueSize
            }.

            result
        }.

        public method validPackedInstanceSize => Size := {
            let result mutable := 0sz.

            self allSlotsDo: {:(TypeSlot)eachSlot :: Void |
                result := result + eachSlot type valueSize.
            }.

            result
        }.
    }.

    public override method sizeOfByteEncoding => Size := self class validPackedInstanceSize. 
    public override method canEncodeInBytes => Boolean := true.
}.
