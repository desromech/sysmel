public global FunctionBytecode::OpcodeExtraImplicitOperandCountTable := (ByteArray new: 256sz)
    at: FunctionBytecode::Opcode::Call put: 2u8;
    at: FunctionBytecode::Opcode::UncheckedCall put: 2u8;
    at: FunctionBytecode::Opcode::Send put: 3u8;
    at: FunctionBytecode::Opcode::SendWithLookup put: 4u8;

    at: FunctionBytecode::Opcode::MakeArrayWithElements put: 1u8;
    at: FunctionBytecode::Opcode::MakeByteArrayWithElements put: 1u8;
    at: FunctionBytecode::Opcode::MakeClosureWithCaptures put: 2u8;
    at: FunctionBytecode::Opcode::MakeDictionaryWithElements put: 1u8;
    at: FunctionBytecode::Opcode::MakeTupleWithElements put: 1u8;
    
    at: FunctionBytecode::Opcode::CaseJump put: 2sz;
    yourself.

public global FunctionBytecode::OpcodeDestinationOperandCountTable := (ByteArray new: 256sz)
    at: FunctionBytecode::Opcode::Nop put: 0u8;
    at: FunctionBytecode::Opcode::Breakpoint put: 0u8;
    at: FunctionBytecode::Opcode::Unreachable put: 0u8;

    at: FunctionBytecode::Opcode::Return put: 0u8;
    at: FunctionBytecode::Opcode::Jump put: 0u8;

    at: FunctionBytecode::Opcode::Alloca put: 1u8;
    at: FunctionBytecode::Opcode::Move put: 1u8;
    at: FunctionBytecode::Opcode::Load put: 1u8;
    at: FunctionBytecode::Opcode::LoadSymbolValueBinding put: 1u8;
    at: FunctionBytecode::Opcode::Store put: 0u8;
    at: FunctionBytecode::Opcode::JumpIfTrue put: 0u8;
    at: FunctionBytecode::Opcode::JumpIfFalse put: 0u8;
    at: FunctionBytecode::Opcode::SetDebugValue put: 0u8;

    at: FunctionBytecode::Opcode::AllocaWithValue put: 1u8;
    at: FunctionBytecode::Opcode::CoerceValue put: 1u8;
    at: FunctionBytecode::Opcode::DownCastValue put: 1u8;
    at: FunctionBytecode::Opcode::UncheckedDownCastValue put: 1u8;
    at: FunctionBytecode::Opcode::MakeAssociation put: 1u8;
    at: FunctionBytecode::Opcode::SlotAt put: 1u8;
    at: FunctionBytecode::Opcode::SlotReferenceAt put: 1u8;

    at: FunctionBytecode::Opcode::Call put: 1u8;
    at: FunctionBytecode::Opcode::UncheckedCall put: 1u8;
    at: FunctionBytecode::Opcode::Send put: 1u8;
    at: FunctionBytecode::Opcode::SendWithLookup put: 1u8;

    at: FunctionBytecode::Opcode::MakeArrayWithElements put: 1u8;
    at: FunctionBytecode::Opcode::MakeByteArrayWithElements put: 1u8;
    at: FunctionBytecode::Opcode::MakeClosureWithCaptures put: 1u8;
    at: FunctionBytecode::Opcode::MakeDictionaryWithElements put: 1u8;
    at: FunctionBytecode::Opcode::MakeTupleWithElements put: 1u8;
    
    at: FunctionBytecode::Opcode::CaseJump put: 0u8;
    yourself.

public global FunctionBytecode::OffsetOperandCountTable := (ByteArray new: 256sz)
    at: FunctionBytecode::Opcode::Jump put: 1u8;
    at: FunctionBytecode::Opcode::JumpIfTrue put: 1u8;
    at: FunctionBytecode::Opcode::JumpIfFalse put: 1u8;
    at: FunctionBytecode::Opcode::CaseJump put: 1u8;
    yourself.

public global FunctionBytecode::RegisterFileSize := 64sz.

FunctionBytecode definition: {
    public method interpretWithClosure: (closure: Function) arguments: (arguments: Array) ::=> Untyped := {
        let captureVector := closure captureVector.
        let localVectorSize := self localVectorSize.
        let localVector := Array new: localVectorSize.
        let literalVector := self literalVector.

        let decodedOperands mutable := Int16[FunctionBytecode::RegisterFileSize] basicNew.
        let registerFile := Array new: FunctionBytecode::RegisterFileSize.

        let pc mutable := 0sz.
        let instructions := self instructions.
        let instructionsSize := instructions size.
        let extensionCount mutable := 0sz.
        while: pc < instructionsSize do: {
            let opcode := instructions __uncheckedByteSlotAt__: pc.
            pc := pc + 1sz.

            opcode = FunctionBytecode::Opcode::CountExtension ifTrue: {
                let lowByte := instructions __uncheckedByteSlotAt__: pc.
                pc := pc + 1sz.

                let highByte := instructions __uncheckedByteSlotAt__: pc.
                pc := pc + 1sz.

                extensionCount := (extensionCount << 16sz) | (highByte asSize << 8sz) | lowByte asSize.
                continue()
            }.

            let caseCount mutable := 0sz.
            let operandCount mutable := 0sz.
            let standardOpcode mutable := opcode.
            let variantCount mutable := 0sz.
            opcode >= FunctionBytecode::Opcode::FirstVariable ifTrue: {
                operandCount := (extensionCount << 4sz) + (opcode & 16r0F u8) asSize.
                variantCount := operandCount.
                standardOpcode := opcode & 16rF0 u8.
                standardOpcode = FunctionBytecode::Opcode::CaseJump ifTrue: {
                    caseCount := operandCount.
                    operandCount := operandCount * 2sz
                }.

                operandCount := operandCount + (FunctionBytecode::OpcodeExtraImplicitOperandCountTable __uncheckedByteSlotAt__: standardOpcode asSize) asSize
            } ifFalse: {
                operandCount := opcode asSize >> 4sz.
            }.
            extensionCount := 0sz.

            ## Decode the operands.
            self assert: operandCount <= FunctionBytecode::RegisterFileSize.
            self assert: pc + (operandCount*2sz) <= instructionsSize.

            {
                let i mutable := 0sz.
                while: i < operandCount do: {
                    let lowByte := instructions __uncheckedByteSlotAt__: pc.
                    pc := pc + 1sz.

                    let highByte := instructions __uncheckedByteSlotAt__: pc.
                    pc := pc + 1sz.

                    decodedOperands at: i put: lowByte asInt16 | (highByte asInt16 << 8i16)
                } continueWith: (i := i + 1sz).
            }.

            ## Validate the destination operands.
            let destinationOperandCount := (FunctionBytecode::OpcodeDestinationOperandCountTable __uncheckedByteSlotAt__: standardOpcode asSize) asSize.
            let offsetOperandCount := caseCount + (FunctionBytecode::OffsetOperandCountTable __uncheckedByteSlotAt__: standardOpcode asSize) asSize.

            {
                let i mutable := 0sz.
                while: i < destinationOperandCount do: {
                    ((decodedOperands at: i) & FunctionBytecode::OperandVectorName::BitMask) = FunctionBytecode::OperandVectorName::Local ifFalse: {
                        self error: "Bytecode destination operands must be in the local vector."
                    }.

                    let operandIndex := (decodedOperands at: i) >> FunctionBytecode::OperandVectorName::Bits.
                    decodedOperands at: i put: operandIndex.
                    (operandIndex < 0i16) || (operandIndex asSize < localVectorSize) ifFalse: {
                        self error: "Bytecode destination operand is beyond the local vector bounds."
                    }
                } continueWith: (i := i + 1sz).
            }.

            ## Fetch the source operands.
            {
                let sourceOperandCount := operandCount - offsetOperandCount.
                let i mutable := destinationOperandCount.
                while: (i < sourceOperandCount) do: {
                    self assert: i < FunctionBytecode::RegisterFileSize.
                    let decodedOperand := decodedOperands at: i.
                    let vectorIndex := decodedOperand >> FunctionBytecode::OperandVectorName::Bits.
                    let vectorType := decodedOperand & FunctionBytecode::OperandVectorName::BitMask.
                    switch: vectorType withCases: #{
                        FunctionBytecode::OperandVectorName::Arguments : {
                            vectorIndex asSize < arguments size ifFalse: {
                                self error: "Bytecode operand is beyond the argument vector bounds."
                            }.

                            registerFile at: i put: (arguments at: vectorIndex asSize)
                        }.
                        FunctionBytecode::OperandVectorName::Captures : {
                            vectorIndex asSize < captures size ifFalse: {
                                self error: "Bytecode operand is beyond the capture vector bounds."
                            }.

                            registerFile at: i put: (captureVector at: vectorIndex asSize)
                        }.
                        FunctionBytecode::OperandVectorName::Literal : {
                            vectorIndex asSize < literalVector size ifFalse: {
                                self error: "Bytecode operand is beyond the literal vector bounds."
                            }.

                            registerFile at: i put: (literalVector at: vectorIndex asSize)
                        }.
                        FunctionBytecode::OperandVectorName::Local : {
                            vectorIndex asSize < localVectorSize ifFalse: {
                                self error: "Bytecode operand is beyond the literal vector bounds."
                            }.

                            registerFile at: i put: (localVector at: vectorIndex asSize)
                        }.
                        _: {self error: "Unsupported operand vector type"}
                    }
                } continueWith: (i := i + 1sz)
            }.

            let isBackwardBranch mutable := false.
            opcode < FunctionBytecode::Opcode::FirstVariable ifTrue: {
                switch: opcode withCases: #{

                ## Zero operands
                FunctionBytecode::Opcode::Nop : {}.
                FunctionBytecode::Opcode::Breakpoint : {halt()}.
                FunctionBytecode::Opcode::Unreachable : {self error: "Unreachable opcode."}.

                ## One operands
                FunctionBytecode::Opcode::Return : {
                    return: (registerFile __uncheckedSlotAt__: 0sz)
                }.
                FunctionBytecode::Opcode::Jump : {
                    let delta := decodedOperands at: 0sz.
                    isBackwardBranch := delta < 0i16.

                    pc := (pc asIntPointer + delta asIntPointer) asSize.
                }.

                ## Two operands.
                FunctionBytecode::Opcode::Alloca : {
                    let pointerLikeType => PointerLikeType := registerFile __uncheckedSlotAt__: 1sz.
                    registerFile __uncheckedSlotAt__: 0sz put: pointerLikeType withEmptyBox
                }.
                FunctionBytecode::Opcode::Load : {
                    let pointerLikeValue => Untyped := registerFile __uncheckedSlotAt__: 1sz.
                    let pointerLikeType := RawTuple::type(pointerLikeValue) downCastTo: PointerLikeType.
                    registerFile __uncheckedSlotAt__: 0sz put: pointerLikeType loadValueFunction(pointerLikeValue)
                }.
                FunctionBytecode::Opcode::LoadSymbolValueBinding : {
                    let symbolValueBinding => SymbolValueBinding := registerFile __uncheckedSlotAt__: 1sz.
                    registerFile __uncheckedSlotAt__: 0sz put: symbolValueBinding value
                }.
                FunctionBytecode::Opcode::Store : {
                    let pointerLikeValue => Untyped := registerFile __uncheckedSlotAt__: 0sz.
                    let pointerLikeType := RawTuple::type(pointerLikeValue) downCastTo: PointerLikeType.
                    pointerLikeType storeValueFunction(registerFile __uncheckedSlotAt__: 1sz)
                }.
                FunctionBytecode::Opcode::Move : {
                    registerFile __uncheckedSlotAt__: 0sz put: (registerFile __uncheckedSlotAt__: 1sz)
                }.

                FunctionBytecode::Opcode::JumpIfTrue : {
                    let condition := registerFile __uncheckedSlotAt__: 0sz.
                    condition ifTrue: {
                        let delta := decodedOperands at: 1sz.
                        isBackwardBranch := delta < 0i16.

                        pc := (pc asIntPointer + delta asIntPointer) asSize
                    }
                }.
                FunctionBytecode::Opcode::JumpIfFalse : {
                    let condition := registerFile __uncheckedSlotAt__: 0sz.
                    condition ifFalse: {
                        let delta := decodedOperands at: 1sz.
                        isBackwardBranch := delta < 0i16.

                        pc := (pc asIntPointer + delta asIntPointer) asSize
                    }
                }.
                FunctionBytecode::Opcode::SetDebugValue : {
                    ## Nothing is required here.
                }.
                FunctionBytecode::Opcode::SlotAt : {
                    let tuple => Untyped := registerFile __uncheckedSlotAt__: 1sz.
                    let typeSlot := registerFile __uncheckedSlotAt__: 2sz.
                    registerFile __uncheckedSlotAt__: 0sz put: (RawTuple::typeSlotAt:)(tuple, typeSlot)
                }.
                FunctionBytecode::Opcode::SlotReferenceAt : {
                    let tuple => Untyped := registerFile __uncheckedSlotAt__: 1sz.
                    let typeSlot := registerFile __uncheckedSlotAt__: 2sz.
                    self error: "TODO: Implement getting reference for slot."
                }.
                FunctionBytecode::Opcode::SlotAtPut : {
                    let tuple => Untyped := registerFile __uncheckedSlotAt__: 0sz.
                    let typeSlot := registerFile __uncheckedSlotAt__: 1sz.
                    let value => Untyped := registerFile __uncheckedSlotAt__: 2sz.
                    (RawTuple::typeSlotAt:put:)(tuple, typeSlot, value)
                }.
                FunctionBytecode::Opcode::RefSlotAt : {
                    let tuple => Untyped := registerFile __uncheckedSlotAt__: 1sz.
                    let typeSlot := registerFile __uncheckedSlotAt__: 2sz.
                    registerFile __uncheckedSlotAt__: 0sz put: (RawTuple::refTypeSlotAt:)(tuple, typeSlot)
                }.
                FunctionBytecode::Opcode::RefSlotReferenceAt : {
                    let tuple => Untyped := registerFile __uncheckedSlotAt__: 1sz.
                    let typeSlot := registerFile __uncheckedSlotAt__: 2sz.
                    self error: "TODO: Implement getting reference for slot."
                }.
                FunctionBytecode::Opcode::RefSlotAtPut : {
                    let tuple => Untyped := registerFile __uncheckedSlotAt__: 0sz.
                    let typeSlot := registerFile __uncheckedSlotAt__: 1sz.
                    let value => Untyped := registerFile __uncheckedSlotAt__: 2sz.
                    (RawTuple::refTypeSlotAt:put:)(tuple, typeSlot, value)
                }.

                ## Three operands
                FunctionBytecode::Opcode::AllocaWithValue : {
                    let pointerLikeType => PointerLikeType := registerFile __uncheckedSlotAt__: 1sz.
                    let value => Untyped := registerFile __uncheckedSlotAt__: 2sz.
                    registerFile __uncheckedSlotAt__: 0sz put: (pointerLikeType untypedWithBoxForValue: value)
                }.
                FunctionBytecode::Opcode::CoerceValue : {
                    let type => Type := registerFile __uncheckedSlotAt__: 1sz.
                    let value => Untyped := registerFile __uncheckedSlotAt__: 2sz.
                    registerFile __uncheckedSlotAt__: 0sz put: (type coerceValue: value)
                }.
                FunctionBytecode::Opcode::DownCastValue : {
                    let type => Type := registerFile __uncheckedSlotAt__: 1sz.
                    let value => Untyped := registerFile __uncheckedSlotAt__: 2sz.
                    ((RawTuple::type(value) ifNil: Untyped) isSubtypeOf: type) ifFalse: {
                        self error: "Expected a value whose type is " -- type printString
                    }.
                    registerFile __uncheckedSlotAt__: 0sz put: value
                }.
                FunctionBytecode::Opcode::UncheckedDownCastValue : {
                    registerFile __uncheckedSlotAt__: 0sz put: (registerFile __uncheckedSlotAt__: 2sz)
                }.
                FunctionBytecode::Opcode::MakeAssociation : {
                    let key := registerFile __uncheckedSlotAt__: 1sz.
                    let value := registerFile __uncheckedSlotAt__: 2sz.
                    registerFile __uncheckedSlotAt__: 0sz put: (Association key: key value: value)
                }.

                _: (self error: "Unsupported opcode " -- opcode asString)
                }
            } ifFalse: {
                switch: standardOpcode >> 4u8 withCases: #{
                (FunctionBytecode::Opcode::Call >> 4u8) : {
                    let function := registerFile __uncheckedSlotAt__: 1sz.
                    let arguments := registerFile copyFrom: 2sz count: variantCount.
                    let result := function applyWithArguments: arguments.
                    registerFile __uncheckedSlotAt__: 0sz put: result
                }.
                (FunctionBytecode::Opcode::UncheckedCall >> 4u8) : {
                    let function := registerFile __uncheckedSlotAt__: 1sz.
                    let arguments := registerFile copyFrom: 2sz count: variantCount.
                    let result := function applyWithArguments: arguments.
                    registerFile __uncheckedSlotAt__: 0sz put: result
                }.
                (FunctionBytecode::Opcode::Send >> 4u8) : {
                    let selector := registerFile __uncheckedSlotAt__: 1sz.
                    let receiver => Untyped := registerFile __uncheckedSlotAt__: 2sz.
                    let receiverType := RawTuple::type(receiver).
                    let foundMethod := receiverType lookupSelector: selector.
                    let result := foundMethod ifNotNil: {
                        let receiverWithArguments := registerFile copyFrom: 2sz count: 1sz + variantCount.
                        foundMethod applyWithArguments: receiverWithArguments
                    } ifNil: {
                        let doesNotUnderstand := receiverType lookupSelector: #doesNotUnderstand:.
                        doesNotUnderstand ifNil: {
                            self error: "Message " -- selector printString -- " not understood by " -- receiverType printString -- "."
                        }.
                        doesNotUnderstand(receiver, Message new
                            selector: selector;
                            arguments: (registerFile copyFrom: 3sz count: variantCount);
                            yourself
                        )
                    }.

                    registerFile __uncheckedSlotAt__: 0sz put: result
                }.
                (FunctionBytecode::Opcode::SendWithLookup >> 4u8) : {
                    let selector := registerFile __uncheckedSlotAt__: 1sz.
                    let receiverType => Type := registerFile __uncheckedSlotAt__: 2sz.
                    let foundMethod := receiverType lookupSelector: selector.
                    let result := foundMethod ifNotNil: {
                        let receiverWithArguments := registerFile copyFrom: 3sz count: 1sz + variantCount.
                        foundMethod applyWithArguments: receiverWithArguments
                    } ifNil: {
                        let doesNotUnderstand := receiverType lookupSelector: #doesNotUnderstand:.
                        doesNotUnderstand ifNil: {
                            self error: "Message " -- selector printString -- " not understood by " -- receiverType printString -- "."
                        }.
                        
                        let receiver => Untyped := registerFile __uncheckedSlotAt__: 3sz.
                        doesNotUnderstand(receiver, Message new
                            selector: selector;
                            arguments: (registerFile copyFrom: 4sz count: variantCount);
                            yourself
                        )
                    }.

                    registerFile __uncheckedSlotAt__: 0sz put: result
                }.
                (FunctionBytecode::Opcode::MakeArrayWithElements >> 4u8) : {
                    let result := Array basicNew: variantCount.
                    let i mutable := 0sz.
                    while: (i < variantCount) do: {
                        result __uncheckedSlotAt__: i put: (registerFile __uncheckedSlotAt__: 1sz + i)
                    } continueWith: (i := i + 1sz).
                    registerFile __uncheckedSlotAt__: 0sz put: result
                }.
                (FunctionBytecode::Opcode::MakeByteArrayWithElements >> 4u8) : {
                    let result := ByteArray basicNew: variantCount.
                    let i mutable := 0sz.
                    while: (i < variantCount) do: {
                        result __uncheckedByteSlotAt__: i put: (registerFile __uncheckedSlotAt__: 1sz + i)
                    } continueWith: (i := i + 1sz).
                    registerFile __uncheckedSlotAt__: 0sz put: result
                }.
                (FunctionBytecode::Opcode::MakeClosureWithCaptures >> 4u8) : {
                    let functionDefinition => FunctionDefinition := registerFile __uncheckedSlotAt__: 1sz.
                    functionDefinition ensureAnalysis.

                    let captureVector => AnySequenceTuple := functionDefinition captureVectorType new.
                    let i mutable := 0sz.
                    while: (i < variantCount) do: {
                        captureVector at: i put: (registerFile __uncheckedSlotAt__: 1sz + i)
                    } continueWith: (i := i + 1sz).

                    let closure := Function new.
                    closure __type__: functionDefinition type.
                    closure setupWithFunctionDefinition: functionDefinition captureVector: captureVector.

                    registerFile __uncheckedSlotAt__: 0sz put: closure
                }.
                (FunctionBytecode::Opcode::MakeDictionaryWithElements >> 4u8) : {
                    let result := Dictionary new: variantCount.
                    let i mutable := 0sz.
                    while: (i < variantCount) do: {
                        result add: (registerFile __uncheckedSlotAt__: 1sz + i)
                    } continueWith: (i := i + 1sz).
                    registerFile __uncheckedSlotAt__: 0sz put: result
                }.
                _: (self error: "Unsupported variable opcode " -- standardOpcode asString)
                }
            }.

            ## Write back the destinations.
            {
                let i mutable := 0sz.
                while: i < destinationOperandCount do: {
                    let vectorIndex := decodedOperands at: i.
                    vectorIndex < 0i16 ifTrue: {
                        continue()
                    }.

                    vectorIndex asSize < localVectorSize ifFalse: {
                        self error: "Bytecode destination operand is beyond the local vector bounds."
                    }.

                    localVector __uncheckedSlotAt__: vectorIndex asSize put: (registerFile __uncheckedSlotAt__: i)
                } continueWith: (i := i + 1sz)
            }
        }.

        self error: "End of instructions reached."
    }
}.
