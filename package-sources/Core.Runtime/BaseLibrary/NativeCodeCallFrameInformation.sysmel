public global NativeCodeCallFrameInformation::OpcodeOperandSize::Size0 := 0u8.
public global NativeCodeCallFrameInformation::OpcodeOperandSize::Size1 := 1u8.
public global NativeCodeCallFrameInformation::OpcodeOperandSize::Size2 := 2u8.
public global NativeCodeCallFrameInformation::OpcodeOperandSize::Size4 := 3u8.

public global NativeCodeCallFrameInformation::OpcodeHasRegisterFlag := 1u8 << 5u8.

public global NativeCodeCallFrameInformation::Opcode::AdvancePC := 0u8.
public global NativeCodeCallFrameInformation::Opcode::EndPrologue := 1u8.
public global NativeCodeCallFrameInformation::Opcode::BeginEpilogue := 2u8.
public global NativeCodeCallFrameInformation::Opcode::EndEpilogue := 3u8.
public global NativeCodeCallFrameInformation::Opcode::PushRegister := 4u8.
public global NativeCodeCallFrameInformation::Opcode::PopRegister := 5u8.
public global NativeCodeCallFrameInformation::Opcode::RestoreFramePointer := 6u8.
public global NativeCodeCallFrameInformation::Opcode::SaveFramePointer := 7u8.
public global NativeCodeCallFrameInformation::Opcode::StackSizeAdvance := 8u8.

public global NativeCodeCallFrameInformation::Opcode::NameTable := #{
    NativeCodeCallFrameInformation::Opcode::AdvancePC : #advancePC.
    NativeCodeCallFrameInformation::Opcode::EndPrologue : #endPrologue.
    NativeCodeCallFrameInformation::Opcode::BeginEpilogue : #beginEpilogue.
    NativeCodeCallFrameInformation::Opcode::EndEpilogue : #endEpilogue.
    NativeCodeCallFrameInformation::Opcode::PushRegister : #pushRegister.
    NativeCodeCallFrameInformation::Opcode::PopRegister : #popRegister.
    NativeCodeCallFrameInformation::Opcode::RestoreFramePointer : #restoreFramePointer.
    NativeCodeCallFrameInformation::Opcode::SaveFramePointer : #saveFramePointer.
    NativeCodeCallFrameInformation::Opcode::StackSizeAdvance : #stackSizeAdvance.
}.

NativeCodeCallFrameInformation definition: {
    public method startAddress => UInt32
        := self uint32At: 0sz.

    public method startAddress: (newStartAddress: UInt32) ::=> Void := {
        self uint32At: 0sz put: newStartAddress
    }.

    public method addressRange => UInt32
        := self uint32At: 4sz.

    public method addressRange: (newAddressRange: UInt32) ::=> Void := {
        self uint32At: 4sz put: newAddressRange
    }.

    public method incrementAddressBy: (increment: Int32) ::=> Void := {
        self uint32At: 0sz put: (self uint32At: 0sz) + increment asUInt32
    }.

    public method decodedInstructionsDo: (aBlock: (UInt8, UInt8, Int32) => Void) ::=> Void := {
        let encodedSize := self size.
        let position mutable := 8sz.

        let hasInterval mutable := false.
        let intervalStartPC mutable := 0u32.
        let intervalEndPC mutable := 0u32.

        while: position < encodedSize do: {
            let opcode := self uint8At: position.
            let operation := opcode & 31u8.
            let operandSize := opcode >> 6u8.
            let hasRegister := (opcode & NativeCodeCallFrameInformation::OpcodeHasRegisterFlag) ~= 0u8.
            let register mutable := 0u8,
            position := position + 1sz.

            hasRegister ifTrue: {
                register := self uint8At: position.
                position := position + 1sz
            }.

            let operand mutable := 0i32.
            switch: operandSize withCases: #{
            NativeCodeCallFrameInformation::OpcodeOperandSize::Size1 : {
                operand := (self int8At: position) asInt32.
                position := position + 1sz
            }.
            NativeCodeCallFrameInformation::OpcodeOperandSize::Size2 : {
                operand := (self int16At: position) asInt32.
                position := position + 2sz
            }.
            NativeCodeCallFrameInformation::OpcodeOperandSize::Size4 : {
                operand := self int32At: position.
                position := position + 4sz
            }.
            _: {}
            }.

            aBlock(operation, register, operand)
        }
    }.
}.

public final class NativeCodeCallFrameInformationEncoder superclass: Object; definition: {
    private field out => ByteStream.
    public field address => UInt32.

    public override method initialize => Void := {
        out := ByteStream new.
    }.

    public method startAddress: (startAddress: UInt32) range: (range: UInt32) ::=> Void := {
        out nextPutUInt32: startAddress; nextPutUInt32: range.
        address := startAddress.
    }.

    public method operation: (operation: UInt8) register: (register: UInt8) operand: (operand: Int32) ::=> Void := {
        let hasRegisterFlag := (register ~= 0u8)
            ifTrue: NativeCodeCallFrameInformation::OpcodeHasRegisterFlag
            ifFalse: 0u8.

        operand = 0i32 ifTrue: {
            out nextPutUInt8: operation | hasRegisterFlag.
            register ~= 0u8 ifTrue: {
                out nextPutUInt8: register.
            }.
            return: void
        }.

        operand asInt8 asInt32 = operand ifTrue: {
            out nextPutUInt8: operation | hasRegisterFlag | (NativeCodeCallFrameInformation::OpcodeOperandSize::Size1 << 6u8).
            register ~= 0u8 ifTrue: {
                out nextPutUInt8: register.
            }.
            out nextPutInt8: operand asInt8.
            return: void
        }.

        operand asInt16 asInt32 = operand ifTrue: {
            out nextPutUInt8: operation | hasRegisterFlag | (NativeCodeCallFrameInformation::OpcodeOperandSize::Size2 << 6u8).
            register ~= 0u8 ifTrue: {
                out nextPutUInt8: register.
            }.
            out nextPutInt16: operand asInt16.
            return: void
        }.

        out nextPutUInt8: operation | hasRegisterFlag | (NativeCodeCallFrameInformation::OpcodeOperandSize::Size4 << 6u8).
        register ~= 0u8 ifTrue: {
            out nextPutUInt8: register.
        }.
        out nextPutInt32: operand
    }.

    public method operation: (operation: UInt8) register: (register: UInt8) ::=> Void
        := self operation: operation register: register operand: 0i32.

    public method operation: (operation: UInt8) operand: (operand: Int32) ::=> Void
        := self operation: operation register: 0u8 operand: operand.

    public method operation: (operation: UInt8) ::=> Void
        := self operation: operation register: 0u8 operand: 0i32.

    public method setAddress: (newAddress: UInt32) ::=> Void := {
        self assert: address <= newAddress.
        let advance := newAddress - address.
        advance ~= 0u32 ifTrue: {
            self operation: NativeCodeCallFrameInformation::Opcode::AdvancePC operand: advance asInt32
        }
    }.

    public method endPrologue => Void
        := self operation: NativeCodeCallFrameInformation::Opcode::EndPrologue.

    public method beginEpilogue => Void
        := self operation: NativeCodeCallFrameInformation::Opcode::BeginEpilogue.

    public method endEpilogue => Void
        := self operation: NativeCodeCallFrameInformation::Opcode::EndEpilogue.

    public method pushRegister: (register: UInt8) ::=> Void
        := self operation: NativeCodeCallFrameInformation::Opcode::PushRegister register: register.

    public method popRegister: (register: UInt8) ::=> Void
        := self operation: NativeCodeCallFrameInformation::Opcode::PopRegister register: register.

    public method restoreFramePointer: (register: UInt8) offset: (offset: Int32) ::=> Void
        := self operation: NativeCodeCallFrameInformation::Opcode::RestoreFramePointer register: register operand: offset.

    public method saveFramePointer: (register: UInt8) offset: (offset: Int32) ::=> Void
        := self operation: NativeCodeCallFrameInformation::Opcode::SaveFramePointer register: register operand: offset.

    public method stackSizeAdvance: (advance: Int32) ::=> Void
        := self operation: NativeCodeCallFrameInformation::Opcode::StackSizeAdvance operand: advance.

    public method finish => NativeCodeCallFrameInformation := {
        out size = 0sz ifTrue: {
            return: nil
        }.

        let result => AnyValue := out asByteArray.
        (RawTuple::type:)(result, NativeCodeCallFrameInformation).
        result
    }.
}.
