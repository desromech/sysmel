public global NativeCodeCallFrameInformation::OpcodeOperandSize::Size0 := 0u8.
public global NativeCodeCallFrameInformation::OpcodeOperandSize::Size1 := 1u8.
public global NativeCodeCallFrameInformation::OpcodeOperandSize::Size2 := 2u8.
public global NativeCodeCallFrameInformation::OpcodeOperandSize::Size4 := 3u8.

public global NativeCodeCallFrameInformation::OpcodeHasRegisterFlag := 1u8 << 5u8.

public global NativeCodeCallFrameInformation::Opcode::AdvancePC := 0u8.
public global NativeCodeCallFrameInformation::Opcode::EndPrologue := 1u8.
public global NativeCodeCallFrameInformation::Opcode::BeginEpilogue := 2u8.
public global NativeCodeCallFrameInformation::Opcode::EndEpilogue := 3u8.
public global NativeCodeCallFrameInformation::Opcode::PushRegister := 4u8.
public global NativeCodeCallFrameInformation::Opcode::PopRegister := 5u8.
public global NativeCodeCallFrameInformation::Opcode::RestoreFramePointer := 6u8.
public global NativeCodeCallFrameInformation::Opcode::SaveFramePointer := 7u8.
public global NativeCodeCallFrameInformation::Opcode::StackSizeAdvance := 8u8.

public global NativeCodeCallFrameInformation::Opcode::NameTable := #{
    NativeCodeCallFrameInformation::Opcode::AdvancePC : #advancePC.
    NativeCodeCallFrameInformation::Opcode::EndPrologue : #endPrologue.
    NativeCodeCallFrameInformation::Opcode::BeginEpilogue : #beginEpilogue.
    NativeCodeCallFrameInformation::Opcode::EndEpilogue : #endEpilogue.
    NativeCodeCallFrameInformation::Opcode::PushRegister : #pushRegister.
    NativeCodeCallFrameInformation::Opcode::PopRegister : #popRegister.
    NativeCodeCallFrameInformation::Opcode::RestoreFramePointer : #restoreFramePointer.
    NativeCodeCallFrameInformation::Opcode::SaveFramePointer : #saveFramePointer.
    NativeCodeCallFrameInformation::Opcode::StackSizeAdvance : #stackSizeAdvance.
}.

public global NativeCodeLocationList::OpcodeOperandSize::Size0 := 0u8.
public global NativeCodeLocationList::OpcodeOperandSize::Size1 := 1u8.
public global NativeCodeLocationList::OpcodeOperandSize::Size2 := 2u8.
public global NativeCodeLocationList::OpcodeOperandSize::Size4 := 3u8.

public global NativeCodeLocationList::Opcode::BeginNoInterval := 0u8.
public global NativeCodeLocationList::Opcode::BeginInterval := 1u8.
public global NativeCodeLocationList::Opcode::Register := 2u8.
public global NativeCodeLocationList::Opcode::FrameOffset := 3u8.
public global NativeCodeLocationList::Opcode::CaptureVectorOffset := 4u8.

public global NativeCodeLocationList::Opcode::BeginInterval8 := NativeCodeLocationList::Opcode::BeginInterval | (NativeCodeLocationList::OpcodeOperandSize::Size1 << 6u8).
public global NativeCodeLocationList::Opcode::BeginInterval16 := NativeCodeLocationList::Opcode::BeginInterval | (NativeCodeLocationList::OpcodeOperandSize::Size2 << 6u8).
public global NativeCodeLocationList::Opcode::BeginInterval32 := NativeCodeLocationList::Opcode::BeginInterval | (NativeCodeLocationList::OpcodeOperandSize::Size4 << 6u8).

public global NativeCodeLocationList::Opcode::Register8 := NativeCodeLocationList::Opcode::Register | (NativeCodeLocationList::OpcodeOperandSize::Size1 << 6u8).
public global NativeCodeLocationList::Opcode::Register16 := NativeCodeLocationList::Opcode::Register | (NativeCodeLocationList::OpcodeOperandSize::Size2 << 6u8).
public global NativeCodeLocationList::Opcode::Register32 := NativeCodeLocationList::Opcode::Register | (NativeCodeLocationList::OpcodeOperandSize::Size4 << 6u8).

public global NativeCodeLocationList::Opcode::FrameOffset8 := NativeCodeLocationList::Opcode::FrameOffset | (NativeCodeLocationList::OpcodeOperandSize::Size1 << 6u8).
public global NativeCodeLocationList::Opcode::FrameOffset16 := NativeCodeLocationList::Opcode::FrameOffset | (NativeCodeLocationList::OpcodeOperandSize::Size2 << 6u8).
public global NativeCodeLocationList::Opcode::FrameOffset32 := NativeCodeLocationList::Opcode::FrameOffset | (NativeCodeLocationList::OpcodeOperandSize::Size4 << 6u8).

public global NativeCodeLocationList::Opcode::CaptureVectorOffset8 := NativeCodeLocationList::Opcode::CaptureVectorOffset | (NativeCodeLocationList::OpcodeOperandSize::Size1 << 6u8).
public global NativeCodeLocationList::Opcode::CaptureVectorOffset16 := NativeCodeLocationList::Opcode::CaptureVectorOffset | (NativeCodeLocationList::OpcodeOperandSize::Size2 << 6u8).
public global NativeCodeLocationList::Opcode::CaptureVectorOffset32 := NativeCodeLocationList::Opcode::CaptureVectorOffset | (NativeCodeLocationList::OpcodeOperandSize::Size4 << 6u8).

public global NativeCodeLocationList::Opcode::NameTable := #{
    NativeCodeLocationList::Opcode::BeginNoInterval : #beginNoInterval.
    NativeCodeLocationList::Opcode::BeginInterval : #beginInterval.
    NativeCodeLocationList::Opcode::Register : #register.
    NativeCodeLocationList::Opcode::FrameOffset : #frameOffset.
    NativeCodeLocationList::Opcode::CaptureVectorOffset : #captureVectorOffset.
}.

public global NativeCodeRelocation::Addend::Size8 := 0u8.
public global NativeCodeRelocation::Addend::Size16 := 1u8.
public global NativeCodeRelocation::Addend::Size32 := 2u8.
public global NativeCodeRelocation::Addend::Size64 := 3u8.

public global NativeCodeRelocation::Type::None := 0u8.
public global NativeCodeRelocation::Type::Absolute := 1u8.
public global NativeCodeRelocation::Type::Relative := 2u8.
public global NativeCodeRelocation::Type::RelativePLT := 3u8.
public global NativeCodeRelocation::Type::RelativeGOT := 4u8.
public global NativeCodeRelocation::Type::SectionRelative := 5u8.
public global NativeCodeRelocation::Type::TPOffset := 6u8.

public global NativeCodeRelocation::Type::Absolute8 := NativeCodeRelocation::Type::Absolute | (NativeCodeRelocation::Addend::Size8 << 6u8).
public global NativeCodeRelocation::Type::Relative8 := NativeCodeRelocation::Type::Relative | (NativeCodeRelocation::Addend::Size8 << 6u8).
public global NativeCodeRelocation::Type::SectionRelative8 := NativeCodeRelocation::Type::SectionRelative | (NativeCodeRelocation::Addend::Size8 << 6u8).

public global NativeCodeRelocation::Type::Absolute16 := NativeCodeRelocation::Type::Absolute | (NativeCodeRelocation::Addend::Size16 << 6u8).
public global NativeCodeRelocation::Type::Relative16 := NativeCodeRelocation::Type::Relative | (NativeCodeRelocation::Addend::Size16 << 6u8).
public global NativeCodeRelocation::Type::SectionRelative16 := NativeCodeRelocation::Type::SectionRelative | (NativeCodeRelocation::Addend::Size16 << 6u8).

public global NativeCodeRelocation::Type::Absolute32 := NativeCodeRelocation::Type::Absolute | (NativeCodeRelocation::Addend::Size32 << 6u8).
public global NativeCodeRelocation::Type::Relative32 := NativeCodeRelocation::Type::Relative | (NativeCodeRelocation::Addend::Size32 << 6u8).
public global NativeCodeRelocation::Type::RelativePLT32 := NativeCodeRelocation::Type::RelativePLT | (NativeCodeRelocation::Addend::Size32 << 6u8).
public global NativeCodeRelocation::Type::RelativeGOT32 := NativeCodeRelocation::Type::RelativeGOT | (NativeCodeRelocation::Addend::Size32 << 6u8).
public global NativeCodeRelocation::Type::SectionRelative32 := NativeCodeRelocation::Type::SectionRelative | (NativeCodeRelocation::Addend::Size32 << 6u8).
public global NativeCodeRelocation::Type::TPOffset32 := NativeCodeRelocation::Type::TPOffset | (NativeCodeRelocation::Addend::Size32 << 6u8).

public global NativeCodeRelocation::Type::Absolute64 := NativeCodeRelocation::Type::Absolute | (NativeCodeRelocation::Addend::Size64 << 6u8).
public global NativeCodeRelocation::Type::Relative64 := NativeCodeRelocation::Type::Relative | (NativeCodeRelocation::Addend::Size64 << 6u8).
public global NativeCodeRelocation::Type::SectionRelative64 := NativeCodeRelocation::Type::SectionRelative | (NativeCodeRelocation::Addend::Size64 << 6u8).

public global NativeCodeRelocation::Type::NameTable := #{
    NativeCodeRelocation::Type::Absolute8 : #absolute8.
    NativeCodeRelocation::Type::Relative8 : #relative8.
    NativeCodeRelocation::Type::SectionRelative8 : #sectionRelative8.

    NativeCodeRelocation::Type::Absolute16 : #absolute16.
    NativeCodeRelocation::Type::Relative16 : #relative16.
    NativeCodeRelocation::Type::SectionRelative16 : #sectionRelative16.

    NativeCodeRelocation::Type::Absolute32 : #absolute32.
    NativeCodeRelocation::Type::Relative32 : #relative32.
    NativeCodeRelocation::Type::RelativePLT32 : #relativePlt32.
    NativeCodeRelocation::Type::RelativeGOT32 : #relativeGot32.
    NativeCodeRelocation::Type::SectionRelative32 : #sectionRelative32.
    NativeCodeRelocation::Type::TPOffset32 : #tpoffset32.

    NativeCodeRelocation::Type::Absolute64 : #absolute64.
    NativeCodeRelocation::Type::Relative64 : #relative64.
    NativeCodeRelocation::Type::SectionRelative64 : #sectionRelative64.
}.

public global NativeCodeSection::Flags::Executable := 1u32 << 0u32.
public global NativeCodeSection::Flags::Writeable := 1u32 << 1u32.
public global NativeCodeSection::Flags::Readable := 1u32 << 2u32.
public global NativeCodeSection::Flags::Loaded := 1u32 << 3u32.
public global NativeCodeSection::Flags::NoBits := 1u32 << 4u32.
public global NativeCodeSection::Flags::Tls := 1u32 << 5u32.

public global NativeCodeSymbol::Visibility::NameTable := #(private internal public weak).
public global NativeCodeSymbol::Visibility::Private := 0u8.
public global NativeCodeSymbol::Visibility::Internal := 1u8.
public global NativeCodeSymbol::Visibility::Public := 2u8.
public global NativeCodeSymbol::Visibility::Weak := 3u8.

public global NativeCodeSymbol::Type::NameTable := #(none function variable section tls gc gcfat).
public global NativeCodeSymbol::Type::None := 0u8.
public global NativeCodeSymbol::Type::Function := 1u8.
public global NativeCodeSymbol::Type::Variable := 2u8.
public global NativeCodeSymbol::Type::Section := 3u8.
public global NativeCodeSymbol::Type::TLS := 4u8.
public global NativeCodeSymbol::Type::GCPointerTable := 5u8.
public global NativeCodeSymbol::Type::GCFatPointerTable := 6u8.

NativeCode definition: {
    public override method initialize => Void := {
        symbolTable := NativeCodeSymbolTable new.
        sections := #().
    }.

    public method findNativeCodeDefinitionFor: (definition: FunctionDefinition) ::=> FunctionNativeCodeDefinition := {
        functionDefinitionsEntryPoints ifNil: {return: nil}.

        let i mutable := 0sz.
        while: i < functionDefinitionsEntryPoints size do: {
            let entryPoint => FunctionNativeCodeDefinition := functionDefinitionsEntryPoints at: i.
            entryPoint definition == definition ifTrue: {
                return: entryPoint
            }
        } continueWith: (i := i + 1sz).
        nil
    }.

    public override method fullPrintOn: (stream: Stream) ::=> Void := {
        stream string: "Sections:"; nl.
        sections do: {:(NativeCodeSection)eachSection :: Void |
            stream fullPrint: eachSection; nl
        }.

        stream string: "Symbol table:"; nl.
        stream fullPrint: symbolTable.
    }.
}.

NativeCodeCallFrameInformation definition: {
    public method startAddress => UInt32
        := self uint32At: 0sz.

    public method startAddress: (newStartAddress: UInt32) ::=> Void := {
        self uint32At: 0sz put: newStartAddress
    }.

    public method addressRange => UInt32
        := self uint32At: 4sz.

    public method addressRange: (newAddressRange: UInt32) ::=> Void := {
        self uint32At: 4sz put: newAddressRange
    }.

    public method incrementAddressBy: (increment: Int32) ::=> Void := {
        self uint32At: 0sz put: (self uint32At: 0sz) + increment asUInt32
    }.

    public method decodedInstructionsDo: (aBlock: (UInt8, UInt8, Int32) => Void) ::=> Void := {
        let encodedSize := self size.
        let position mutable := 8sz.

        let hasInterval mutable := false.
        let intervalStartPC mutable := 0u32.
        let intervalEndPC mutable := 0u32.

        while: position < encodedSize do: {
            let opcode := self uint8At: position.
            let operation := opcode & 31u8.
            let operandSize := opcode >> 6u8.
            let hasRegister := (opcode & NativeCodeCallFrameInformation::OpcodeHasRegisterFlag) ~= 0u8.
            let register mutable := 0u8,
            position := position + 1sz.

            hasRegister ifTrue: {
                register := self uint8At: position.
                position := position + 1sz
            }.

            let operand mutable := 0i32.
            switch: operandSize withCases: #{
            NativeCodeCallFrameInformation::OpcodeOperandSize::Size1 : {
                operand := (self int8At: position) asInt32.
                position := position + 1sz
            }.
            NativeCodeCallFrameInformation::OpcodeOperandSize::Size2 : {
                operand := (self int16At: position) asInt32.
                position := position + 2sz
            }.
            NativeCodeCallFrameInformation::OpcodeOperandSize::Size4 : {
                operand := self int32At: position.
                position := position + 4sz
            }.
            _: {}
            }.

            aBlock(operation, register, operand)
        }
    }.
}.

public final class NativeCodeCallFrameInformationEncoder superclass: Object; definition: {
    private field out => ByteStream.
    public field address => UInt32.

    public override method initialize => Void := {
        out := ByteStream new.
    }.

    public method startAddress: (startAddress: UInt32) range: (range: UInt32) ::=> Void := {
        out nextPutUInt32: startAddress; nextPutUInt32: range.
        address := startAddress.
    }.

    public method operation: (operation: UInt8) register: (register: UInt8) operand: (operand: Int32) ::=> Void := {
        let hasRegisterFlag := (register ~= 0u8)
            ifTrue: NativeCodeCallFrameInformation::OpcodeHasRegisterFlag
            ifFalse: 0u8.

        operand = 0i32 ifTrue: {
            out nextPutUInt8: operation | hasRegisterFlag.
            register ~= 0u8 ifTrue: {
                out nextPutUInt8: register.
            }.
            return: void
        }.

        operand asInt8 asInt32 = operand ifTrue: {
            out nextPutUInt8: operation | hasRegisterFlag | (NativeCodeCallFrameInformation::OpcodeOperandSize::Size1 << 6u8).
            register ~= 0u8 ifTrue: {
                out nextPutUInt8: register.
            }.
            out nextPutInt8: operand asInt8.
            return: void
        }.

        operand asInt16 asInt32 = operand ifTrue: {
            out nextPutUInt8: operation | hasRegisterFlag | (NativeCodeCallFrameInformation::OpcodeOperandSize::Size2 << 6u8).
            register ~= 0u8 ifTrue: {
                out nextPutUInt8: register.
            }.
            out nextPutInt16: operand asInt16.
            return: void
        }.

        out nextPutUInt8: operation | hasRegisterFlag | (NativeCodeCallFrameInformation::OpcodeOperandSize::Size4 << 6u8).
        register ~= 0u8 ifTrue: {
            out nextPutUInt8: register.
        }.
        out nextPutInt32: operand
    }.

    public method operation: (operation: UInt8) register: (register: UInt8) ::=> Void
        := self operation: operation register: register operand: 0i32.

    public method operation: (operation: UInt8) operand: (operand: Int32) ::=> Void
        := self operation: operation register: 0u8 operand: operand.

    public method operation: (operation: UInt8) ::=> Void
        := self operation: operation register: 0u8 operand: 0i32.

    public method setAddress: (newAddress: UInt32) ::=> Void := {
        self assert: address <= newAddress.
        let advance := newAddress - address.
        advance ~= 0u32 ifTrue: {
            self operation: NativeCodeCallFrameInformation::Opcode::AdvancePC operand: advance asInt32
        }
    }.

    public method endPrologue => Void
        := self operation: NativeCodeCallFrameInformation::Opcode::EndPrologue.

    public method beginEpilogue => Void
        := self operation: NativeCodeCallFrameInformation::Opcode::BeginEpilogue.

    public method endEpilogue => Void
        := self operation: NativeCodeCallFrameInformation::Opcode::EndEpilogue.

    public method pushRegister: (register: UInt8) ::=> Void
        := self operation: NativeCodeCallFrameInformation::Opcode::PushRegister register: register.

    public method popRegister: (register: UInt8) ::=> Void
        := self operation: NativeCodeCallFrameInformation::Opcode::PopRegister register: register.

    public method restoreFramePointer: (register: UInt8) offset: (offset: Int32) ::=> Void
        := self operation: NativeCodeCallFrameInformation::Opcode::RestoreFramePointer register: register operand: offset.

    public method saveFramePointer: (register: UInt8) offset: (offset: Int32) ::=> Void
        := self operation: NativeCodeCallFrameInformation::Opcode::SaveFramePointer register: register operand: offset.

    public method stackSizeAdvance: (advance: Int32) ::=> Void
        := self operation: NativeCodeCallFrameInformation::Opcode::StackSizeAdvance operand: advance.

    public method finish => NativeCodeCallFrameInformation := {
        out size = 0sz ifTrue: {
            return: nil
        }.

        let result => AnyValue := out asByteArray.
        (RawTuple::type:)(result, NativeCodeCallFrameInformation).
        result
    }.
}.

NativeCodeSymbolTable definition: {
    public override method initialize => Void := {
        symbols := #().
    }.

    public method atOrNil: (index: UInt32) ::=> NativeCodeSymbol
        := (index > 0u32) && (index asSize <= symbols size)
            ifTrue: (symbols at: index asSize - 1sz)
            ifFalse: nil.

    public override method fullPrintOn: (stream: Stream) ::=> Void := {
        symbols do: {:(NativeCodeSymbol)eachSymbol :: Void |
            stream string: "  "; fullPrint: eachSymbol; nl
        }.
    }.
}.

NativeCodeSection definition: {
    public override method printOn: (stream: Stream) ::=> Void := {
        stream string: name
    }.

    public override method fullPrintOn: (stream: Stream) ::=> Void := {
        stream
            string: "name: "; print: self;
            space; string: "machoSectionName: "; string: machoSectionName;
            space; string: "machoSegmentName: "; string: machoSegmentName;
            space; string: "alignment: "; print: alignment;
            space; string: "size: "; print: size;
            space.

        self isExecutable ifTrue: (stream nextPut: 'X'c8).
        self isWriteable ifTrue: (stream nextPut: 'W'c8).
        self isReadable ifTrue: (stream nextPut: 'R'c8).
        self isLoaded ifTrue: (stream nextPut: 'L'c8).
        self isNoBits ifTrue: (stream nextPut: 'N'c8).
        self isTLS ifTrue: (stream nextPut: 'T'c8).
        stream nl.

        relocations ifNotNil: {
            relocations fullPrintOn: stream withSymbolTable: symbolTable
        }.
    }.

    public method isExecutable => Boolean
        := (flags & NativeCodeSection::Flags::Executable) ~= 0u32.

    public method isWriteable => Boolean
        := (flags & NativeCodeSection::Flags::Writeable) ~= 0u32.

    public method isReadable => Boolean
        := (flags & NativeCodeSection::Flags::Readable) ~= 0u32.

    public method isLoaded => Boolean
        := (flags & NativeCodeSection::Flags::Loaded) ~= 0u32.

    public method isNoBits => Boolean
        := (flags & NativeCodeSection::Flags::NoBits) ~= 0u32.

    public method isTLS => Boolean
        := (flags & NativeCodeSection::Flags::Tls) ~= 0u32.
}.

NativeCodeSymbol definition: {

    public method isGCObject => Boolean
        := (type = NativeCodeSymbol::Type::GCPointerTable) || (type = NativeCodeSymbol::Type::GCFatPointerTable).

    public method isPrivate => Boolean
        := visibility = NativeCodeSymbol::Visibility::Private.

    public override method printOn: (stream: Stream) ::=> Void := {
        name
            ifNil: (stream print: section; nextPut: '+'c8; print: value);
            ifNotNil: (stream string: name)
    }.

    public override method fullPrintOn: (stream: Stream) ::=> Void := {
        stream 
            string: (NativeCodeSymbol::Visibility::NameTable at: visibility asSize);
            space; string: (NativeCodeSymbol::Type::NameTable at: type asSize);
            space; string: (name ifNil: "-");
            space; print: section;
            space; print: value
    }.
}.

NativeCodeRelocationTable definition: {
    public method decodedRelocationsDo: (aBlock: (UInt8, UInt32, UInt32, Int64) => Void) ::=> Void := {
        let encodedSize := self size.
        let position mutable := 0sz.

        while: position < encodedSize do: {
            let typeAndSymbolIndex := self uint32At: position.
            let type := typeAndSymbolIndex asUInt8.
            let symbolIndex := typeAndSymbolIndex >> 8u32.
            position := position + 4sz.

            let offset := self uint32At: position.
            position := position + 4sz.

            let addendSize := type >> 6u8.
            let addend mutable := 0i64.

            switch: addendSize withCases: #{
                NativeCodeRelocation::Addend::Size8 : {
                    addend := (self int8At: position) asInt64.
                    position := position + 1sz.
                }.
                NativeCodeRelocation::Addend::Size16 : {
                    addend := (self int16At: position) asInt64.
                    position := position + 2sz.
                }.
                NativeCodeRelocation::Addend::Size32 : {
                    addend := (self int32At: position) asInt64.
                    position := position + 4sz.
                }.
                NativeCodeRelocation::Addend::Size64 : {
                    addend := self int64At: position.
                    position := position + 8sz.
                }.
                _: {}
            }.


            aBlock(type, symbolIndex, offset, addend)
        }
    }.

    public method fullPrintOn: (stream: Stream) withSymbolTable: (symbolTable: NativeCodeSymbolTable) ::=> Void := {
        self decodedRelocationsDo: {:(UInt8)type :(UInt32)symbolIndex :(UInt32)offset :(Int64)addend :: Void |
            stream string: "  ".
            offset printHexOn: stream.
            stream space; string: (NativeCodeRelocation::Type::NameTable at: type);
                space; print: (symbolTable atOrNil: symbolIndex).
            addend ~= 0i64 ifTrue: (stream space; print: addend).
            stream nl
        }
    }.
}.

public final class NativeCodeRelocationEncoder superclass: Object; definition: {
    private field out => ByteStream.
    public field symbolDictionary => Dictionary.

    public override method initialize => Void := {
        out := ByteStream new.
    }.

    public method finish => NativeCodeRelocationTable := {
        out size = 0sz ifTrue: {
            return: nil
        }.

        let result => AnyValue := out asByteArray.
        (RawTuple::type:)(result, NativeCodeRelocationTable).
        result
    }.

    public method type: (type: UInt8) symbolIndex: (symbolIndex: UInt32) offset: (offset: UInt32) addend8: (addend: Int8)::=> Void := {
        self assert: (type >> 6u8) = NativeCodeRelocation::Addend::Size8.
        out nextPutUInt32: type asUInt32 | (symbolIndex << 8u32); nextPutUInt32: offset; nextPutInt8: addend
    }.

    public method type: (type: UInt8) symbolIndex: (symbolIndex: UInt32) offset: (offset: UInt32) addend16: (addend: Int16)::=> Void := {
        self assert: (type >> 6u8) = NativeCodeRelocation::Addend::Size16.
        out nextPutUInt32: type asUInt32 | (symbolIndex << 8u32); nextPutUInt32: offset; nextPutInt16: addend
    }.

    public method type: (type: UInt8) symbolIndex: (symbolIndex: UInt32) offset: (offset: UInt32) addend32: (addend: Int32)::=> Void := {
        self assert: (type >> 6u8) = NativeCodeRelocation::Addend::Size32.
        out nextPutUInt32: type asUInt32 | (symbolIndex << 8u32); nextPutUInt32: offset; nextPutInt32: addend
    }.

    public method type: (type: UInt8) symbolIndex: (symbolIndex: UInt32) offset: (offset: UInt32) addend64: (addend: Int64)::=> Void := {
        self assert: (type >> 6u8) = NativeCodeRelocation::Addend::Size64.
        out nextPutUInt32: type asUInt32 | (symbolIndex << 8u32); nextPutUInt32: offset; nextPutInt64: addend
    }.

    public method type: (type: UInt8) symbolIndex: (symbolIndex: UInt32) offset: (offset: UInt32) addend: (addend: Int64)::=> Void := {
        out nextPutUInt32: type asUInt32 | (symbolIndex << 8u32); nextPutUInt32: offset.

        let addendSize := type >> 6u8.
        switch: addendSize withCases: #{
        NativeCodeRelocation::Addend::Size8 : {
            out nextPutInt8: addend asInt8.
        }.
        NativeCodeRelocation::Addend::Size16 : {
            out nextPutInt16: addend asInt16.
        }.
        NativeCodeRelocation::Addend::Size32 : {
            out nextPutInt32: addend asInt32.
        }.
        NativeCodeRelocation::Addend::Size64 : {
            out nextPutInt64: addend.
        }.
        _: (self error: "Unsupported addend size.")
        }.

        
    }.
}.

NativeCodeLocationList definition: {
    public method decodedInstructionsDo: (aBlock: (Boolean, UInt32, UInt32, UInt8, Int32) => Void) ::=> Void := {
        let encodedSize := self size.
        let position mutable := 0sz.

        let hasInterval mutable := false.
        let intervalStartPC mutable := 0u32.
        let intervalEndPC mutable := 0u32.

        while: position < encodedSize do: {
            let opcode := self uint8At: position.
            let operation := opcode & 63u8.
            let operandSize := opcode >> 6u8.
            position := position + 1sz.

            operation = NativeCodeLocationList::Opcode::BeginNoInterval ifTrue: {
                hasInterval := false.
                continue()
            }.

            operation = NativeCodeLocationList::Opcode::BeginInterval ifTrue: {
                hasInterval := true.

                intervalStartPC := self uint32At: position.
                position := position + 4sz.

                intervalEndPC := self uint32At: position.
                position := position + 4sz.

                continue()
            }.

            let operand mutable := 0i32.
            switch: operandSize withCases: #{
            NativeCodeLocationList::OpcodeOperandSize::Size1 : {
                operand := (self int8At: position) asInt32.
                position := position + 1sz.
            }.
            NativeCodeLocationList::OpcodeOperandSize::Size2 : {
                operand := (self int16At: position) asInt32.
                position := position + 2sz.
            }.
            NativeCodeLocationList::OpcodeOperandSize::Size4 : {
                operand := self int32At: position.
                position := position + 4sz.
            }.
            _: {}
            }.

            aBlock(hasInterval, intervalStartPC, intervalEndPC, operation, operand)
        }
    }.
}.

public final class NativeCodeLocationListEncoder superclass: Object; definition: {
    private field out => ByteStream.

    public override method initialize => Void := {
        out := ByteStream new.
    }.

    public method beginWithIntervalStart: (startPC: UInt32) end: (endPC: UInt32) ::=> Void := {
        self assert: startPC < 16rFFFF_FFFF u32.
        out nextPutUInt8: NativeCodeLocationList::Opcode::BeginInterval; nextPutUInt32: startPC; nextPutUInt32: endPC
    }.

    public method beginWithoutInterval ::=> Void := {
        out nextPutUInt8: NativeCodeLocationList::Opcode::BeginNoInterval
    }.

    public method operation: (operation: UInt8) operand: (operand: Int32) ::=> Void := {
        operand = 0i32 ifTrue: {
            out nextPutUInt8: operation.
            return: void
        }.

        operand asInt8 asInt32 = operand ifTrue: {
            out nextPutUInt8: operation | (NativeCodeLocationList::OpcodeOperandSize::Size1 << 6u8); nextPutInt8: operand asInt8.
            return: void
        }.

        operand asInt16 asInt32 = operand ifTrue: {
            out nextPutUInt8: operation | (NativeCodeLocationList::OpcodeOperandSize::Size2 << 6u8); nextPutInt16: operand asInt16.
            return: void
        }.

        out nextPutUInt8: operation | (NativeCodeLocationList::OpcodeOperandSize::Size4 << 6u8); nextPutInt32: operand
    }.

    public method register: (register: Int32) ::=> Void
        := self operation: NativeCodeLocationList::Opcode::Register operand: register.

    public method frameOffset: (offset: Int32) ::=> Void
        := self operation: NativeCodeLocationList::Opcode::FrameOffset operand: offset.

    public method captureVectorOffset: (offset: Int32) ::=> Void
        := self operation: NativeCodeLocationList::Opcode::CaptureVectorOffset operand: offset.

    public method finish => NativeCodeLocationList := {
        out size = 0sz ifTrue: {
            return: nil
        }.

        let result => AnyValue := out asByteArray.
        (RawTuple::type:)(result, NativeCodeLocationList).
        result
    }.
}.