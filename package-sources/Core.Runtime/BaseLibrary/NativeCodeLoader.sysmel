public global NativeCodeLoader::DataSegmentAllocator mutable := ChunkedAllocator basicNew.
public global NativeCodeLoader::TextSegmentAllocator mutable := ChunkedCodeAllocator basicNew.

Symbol definition: {
    public virtual method solveNativeCodeSymbolVirtualAddresses: (nativeCodeSymbol: NativeCodeSymbol) ::=> Void := {
        error("Unsupported symbol")
    }.
}.

StringSymbol definition: {
    public override method solveNativeCodeSymbolVirtualAddresses: (nativeCodeSymbol: NativeCodeSymbol) ::=> Void := {
        let symbolAddress mutable => Void pointer := nil.
        sysmel_pal_getApplicationSymbol(self __byteSize__, self __rawContentsPointer__ reinterpretCastTo: Char8 const pointer, symbolAddress) ifFalse: {
            error("Failed to solve symbol " -- self printString).
        }.

        nativeCodeSymbol virtualAddress: (symbolAddress reinterpretCastTo: UIntPointer)
    }.
}.

ProgramEntity definition: {
    public virtual method solveNativeCodeSymbolVirtualAddresses: (nativeCodeSymbol: NativeCodeSymbol) symbol: (symbol: Symbol)::=> Void := {
        let symbolString := self asString.
        let symbolAddress mutable => Void pointer := nil.
        sysmel_pal_getApplicationSymbol(symbolString __byteSize__, symbolString __rawContentsPointer__ reinterpretCastTo: Char8 const pointer, symbolAddress) ifFalse: {
            error("Failed to solve program entity symbol " -- self printString -- " " -- self __type__ printString).
        }.

        nativeCodeSymbol virtualAddress: (symbolAddress reinterpretCastTo: UIntPointer)
    }.
}.

SymbolValueBinding definition: {
    public override method solveNativeCodeSymbolVirtualAddresses: (nativeCodeSymbol: NativeCodeSymbol) symbol: (symbol: Symbol) ::=> Void := {
        virtualAddress ~= 0uptr ifTrue: {
            nativeCodeSymbol virtualAddress: virtualAddress.
            return: void
        }.

        super solveNativeCodeSymbolVirtualAddresses: nativeCodeSymbol symbol: symbol
    }.
}.

ProgramEntityQualifiedNameSymbol definition: {
    public override method solveNativeCodeSymbolVirtualAddresses: (nativeCodeSymbol: NativeCodeSymbol) ::=> Void := {
        programEntity solveNativeCodeSymbolVirtualAddresses: nativeCodeSymbol symbol: self
    }.
}.

FunctionCheckedEntryPointSymbol definition: {
    public override method solveNativeCodeSymbolVirtualAddresses: (nativeCodeSymbol: NativeCodeSymbol) ::=> Void := {
        function checkedEntryPoint = 0uptr ifTrue: {
            error("TODO: make jit checked entry point trampoline for " -- function printString).
        }.

        nativeCodeSymbol virtualAddress: function checkedEntryPoint
    }.
}.

FunctionCapturelessUncheckedEntryPointSymbol definition: {
    public override method solveNativeCodeSymbolVirtualAddresses: (nativeCodeSymbol: NativeCodeSymbol) ::=> Void := {
        function capturelessUncheckedEntryPoint = 0uptr ifTrue: {
            error("TODO: make jit checked entry point trampoline for " -- function printString).
        }.

        nativeCodeSymbol virtualAddress: function capturelessUncheckedEntryPoint
    }.
}.

FunctionUncheckedEntryPointSymbol definition: {
    public override method solveNativeCodeSymbolVirtualAddresses: (nativeCodeSymbol: NativeCodeSymbol) ::=> Void := {
        function uncheckedEntryPoint = 0uptr ifTrue: {
            error("TODO: make jit unchecked entry point trampoline for " -- function printString).
        }.

        nativeCodeSymbol virtualAddress: function uncheckedEntryPoint
    }.
}.

public global NativeCode::X86_64::PltEntryCode := #[
    ## nop
    16r66. 16r90.
    ## jmp
    16rFF. 16r25. 16r00. 16r00. 16r00. 16r00
].
public global NativeCode::X86_64::PltEntrySize := NativeCode::X86_64::PltEntryCode size.
public global NativeCode::X86_64::PltEntryAlignment := 8sz.

public global NativeCode::GotEntrySize := UIntPointer valueSize.
public global NativeCode::GotEntryAlignment := UIntPointer valueAlignment.

NativeCode definition: {
    public method installForExecution => Void := {
        sysmel_pal_supportsMemoryWithDualMappingForJIT() ifFalse: {
            return: void
        }.

        ## Write the section data onto memory.
        sections do: {:(NativeCodeSection)eachSection :: Void |
            eachSection isLoaded ifFalse: {
                return: void
            }.

            ## Allocate the segment memory.
            let writePointer mutable => Void pointer := nil.
            let executablePointer mutable => Void pointer := nil.
            eachSection isExecutable || eachSection isWriteable not ifTrue: {
                (NativeCodeLoader::TextSegmentAllocator allocateWithSize: eachSection size alignment: eachSection alignment writePointerResult: writePointer executablePointerResult: executablePointer) ifFalse: {
                    error("Failed to allocate text segment memory.")
                }
            } ifFalse: {
                executablePointer := writePointer := NativeCodeLoader::DataSegmentAllocator allocateWithSize: eachSection size alignment: eachSection alignment.
                writePointer ifNil: {
                    error("Failed to allocate data segment memory.")
                }
            }.

            ## Write the segment content.
            eachSection isNoBits || eachSection data isNil ifTrue: {
                memset(writePointer, 0i8, eachSection size)
            } ifFalse: {
                memcpy(writePointer, eachSection data __rawContentsPointer__, eachSection size)
            }.

            eachSection
                virtualAddress: (executablePointer reinterpretCastTo: UIntPointer);
                writeableVirtualAddress: (writePointer reinterpretCastTo: UIntPointer).
        }.

        ## Solve the symbol virtual addresses.
        let gotSymbolCount mutable := 0sz.
        let pltSymbolCount mutable := 0sz.

        symbolTable symbols do: {:(NativeCodeSymbol)eachSymbol :: Void |
            eachSymbol section ifNil: {
                switch: eachSymbol type withCases: #{
                    NativeCodeSymbol::Type::GCPointerTable : {
                        let rootPointer := GarbageCollector::allocateGCRootPointer().
                        rootPointer store: eachSymbol objectValue.
                        eachSymbol virtualAddress: (rootPointer reinterpretCastTo: UIntPointer).
                        eachSymbol writeableVirtualAddress: (rootPointer reinterpretCastTo: UIntPointer).
                    }.
                    NativeCodeSymbol::Type::GCFatPointerTable : {
                        error("TODO: Make GC fat pointer table entry symbol")
                    }.
                    _: {
                        eachSymbol virtualAddress: eachSymbol value asUIntPointer.
                        eachSymbol name ifNotNil: {
                            eachSymbol name solveNativeCodeSymbolVirtualAddresses: eachSymbol
                        }
                    }
                }.

                eachSymbol type = NativeCodeSymbol::Type::TLS ifFalse: {
                    gotSymbolCount := gotSymbolCount + 1sz.
                    eachSymbol type = NativeCodeSymbol::Type::Function ifTrue: {
                        pltSymbolCount := pltSymbolCount + 1sz
                    }
                }.
            } ifNotNil: {
                eachSymbol virtualAddress: eachSymbol section virtualAddress.
                eachSymbol writeableVirtualAddress: eachSymbol section writeableVirtualAddress.
            }.

            eachSymbol virtualAddress: eachSymbol virtualAddress + eachSymbol value asUIntPointer.
            eachSymbol writeableVirtualAddress: eachSymbol writeableVirtualAddress + eachSymbol value asUIntPointer.
        }.

        ## Make the GOT and PLT tables.
        let pltSectionSize := NativeCode::X86_64::PltEntrySize*pltSymbolCount.
        let pltExecutablePointer mutable => Void pointer := nil.

        gotSymbolCount > 0sz ifTrue: {
            let gotTable := (NativeCodeLoader::DataSegmentAllocator allocateWithSize: NativeCode::GotEntrySize alignment: NativeCode::GotEntryAlignment)
                reinterpretCastTo: UIntPointer pointer.
            let gotTableDestinationIndex mutable := 0sz.

            let pltWritePointer mutable => Void pointer := nil.
            (pltSymbolCount = 0sz) || (NativeCodeLoader::TextSegmentAllocator allocateWithSize: pltSectionSize alignment: NativeCode::X86_64::PltEntryAlignment writePointerResult: pltWritePointer executablePointerResult: pltExecutablePointer) ifFalse: {
                error("Failed to allocate text segment memory.")
            }.

            let pltWriteTable := pltWritePointer reinterpretCastTo: UInt8 pointer.
            let pltExecutableTable := pltExecutablePointer reinterpretCastTo: UInt8 pointer.
            let pltTableDestinationIndex mutable := 0sz.

            symbolTable symbols do: {:(NativeCodeSymbol)eachSymbol :: Void |
                eachSymbol section ifNotNil: {return: void}.
                eachSymbol type = NativeCodeSymbol::Type::TLS ifTrue: {return: void}.

                self assert: gotTableDestinationIndex < gotSymbolCount.
                self assert: eachSymbol section isNil.
                let gotEntry := gotTable + gotTableDestinationIndex asIntPointer.
                gotEntry store: eachSymbol virtualAddress.
                eachSymbol gotVirtualAddress: (gotEntry reinterpretCastTo: UIntPointer).
                ##printLine(eachSymbol, " ", NativeCodeSymbol::Type::NameTable at: eachSymbol type asSize, " gotVirtualAddress ", eachSymbol gotVirtualAddress).

                eachSymbol type = NativeCodeSymbol::Type::Function ifTrue: {
                    self assert: pltTableDestinationIndex < pltSymbolCount.

                    let pltOffset := NativeCode::X86_64::PltEntrySize * pltTableDestinationIndex.
                    let pltWriteEntry := pltWriteTable + pltOffset asIntPointer.
                    let pltExecutableEntry := pltExecutableTable + pltOffset asIntPointer.

                    memcpy(pltWriteEntry reinterpretCastTo: Void pointer, NativeCode::X86_64::PltEntryCode __rawContentsPointer__, NativeCode::X86_64::PltEntrySize).
                    let pltRipOffset := pltExecutableEntry + NativeCode::X86_64::PltEntrySize asIntPointer reinterpretCastTo: UIntPointer.
                    let pltGotOffset := eachSymbol gotVirtualAddress - pltRipOffset.

                    ##printLine("pltGotOffset ", pltGotOffset asIntPointer).
                    ((pltWriteEntry + (NativeCode::X86_64::PltEntrySize - 4sz) asIntPointer) reinterpretCastTo: Int32 pointer)
                        store: pltGotOffset asInt32.
                    eachSymbol pltVirtualAddress: (pltExecutableEntry reinterpretCastTo: UIntPointer).
                    ##printLine(eachSymbol, " ", NativeCodeSymbol::Type::NameTable at: eachSymbol type asSize, " pltVirtualAddress ", eachSymbol pltVirtualAddress).

                    pltTableDestinationIndex := pltTableDestinationIndex + 1sz
                }.

                gotTableDestinationIndex := gotTableDestinationIndex + 1sz
            }.

            self assert: gotTableDestinationIndex = gotSymbolCount.
            self assert: pltTableDestinationIndex = pltSymbolCount.
        }.

        ## Apply the relocations.
        sections do: {:(NativeCodeSection)eachSection :: Void |
            eachSection relocations ifNil: {return: void}.

            eachSection relocations decodedRelocationsDo: {:(UInt8)type :(UInt32)symbolIndex :(UInt32)offset :(Int64)addend :: Void |
                let symbol := symbolTable atOrNil: symbolIndex.
                symbol ifNil: {return: void}.

                let relocationVirtualAddress := eachSection virtualAddress + offset asSize.
                let relocationTargetAddress := eachSection writeableVirtualAddress + offset asSize.
                switch: type withCases: #{
                    NativeCodeRelocation::Type::Relative32 : {
                        let value := symbol virtualAddress asIntPointer + addend asIntPointer - relocationVirtualAddress asIntPointer.
                        ##printLine(relocationVirtualAddress, "-", symbol virtualAddress, " Relative32 ", symbol, " ", value).
                        self assert: value asInt32 asIntPointer = value.
                        (relocationTargetAddress reinterpretCastTo: Int32 pointer) store: value asInt32
                    }.
                    NativeCodeRelocation::Type::TPOffset32 : {
                        let value := symbol virtualAddress asInt32 + addend asInt32.
                        ##printLine(relocationVirtualAddress, "-", symbol virtualAddress, " TPOffset32 ", symbol, " ", value).
                        (relocationTargetAddress reinterpretCastTo: Int32 pointer) store: value
                    }.
                    NativeCodeRelocation::Type::RelativePLT32 : {
                        self assert: symbol pltVirtualAddress ~= 0 uptr.
                        let value := symbol pltVirtualAddress asIntPointer + addend asIntPointer - relocationVirtualAddress asIntPointer.
                        ##printLine(relocationVirtualAddress, "-", symbol pltVirtualAddress, " RelativePLT32 ", symbol, " ", value).
                        self assert: value asInt32 asIntPointer = value.
                        (relocationTargetAddress reinterpretCastTo: Int32 pointer) store: value asInt32
                    }.
                    NativeCodeRelocation::Type::RelativeGOT32 : {
                        self assert: symbol gotVirtualAddress ~= 0 uptr.
                        let value := symbol gotVirtualAddress asIntPointer + addend asIntPointer - relocationVirtualAddress asIntPointer.
                        ##printLine(relocationVirtualAddress, "-", symbol gotVirtualAddress, " RelativeGOT32 ", symbol, " ", value).
                        self assert: value asInt32 asIntPointer = value.
                        (relocationTargetAddress reinterpretCastTo: Int32 pointer) store: value asInt32
                    }.
                    _: {
                        error("Unsupported jit relocation of type " -- (NativeCodeRelocation::Type::NameTable at: type) asString).
                    }
                }
            }
        }.

        ## Flush the instruction cache.
        pltSectionSize > 0sz ifTrue: {
            sysmel_pal_flushInstructionCache(pltSectionSize, pltExecutablePointer).
        }.

        sections do: {:(NativeCodeSection)eachSection :: Void |
            eachSection isExecutable ifTrue: {
                let executablePointer := eachSection virtualAddress reinterpretCastTo: Void pointer.
                sysmel_pal_flushInstructionCache(eachSection size, executablePointer).
            }
        }.

        ## Apply the virtual addresses.
        symbolValueBindingDefinitions do: {:(SymbolValueBindingNativeCodeDefinition)eachDefinition :: Void |
            eachDefinition binding ifNil: {return: void}.
            let symbol := symbolTable atOrNil: eachDefinition symbol.
            symbol ifNotNil: {
                eachDefinition binding virtualAddress: symbol virtualAddress
            }
        }.

        ## Apply the entry points.
        functionDefinitionsEntryPoints do: {:(FunctionNativeCodeDefinition)nativeCodeDefinition :: Void |
            nativeCodeDefinition definition ifNil: {return: void}.

            let capturelessUncheckedEntryPoint := symbolTable atOrNil: nativeCodeDefinition capturelessUncheckedEntryPoint.
            capturelessUncheckedEntryPoint ifNotNil: {
                nativeCodeDefinition definition capturelessUncheckedEntryPoint: capturelessUncheckedEntryPoint virtualAddress
            }.

            let uncheckedEntryPoint := symbolTable atOrNil: nativeCodeDefinition uncheckedEntryPoint.
            uncheckedEntryPoint ifNotNil: {
                nativeCodeDefinition definition uncheckedEntryPoint: uncheckedEntryPoint virtualAddress
            }.

            let checkedEntryPoint := symbolTable atOrNil: nativeCodeDefinition checkedEntryPoint.
            checkedEntryPoint ifNotNil: {
                nativeCodeDefinition definition checkedEntryPoint: checkedEntryPoint virtualAddress
            }.
        }.
    }.
}.

FunctionNativeCodeDefinition withSelector: #installForExecution replaceMethod: {:(FunctionNativeCodeDefinition)self :: Void |
    self nativeCode installForExecution
} withEagerAnalysis.
