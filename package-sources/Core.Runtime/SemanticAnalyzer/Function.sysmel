public abstract class FunctionInterpretationStrategy definition: {
    public abstract method interpretFunction: (function: Function) withArguments: (arguments: Array) ::=> Untyped
        := self subclassResponsibility.
}.

public final class FunctionASTInterpretationStrategy superclass: FunctionInterpretationStrategy; definition: {
    public virtual method interpretFunction: (function: Function) withArguments: (arguments: Array) ::=> Untyped := {
        let activationEnvironment := function createFunctionActivationEnvironmentWithArguments: arguments.
        function definition sourceAnalyzedDefinition bodyNode evaluateWithEnvironment: activationEnvironment
    }.
}.

public global Function::CurrentInterpretationStrategy := ValueBox with: FunctionASTInterpretationStrategy new.

FunctionDefinition definition: {
    public eager method captures => Array := {
        bytecode ifNotNil: {
            return: bytecode captures
        }.

        sourceAnalyzedDefinition ifNotNil: {
            return: sourceAnalyzedDefinition captures
        }.

        error("Function definition is missing definition with capture list.")
    }
}.

Function definition: {
    public eager method setupWithFunctionDefinition: (newDefinition: FunctionDefinition) captureEnvironment: (newCaptureEnvironment: Environment) ::=> Void := {
        flags := newDefinition flags.
        argumentCount := newDefinition argumentCount.
        captureEnvironment := newCaptureEnvironment.
        definition := newDefinition.
    }.

    public eager method setupWithFunctionDefinition: (newDefinition: FunctionDefinition) captureVector: (newCaptureVector: AnySequenceTuple) ::=> Void := {
        flags := newDefinition flags.
        argumentCount := newDefinition argumentCount.
        captureVector := newCaptureVector.
        definition := newDefinition.
    }.

    public method isTargetDefinedPrimitive => Boolean
        := (self hasAnyFlag: FunctionFlags::TargetDefinedPrimitive) || (self hasPragmaNamed: #targetDefinedPrimitive).

    public override eager method recordBindingWithOwner: (newOwner: ProgramEntity) andName: (newName: Symbol) ::=> Void := {
        super recordBindingWithOwner: newOwner andName: newName.
        definition ifNotNil: {
            definition recordBindingWithOwner: newOwner andName: newName
        }
    }.

    public eager method adoptDefinitionOf: (definitionFunction: Function) ::=> Void := {
        definition := definitionFunction definition.
        captureVector := definitionFunction captureVector.
        captureEnvironment := definitionFunction captureEnvironment.
        definitionFunction isBootstrapPrimitive ifTrue: {
            flags := (flags & FunctionFlags::BootstrapPrimitiveKeptFlags) | definitionFunction flags.

            definitionFunction primitiveName ifNotNil: {
                primitiveName := definitionFunction primitiveName
            }.

        } ifFalse: {
            flags := definitionFunction flags.
            primitiveName := definitionFunction primitiveName.
            primitiveTableIndex := definitionFunction primitiveTableIndex.
            annotations := definitionFunction annotations.
        }.

        (RawTuple::type:)(self, definitionFunction __type__)
    }.

    public eager method doEnsureAnalysis => Void := {
        super ensureAnalysis.
        captureEnvironment isNil || definition isNil ifTrue: {return: void}.

        let captureEnvironment := self captureEnvironment.
        self captureEnvironment == __pendingMemoizationValue__ ifTrue: {
            error("Cyclic analysis of function " -- self printString).
        }.

        { :: Void |
            self captureEnvironment: __pendingMemoizationValue__.
            definition ensureAnalysis.
        } ensure: {:: Void |
            self captureEnvironment: captureEnvironment
        }.

        let newCaptureVector => AnySequenceTuple := definition captureVectorType new.
        definition captures doWithIndex: {:(SymbolBinding)captureBinding :(Size)index |
            newCaptureVector at: index put: (captureEnvironment evaluateSymbolBinding: captureBinding)
        }.

        captureVector := newCaptureVector.
        self captureEnvironment: nil.
        self primitiveName ifNil: {
            self primitiveName: definition primitiveName
        }.
        (RawTuple::type:)(self, definition type).
    }.

    public override eager method ensureAnalysis => Void := {
        self doEnsureAnalysis
    }.

    public eager method recompileAndOptimize => Function := {
        self ensureAnalysis.
        (definition isNil || captureVector isNotNil) ifTrue: (return: self).

        error("TODO: recompileAndOptimize")
    }.

    public eager method applyWithExpandedArguments: (arguments: Array) ::=> Untyped := {
        primitiveFailedError()
    }.

    public eager method applyWithMemoizedArguments: (arguments: Array) ::=> Untyped := {
        memoizationTable ifNil: {
            memoizationTable := WeakValueDictionary new.
        }.

        let memoizationKey := arguments size = 1sz
            ifTrue: (arguments first)
            ifFalse: arguments.

        let result := memoizationTable at: memoizationKey ifAbsent: {:: Untyped |
            let association := WeakValueAssociation key: memoizationKey value: __pendingMemoizationValue__.
            memoizationTable add: association.

            let newResult := self applyWithExpandedArguments: (self isMemoizedTemplate
                ifTrue: (Array with: association) -- arguments
                ifFalse: (arguments)).
            association value: newResult.
            newResult
        }.

        (Untyped::==)(result, __pendingMemoizationValue__) ifTrue: {
            error("Cyclic evaluation of memoized function " -- self printString -- " with arguments: " -- arguments)
        }.

        result
    }.

    public eager method applyWithArguments: (arguments: Array) ::=> Untyped := {
        let expandedArguments := self isVariadic ifTrue: {
            self assert: argumentCount > 0sz.
            let directArgumentCount := argumentCount - 1sz.
            let passedArgumentCount := arguments size.
            passedArgumentCount < directArgumentCount ifTrue: {
                error("Missing required arguments in function call of " -- self printString)
            }.

            let i mutable := 0sz.
            let expandedArguments := Array new: argumentCount.
            let variadicVector := Array new: passedArgumentCount - directArgumentCount.
            while: (i < directArgumentCount) do: {
                expandedArguments at: i put: (arguments at: i)
            } continueWith: (i := i + 1sz).
            expandedArguments at: directArgumentCount put: variadicVector.

            while: (i < passedArgumentCount) do: {
                variadicVector at: i - directArgumentCount put: (arguments at: i)
            } continueWith: (i := i + 1sz).

            expandedArguments
        } ifFalse: {
            arguments
        }.

        self isMemoized ifTrue: {
            return: (self applyWithMemoizedArguments: expandedArguments)
        }.
        return: (self applyWithExpandedArguments: expandedArguments).
    }.

    public method createFunctionActivationEnvironmentWithArguments: (arguments: Array) ::=> FunctionActivationEnvironment
        := (FunctionActivationEnvironment parent: nil)
            function: self;
            captureVector: captureVector;
            argumentVectorSize: arguments size;
            valueVector: arguments -- (Array new: definition sourceAnalyzedDefinition locals size);
            yourself.

    public method interpretWithArgument: (arguments: Array) ::=> Untyped := {
        self doEnsureAnalysis.

        let interpretationStrategy => FunctionInterpretationStrategy := Function::CurrentInterpretationStrategy value.
        interpretationStrategy interpretFunction: self withArguments: arguments
    }.

    public inline method ensureIsReadyForEvaluation => Void := {
        captureEnvironment ifNotNil: {
            self doEnsureAnalysis
        }.
    }.
}.

FunctionDefinition definition: {
    public method isTargetDefinedPrimitive => Boolean
        := (self hasAnyFlag: FunctionFlags::TargetDefinedPrimitive) || (self hasPragmaNamed: #targetDefinedPrimitive).

    public method allLiteralDependenciesDo: (aBlock: (Untyped) => Void) ::=> Void := {
        self ensureAnalysis.
        let literals := bytecode literalVector.
        let literalCount := literals size.
        let i mutable := 0sz.
        while: (i < literalCount) do: {
            aBlock(literals untypedAt: i)
        } continueWith: (i := i + 1sz)
    }.
}.

(apply) adoptDefinitionOf: {:function :(Array)arguments... :: Untyped |
    let actualArguments := arguments isEmpty
        ifTrue: #()
        ifFalse: arguments allButLast -- arguments last.
    function applyWithArguments: actualArguments
} withEagerAnalysis.
