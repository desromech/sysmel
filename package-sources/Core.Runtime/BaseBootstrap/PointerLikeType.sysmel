Type definition: {
    public virtual method validAddressSpace => AddressSpace
        := GenericAddressSpace uniqueInstance.
}.

PointerLikeType definition: {
    public override method validAddressSpace => AddressSpace
        := addressSpace.

    public override method createBasicInitializeMethod => Void := {
    }.
}.

AddressSpace definition: {
    public virtual method componentCount => Size := 1sz.
    public virtual method isFatPointer => Boolean := false.
}.

MemberAddressSpace definition: {
    public override method componentCount => Size := 2sz.
    public override method isFatPointer => Boolean := true.
}.

PointerType definition: {

    public method initializeWithBaseType: (theBaseType: Type) addressSpace: (theAddressSpace: AddressSpace) ::=> Void := {
        baseType := theBaseType.
        addressSpace := theAddressSpace.

        flags := TypeFlags::PointerTypeFlags.
        totalSlotCount := 0sz.
        supertype := AnyPointer.
        instanceAlignment := UIntPointer valueAlignment.
        instanceSize := UIntPointer valueSize * addressSpace componentCount.
        gcLayout := supertype ensureLayoutIsComputed; gcLayout.

        loadValueFunction := (PointerLikeType::load) copy
            __type__: (self) => baseType;
            yourself.
        storeValueFunction := (PointerLikeType::store:) copy
            __type__: (self, baseType) => Void;
            yourself.

        let referenceType := ReferenceTypeTemplate(theBaseType, theAddressSpace).

        self
            withSelector: #load addMethod: loadValueFunction;
            withSelector: #store: addMethod: storeValueFunction;
            withSelector: #+ addMethod: ((PointerLikeType::at:) copy
                __type__: (self, IntPointer) => self;
                yourself);
            withSelector: #"[]:" addMethod: ((PointerLikeType::at:) copy
                __type__: (self, IntPointer) => referenceType;
                yourself);
            withSelector: #_ addMethod: ((PointerLikeType::reinterpretCast) copy
                __type__: (self) => referenceType;
                yourself).
    }.
}.

ReferenceType definition: {
    public method initializeWithBaseType: (theBaseType: Type) addressSpace: (theAddressSpace: AddressSpace) ::=> Void := {
        baseType := theBaseType.
        addressSpace := theAddressSpace.

        flags := TypeFlags::ReferenceTypeFlags.
        totalSlotCount := 0sz.
        supertype := AnyReference.
        instanceAlignment := UIntPointer valueAlignment.
        instanceSize := UIntPointer valueSize * addressSpace componentCount.
        gcLayout := supertype ensureLayoutIsComputed; gcLayout.

        let pointerType := PointerTypeTemplate(theBaseType, theAddressSpace).
        loadValueFunction := (PointerLikeType::load) copy
            __type__: (self) => baseType;
            yourself.
        storeValueFunction := (PointerLikeType::store:) copy
            __type__: (self, baseType) => self;
            yourself.

        let referenceType := ReferenceTypeTemplate(theBaseType, theAddressSpace).

        self
            withSelector: #__refLoad__ addMethod: loadValueFunction;
            withSelector: #__refStore__: addMethod: storeValueFunction;
            withSelector: #":=" addMethod: storeValueFunction;
            withSelector: #address addMethod: ((PointerLikeType::reinterpretCast) copy
                __type__: (self) => pointerType;
                yourself).
    }.
}.

TemporaryReferenceType definition: {
    public method initializeWithBaseType: (theBaseType: Type) addressSpace: (theAddressSpace: AddressSpace) ::=> Void := {
        baseType := theBaseType.
        addressSpace := theAddressSpace.

        flags := TypeFlags::TemporaryReferenceTypeFlags.
        totalSlotCount := 0sz.
        supertype := AnyTemporaryReference.
        instanceAlignment := UIntPointer valueAlignment.
        instanceSize := UIntPointer valueSize * addressSpace componentCount.
        gcLayout := supertype ensureLayoutIsComputed; gcLayout.

        let pointerType := PointerTypeTemplate(theBaseType, theAddressSpace).
        loadValueFunction := (PointerLikeType::load) copy
            __type__: (self) => baseType;
            yourself.
        storeValueFunction := (PointerLikeType::store:) copy
            __type__: (self, baseType) => self;
            yourself.

        let referenceType := ReferenceTypeTemplate(theBaseType, theAddressSpace).

        self
            withSelector: #__refLoad__ addMethod: loadValueFunction;
            withSelector: #__refStore__: addMethod: storeValueFunction;
            withSelector: #":=" addMethod: storeValueFunction;
            withSelector: #address addMethod: ((PointerLikeType::reinterpretCast) copy
                __type__: (self) => pointerType;
                yourself);
            withSelector: #__tempRefAsRef__ addMethod: ((PointerLikeType::reinterpretCast) copy
                __type__: (self) => referenceType;
                yourself).
    }.
}.

private pure template pointerTypeTemplate(baseType: Type, addressSpace: AddressSpace) => PointerType := {
    let result := PointerType basicNew.
    __templateResult__ value: result.
    result
        initializeWithBaseType: baseType addressSpace: addressSpace;
        yourself
}.

private pure template referenceTypeTemplate(baseType: Type, addressSpace: AddressSpace) => ReferenceType := {
    let result := ReferenceType basicNew.
    __templateResult__ value: result.
    result
        initializeWithBaseType: baseType addressSpace: addressSpace;
        yourself
}.

private pure template temporaryReferenceType(baseType: Type, addressSpace: AddressSpace) => TemporaryReferenceType := {
    let result := TemporaryReferenceType basicNew.
    __templateResult__ value: result.
    result
        initializeWithBaseType: baseType addressSpace: addressSpace;
        yourself
}.

PointerTypeTemplate adoptDefinitionOf: pointerTypeTemplate.
ReferenceTypeTemplate adoptDefinitionOf: referenceTypeTemplate.
TemporaryReferenceTypeTemplate adoptDefinitionOf: temporaryReferenceType.
