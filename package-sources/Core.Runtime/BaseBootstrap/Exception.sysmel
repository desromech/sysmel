public struct ExceptionSetjmpBuffer definition: {
    public field data => UIntPointer[32sz].

    __Meta__ definition: {
        public override method minimalAlignment => Size
            := 16sz
    }.

    public nogc method setjmp => Boolean := {
        <primitive: #Exception::setjmp>
        false
    }.
}.

public global ExceptionStackRecord::Kind::CleanUp := 0uptr.
public global ExceptionStackRecord::Kind::OnDo := 1uptr.

public struct ExceptionStackRecord definition: {
    public field previous => ExceptionStackRecord pointer.
    public field kind => UIntPointer.

    public method isCleanUp => Boolean
        := kind = ExceptionStackRecord::Kind::CleanUp.

    public method isOnDo => Boolean
        := kind = ExceptionStackRecord::Kind::OnDo.
}.

public threadLocal ExceptionStackRecord::LastActive mutable => ExceptionStackRecord pointer := nil.
public threadLocal ExceptionStackRecord::ActiveHandlerRecord mutable => ExceptionStackRecord pointer := nil.

public struct ExceptionCleanUpActionStackRecord supertype: ExceptionStackRecord; definition: {
    public field cleanUpAction => (() => Void).
}.

public struct ExceptionOnDoStackRecord supertype: ExceptionStackRecord; definition: {
    public field exceptionFilter => AnyValue.
    public field exceptionBlock => AnyValue.
    public field exceptionResult => AnyValue.
    public field gcStackFrameRecord => GCStackFrameRecord pointer.
    public field setjmpBuffer => ExceptionSetjmpBuffer.
}.

AnyValue definition: {
    public virtual method handlesException: (exception: Exception) ::=> Boolean
        := false.
}.

Exception definition: {
    __Meta__ definition: {
        public override method handlesException: (exception: Exception) ::=> Boolean
            := exception isKindOf: self.
    }.

    public virtual eager method defaultMessageText => String
        := "an " -- self class printString.

    public override eager method printOn: (stream: Stream) ::=> Void := {
        sourcePosition ifNotNil: {
            stream print: sourcePosition; string: ": ".
        }.

        stream print: self class; string: ": ".
        stream string: (messageText ifNil: self defaultMessageText)
    }.

    public override eager method asString => String
        := super asString.

    public override eager method printString => String
        := super printString.
}.

(Function::on:do:) adoptDefinitionOf: {:self :exceptionFilter :exceptionBlock :: self __type__ canonicalResultType |
    <targetDefinedPrimitive>
    primitiveFailedError()
}.
