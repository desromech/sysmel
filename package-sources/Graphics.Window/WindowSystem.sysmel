WindowSystem definition: {
    private field openWindowList => OrderedCollection.
    private field loopIterationTime => Time::MicrosecondsTimestamp.
    private field lastLoopIterationTime => Time::MicrosecondsTimestamp.
    private field loopIterationDeltaTime => Time::MicrosecondsTimestamp.
    private field loopIterationCount => UInt32.

    private global Default mutable => WindowSystem.

    __Meta__ definition: {
        public method default => WindowSystem
            := Default ifNil: {Default := self new}
    }.

    public override method initialize => Void := {
        super initialize.
        openWindowList := OrderedCollection new.

        sysmel_pal_windowSystem_initialize()
    }.

    public override method finalize => Void := {
        super finalize.
        sysmel_pal_windowSystem_finalize()
    }.

    public method createWindowWithTitle: (title: String) width: (width: UInt32) height: (height: UInt32) ::=> Window := {
        self assert: title isNotNil.

        let handle := sysmel_pal_window_create(title size, title __rawContentsPointer__ reinterpretCastTo: Char8 const pointer, -1i32, -1i32, width asInt32, height asInt32, 0u32).
        handle ifNil: {return: nil}.

        let window := Window new
            initializeWithWindowSystem: self handle: handle;
            yourself.

        openWindowList add: window.

        window
    }.

    public method run => Void := {
        while: openWindowList isNotEmpty do: {
            self runEventLoopIteration
        }.
    }.

    public method runEventLoopIteration => Void := {
        loopIterationTime := Time::Timestamp::microsecondsNow().
        loopIterationDeltaTime := loopIterationTime - lastLoopIterationTime.
        loopIterationCount := loopIterationCount + 1u32.

        let event mutable := SysmelPAL::WindowEvent basicNew.
        while: sysmel_pal_window_pollEvent(event) do: {
            self convertAndDispatchEvent: event
        }.

        self dispatchTickEvent ifTrue: {
            ##printLine("TODO: Animation delay.")
        } ifFalse: {
            sysmel_pal_window_waitEvent(event) ifTrue: {
                self convertAndDispatchEvent: event
            }.
        }.

        lastLoopIterationTime := loopIterationTime
    }.

    public method dispatchTickEvent => Boolean := {
        let hasAnimatedWindow := openWindowList anySatisfy: {:(Window)each :: Boolean | each isAnimated }.
        hasAnimatedWindow ifTrue: {
            let event := TickEvent new
                ticks: loopIterationTime;
                delta: loopIterationDeltaTime;
                mainLoopFrameCount: loopIterationCount;
                yourself.

            openWindowList do: {:(Window)each :: Void |
                each dispatchEvent: event
            }
        }.

        hasAnimatedWindow
    }.

    public method convertAndDispatchEvent: (event: SysmelPAL::WindowEvent ref) ::=> Void := {
        let window := self findWindowWithHandle: event window.
        window ifNil: {
            return: void
        }.

        window convertAndDispatchEvent: event
    }.

    public method findWindowWithHandle: (handle: SysmelPAL::WindowHandle) ::=> Window := {
        let i mutable := 0sz.
        while: (i < openWindowList size) do: {
            let window => Window := openWindowList at: i.
            window handle == handle ifTrue: {
                return: window
            }
        } continueWith: (i := i + 1sz).
        nil
    }.

    public method onWindowClosed: (window: Window) ::=> Void := {
        (openWindowList includes: window) ifTrue: {
            openWindowList remove: window
        }
    }
}.
