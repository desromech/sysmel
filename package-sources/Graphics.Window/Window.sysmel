public class WindowSystem superclass: Object.
public abstract class WindowRenderer superclass: Object.

public class Window superclass: Object; definition: {
    private field windowSystem => WindowSystem.
    private field handle => SysmelPAL::WindowHandle.
    public field eventHandler => EventHandler.
    public field renderer => WindowRenderer.
    public field isAnimated => Boolean.

    public method initializeWithWindowSystem: (initialWindowSystem: WindowSystem) handle: (initialHandle: SysmelPAL::WindowHandle) ::=> Void := {
        windowSystem := initialWindowSystem.
        handle := initialHandle
    }.

    public inline method handle => SysmelPAL::WindowHandle
        := handle.

    public method show => Void := {
        sysmel_pal_window_show(handle)
    }.

    public method hide => Void := {
        sysmel_pal_window_hide(handle)
    }.

    public method close => Void := {
        handle ifNil: {return: void}.

        renderer ifNotNil: {
            renderer destroy.
            renderer := nil
        }.

        sysmel_pal_window_destroy(handle).
        
        windowSystem onWindowClosed: self.
        windowSystem := nil.
        handle := nil.
    }.

    public method convertAndDispatchEvent: (event: SysmelPAL::WindowEvent ref) ::=> Void := {
        switch: event type withCases: #{
        SysmelPAL::WindowEventType::Exposed : {
            self dispatchEvent: ExposeEvent new
        }.
        SysmelPAL::WindowEventType::Close : {
            self dispatchEvent: WindowCloseRequestEvent new
        }.
        _:{}
        }
    }.

    public method dispatchEvent: (event: Event) ::=> Void := {
        eventHandler ifNotNil: {
            eventHandler processEvent: event
        }
    }.
}.
