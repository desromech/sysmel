public class WindowBasicRenderer superclass: WindowRenderer; definition: {
    private field window => Window.
    private field handle => SysmelPAL::WindowRendererHandle.

    public method initializeWithWindow: (initialWindow: Window) handle: (initialHandle: SysmelPAL::WindowRendererHandle) ::=> Void := {
        window := initialWindow.
        handle := initialHandle
    }.

    public override method destroy => Void := {
        handle ifNil: {return: void}.

        sysmel_pal_windowRenderer_destroy(handle).
        handle := nil.
    }.

    public method beginFrameClearingWithRed: (red: UInt8) green: (green: UInt8) blue: (blue: UInt8) alpha: (alpha: UInt8) ::=> Void
        := sysmel_pal_windowRenderer_beginFrame(handle, red, green, blue, alpha).

    public method endFrame => Void
        := sysmel_pal_windowRenderer_endFrame(handle).

}.

Window definition: {
    public method newBasicRenderer => WindowBasicRenderer := {
        self assert: renderer isNil.

        let rendererHandle := sysmel_pal_windowRenderer_create(handle, 0u32).
        rendererHandle ifNil: {
            self error: "Failed to create form renderer."
        }.

        let basicRenderer := WindowBasicRenderer new
            initializeWithWindow: self handle: rendererHandle;
            yourself.

        renderer := basicRenderer.

        basicRenderer
    }

}.
    