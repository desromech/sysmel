FunctionBytecodeAssemblerAbstractOperand definition: {
    public abstract method encodedValueForInstruction: (instruction: FunctionBytecodeAssemblerAbstractInstruction) ::=> Int16
        := self subclassResponsibility.
}.

FunctionBytecodeAssemblerVectorOperand definition: {
    public method hasDestinationUsage => Boolean
        := self hasAllocaDestination || self hasNonAllocaDestination.

    public method hasNonDestinationUsage => Boolean
        := self hasLoadStoreUsage || self hasNonLoadStoreUsage.

    public method isLocalOnlyAlloca => Boolean
        := (self hasAllocaDestination && self hasNonAllocaDestination not) &&
            (self hasLoadStoreUsage && self hasNonLoadStoreUsage not).

    public override method encodedValueForInstruction: (instruction: FunctionBytecodeAssemblerAbstractInstruction) ::=> Int16
        := (self index << FunctionBytecode::OperandVectorName::Bits) | self vectorType.

    public override method printOn: (stream: Stream) ::=> Void := {
        if: self name ~~ nil then: (stream print: self name; nextPut: ':'c8).
        stream nextPutAll: (FunctionBytecode::OperandVectorNameDictionary at: self vectorType); nextPut: ':'c8; print: self index
    }.
}.

FunctionBytecodeAssemblerAbstractInstruction definition: {
    public override method initialize => Void := {
        self pc: 0sz
    }.

    public virtual method endPC => Size
        := self pc.

    public override method encodedValueForInstruction: (instruction: FunctionBytecodeAssemblerAbstractInstruction) ::=> Int16
        := (self pc - instruction endPC) asInt16.

    public virtual method assembledSize => Size := 0sz.

    public virtual method assembleIn: (instructionStream: ByteArray) ::=> Void := {}.

    public virtual method isBranchInstruction => Boolean
        := false.

    public virtual method destinationInstruction => FunctionBytecodeAssemblerAbstractInstruction
        := nil.

    public virtual method markOperandUsages => Void := {}.
    public virtual method optimizeLocalOnlyAllocasWith: (assembler: FunctionBytecodeAssembler) ::=> Void := {}.
}.

FunctionBytecodeAssemblerLabel definition: {
}.

FunctionBytecodeAssemblerInstruction definition: {
    public override method initialize => Void := {
        super initialize.
        self operands: #()
    }.

    public override method assembledSize => Size
        := 1sz + (self operands size * 2sz).

    public override method endPC => Size
        := self pc + self assembledSize.

    public override method printOn: (stream: Stream) ::=> Void := {
        if: self name ~~ nil then: (stream print: self name; nextPut: ':'c8).
        stream nextPutAll: (self pc printString padLeft: 4sz with: '0'c8)
    }.

    public override method fullPrintOn: (stream: Stream) ::=> Void := {
        stream print: self; nextPutAll: (FunctionBytecode::OpcodeNameDictionary at: self standardOpcode).
        self operands do: {:(FunctionBytecodeAssemblerVectorOperand)operand :: Void |
            stream print: operand
        }
    }.

    public override method assembleIn: (instructionStream: ByteArray) ::=> Void := {
        let destination mutable := self pc.
        let standardOpcode := self standardOpcode.
        let opcode mutable := standardOpcode.
        
        standardOpcode >= FunctionBytecode::Opcode::FirstVariable ifTrue: {
            let operandCount := self operands size - (FunctionBytecode::OpcodeExtraImplicitOperandCountTable __uncheckedByteSlotAt__: standardOpcode asSize) asSize.
            let opcodeOperandCount := (standardOpcode = FunctionBytecode::Opcode::CaseJump
                ifTrue: operandCount / 2sz
                ifFalse: operandCount).
            opcode := opcode + (opcodeOperandCount asUInt8 & 16r0F u8)
        }.
        
        instructionStream at: destination put: opcode.
        destination := destination + 1sz.

        self operands do: {:(FunctionBytecodeAssemblerAbstractOperand)eachOperand |
            let encodedOperand := eachOperand encodedValueForInstruction: self.
            let lowByte := (encodedOperand & 16rFF i16) asUInt8.
            let highByte := ((encodedOperand >> 8i16) & 16rFF i16) asUInt8.
            instructionStream at: destination put: lowByte. destination := destination + 1sz.
            instructionStream at: destination put: highByte. destination := destination + 1sz.
        }
    }.

    public method isAllocaInstruction => Boolean := {
        let opcode := self standardOpcode.
        (opcode = FunctionBytecode::Opcode::Alloca) || (opcode = FunctionBytecode::Opcode::AllocaWithValue)
    }.

    public override method isBranchInstruction => Boolean := {
        let opcode := self standardOpcode.
        (opcode = FunctionBytecode::Opcode::Jump) || (opcode = FunctionBytecode::Opcode::JumpIfTrue)
        || (opcode = FunctionBytecode::Opcode::JumpIfFalse) || (opcode = FunctionBytecode::Opcode::CaseJump)
    }.

    public method isLoadStoreInstruction => Boolean := {
        let opcode := self standardOpcode.
        (opcode = FunctionBytecode::Opcode::Load) || (opcode = FunctionBytecode::Opcode::Store)
    }.

    public method isLoadInstruction => Boolean
        := self standardOpcode = FunctionBytecode::Opcode::Load.

    public method isStoreInstruction => Boolean
        := self standardOpcode = FunctionBytecode::Opcode::Store.

    public override method destinationInstruction => FunctionBytecodeAssemblerAbstractInstruction
        := self operands last.

    public override method markOperandUsages => Void := {
        let destinationOperandCount := (FunctionBytecode::OpcodeDestinationOperandCountTable uint8At: self standardOpcode asSize) asSize.
        let operands := self operands.
        let operandCount := operands size - (if: self isBranchInstruction then: 1sz else: 0sz).
        
        let i mutable := 0sz.
        if: self isAllocaInstruction then: {
            while: i < destinationOperandCount do: (
                (operands at: i) hasAllocaDestination: true
            ) continueWith: (i := i + 1sz)
        } else: {
            while: i < destinationOperandCount do: (
                (operands at: i) hasNonAllocaDestination: true
            ) continueWith: (i := i + 1sz)
        }.

        if: self isLoadInstruction then: {
            while: i < operandCount do: (
                (operands at: i) hasLoadStoreUsage: true
            ) continueWith: (i := i + 1sz)
        } else: {
            if: self isStoreInstruction then: {
                while: i < operandCount do: (
                    if: i = 0sz then: {
                        (operands at: i) hasLoadStoreUsage: true
                    } else: {
                        (operands at: i) hasLoadStoreUsage: false
                    }
                ) continueWith: (i := i + 1sz)
            } else: {
                while: i < operandCount do: (
                    (operands at: i) hasNonLoadStoreUsage: true
                ) continueWith: (i := i + 1sz)
            }
        }
    }.

    public method optimizeLocalOnlyAllocaWith: (assembler: FunctionBytecodeAssembler) ::=> Void := {
        let reference := self operands first.
        if: reference isLocalOnlyAlloca then: {
            let value := (if: self standardOpcode = FunctionBytecode::Opcode::Alloca
                then: (assembler literal: nil)
                else: self operands third).

            self standardOpcode: FunctionBytecode::Opcode::Move.
            self operands: (Array with: reference with: value)
        }
    }.

    public method optimizeLocalOnlyLoadWith: (assembler: FunctionBytecodeAssembler) ::=> Void := {
        let reference := self operands second.
        if: reference isLocalOnlyAlloca then: {
            self standardOpcode: FunctionBytecode::Opcode::Move
        }
    }.

    public method optimizeLocalOnlyStoreWith: (assembler: FunctionBytecodeAssembler) ::=> Void := {
        let reference := self operands first.
        if: reference isLocalOnlyAlloca then: {
            self standardOpcode: FunctionBytecode::Opcode::Move
        }
    }.

    public override method optimizeLocalOnlyAllocasWith: (assembler: FunctionBytecodeAssembler) ::=> Void := {
        if: self isAllocaInstruction then: (self optimizeLocalOnlyAllocaWith: assembler).
        if: self isLoadInstruction then: (self optimizeLocalOnlyLoadWith: assembler).
        if: self isStoreInstruction then: (self optimizeLocalOnlyStoreWith: assembler).
    }.
}.

FunctionBytecodeAssembler definition: {
    public override method initialize => Void := {
        self arguments: #().
        self captures: #().
        self literals: OrderedCollection new.
        self literalDictionary: IdentityDictionary new.
        self temporaries: OrderedCollection new.
        self usedTemporaryCount: 0sz.
    }.

    public method addInstruction: (instruction: FunctionBytecodeAssemblerAbstractInstruction) ::=> instruction class := {
        let lastInstruction := self lastInstruction.
        instruction previous: lastInstruction.

        if: lastInstruction == nil then: {
            self firstInstruction: instruction.
        } else: {
            lastInstruction next: instruction.
        }.
        
        self lastInstruction: instruction.

        instruction
            sourcePosition: self sourcePosition;
            sourceEnvironment: self sourceEnvironment;
            sourceASTNode: self sourceASTNode;
            yourself
    }.

    public inline method instructionsDo: (aBlock: FunctionBytecodeAssemblerAbstractInstruction => Void) ::=> Void := {
        let position mutable := self firstInstruction.

        while: position isNotNil do: {
            let nextPosition := position next.
            aBlock(position).
            position := nextPosition
        }
    }.

    public method removeInstruction: (instruction: FunctionBytecodeAssemblerAbstractInstruction) ::=> Void := {
        let previous := instruction previous.
        let next := instruction next.

        if: previous == nil then: {
            self firstInstruction: next.
        } else: {
            previous next: next
        }.

        if: next == nil then: {
            self lastInstruction: previous.
        } else: {
            next previous: previous
        }.
    }.

    public method makeArgumentWithIndex: (argumentIndex: Size) ::=> FunctionBytecodeAssemblerVectorOperand
        := FunctionBytecodeAssemblerVectorOperand new
            index: argumentIndex asInt16;
            vectorType: FunctionBytecode::OperandVectorName::Arguments;
            yourself.

    public method argumentNames: (argumentNames: Array) ::=> Array := {
        let arguments := (argumentNames collectWithIndex: {:(Symbol)name :(Size)index :: FunctionBytecodeAssemblerVectorOperand |
            (self makeArgumentWithIndex: index)
                name: name;
                yourself
        }).
        self arguments: arguments.
        arguments
    }.

    public method makeCaptureWithIndex: (captureIndex: Size) ::=> FunctionBytecodeAssemblerVectorOperand
        := FunctionBytecodeAssemblerVectorOperand new
            index: captureIndex asInt16;
            vectorType: FunctionBytecode::OperandVectorName::Captures;
            yourself.

    public method captureNames: (captureNames: Array) ::=> Array := {
        let captures := (captureNames collectWithIndex: {:(Symbol)name :(Size)index :: FunctionBytecodeAssemblerVectorOperand |
            (self makeCaptureWithIndex: index)
                name: name;
                yourself
        }). 
        self captures: captures.
        self captures
    }.

    public method literal: literalValue ::=> FunctionBytecodeAssemblerVectorOperand := {
        (self literalDictionary atOrNil: literalValue) ifNil: {
            let newLiteralIndex := self literals size asInt16.
            let operand := FunctionBytecodeAssemblerVectorOperand new
                index: newLiteralIndex;
                vectorType: FunctionBytecode::OperandVectorName::Literal;
                yourself.
            self literalDictionary at: literalValue put: operand.
            self literals add: literalValue.
            operand
        }
    }.

    public method temporary: (name: Symbol) ::=> FunctionBytecodeAssemblerVectorOperand := {
        let operand := FunctionBytecodeAssemblerVectorOperand new
            index: self temporaries size asInt16;
            vectorType: FunctionBytecode::OperandVectorName::Local;
            yourself.
        self temporaries add: operand.
        self usedTemporaryCount: self temporaries size.
        operand
    }.

    public method withASTNode: (node: ASTNode) do: aBlock := {
        let oldSourcePosition := self sourcePosition.
        self sourcePosition: node sourcePosition.

        let result := aBlock().
        self sourcePosition: oldSourcePosition.

        result
    }.

    public method withSourceEnvironment: (environment: Environment) do: aBlock := {
        let oldSourceEnvironment := self sourceEnvironment.
        self sourceEnvironment: environment.

        let result := aBlock().

        self sourceEnvironment: oldSourceEnvironment.

        result
    }.

    public method allocaPointerOfType: (pointerLikeType: FunctionBytecodeAssemblerVectorOperand) in: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::Alloca;
            operands: (Array with: result with: pointerLikeType);
            yourself).

    public method allocaWithValue: (value: FunctionBytecodeAssemblerVectorOperand) inPointerOfType: (pointerLikeType: FunctionBytecodeAssemblerVectorOperand) in: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::AllocaWithValue;
            operands: (Array with: result with: pointerLikeType with: value);
            yourself).

    public method caseJumpOn: (value: FunctionBytecodeAssemblerVectorOperand) keys: (keys: Array) destinations: (destinations: Array) defaultDestination: (defaultDestination: FunctionBytecodeAssemblerLabel) ::=> FunctionBytecodeAssemblerInstruction := {
        self assert: keys size <= 16rF sz.
        self assert: keys size = destinations size.
        self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::CaseJump;
            operands: (Array with: value) -- keys -- destinations -- (Array with: defaultDestination);
            yourself)
    }.

    public method call: (function: FunctionBytecodeAssemblerVectorOperand) arguments: (arguments: Array) result: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction := {
        self assert: arguments size <= 16rF sz.
        self addInstruction: (FunctionBytecodeAssemblerInstruction new
                    standardOpcode: FunctionBytecode::Opcode::Call;
                    operands: (Array with: result with: function) -- arguments;
                    yourself)
    }.

    public method uncheckedCall: (function: FunctionBytecodeAssemblerVectorOperand) arguments: (arguments: Array) result: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction := {
        self assert: arguments size <= 16rF sz.
        self addInstruction: (FunctionBytecodeAssemblerInstruction new
                    standardOpcode: FunctionBytecode::Opcode::UncheckedCall;
                    operands: (Array with: result with: function) -- arguments;
                    yourself)
    }.

    public method coerceValue: (value: FunctionBytecodeAssemblerVectorOperand) toType: (targetType: FunctionBytecodeAssemblerVectorOperand) in: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::CoerceValue;
            operands: (Array with: result with: targetType with: value);
            yourself).

    public method makeAssociationWithKey: (key: FunctionBytecodeAssemblerVectorOperand) value: (value: FunctionBytecodeAssemblerVectorOperand) in: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::MakeAssociation;
            operands: (Array with: result with: key with: value);
            yourself).

    public method makeClosure: (functionDefinition: FunctionBytecodeAssemblerVectorOperand) withCaptures: (captures: Array) in: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction := {
        self assert: captures size <= 16rF sz.
        self addInstruction: (FunctionBytecodeAssemblerInstruction new
                    standardOpcode: FunctionBytecode::Opcode::MakeClosureWithCaptures;
                    operands: (Array with: result with: functionDefinition) -- captures;
                    yourself)
    }.

    public method label: (name: Symbol) ::=> FunctionBytecodeAssemblerLabel
        := FunctionBytecodeAssemblerLabel new
            name: name;
            yourself.

    public method beginLabel: (label: FunctionBytecodeAssemblerLabel) ::=> FunctionBytecodeAssemblerLabel
        := self addInstruction: label.

    public method beginLabelNamed: (name: Symbol) ::=> FunctionBytecodeAssemblerLabel
        := self beginLabel: (self label: name).

    public method loadPointer: (pointer: FunctionBytecodeAssemblerVectorOperand) in: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::Load;
            operands: (Array with: result with: pointer);
            yourself).

    public method jumpTo: (destination: FunctionBytecodeAssemblerAbstractInstruction) ::=> FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::Jump;
            operands: (Array with: destination);
            yourself).

    public method jumpTo: (destination: FunctionBytecodeAssemblerAbstractInstruction) ifTrue: (condition: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::JumpIfTrue;
            operands: (Array with: condition with: destination);
            yourself).

    public method jumpTo: (destination: FunctionBytecodeAssemblerAbstractInstruction) ifFalse: (condition: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::JumpIfFalse;
            operands: (Array with: condition with: destination);
            yourself).

    public method makeArrayWithElements: (elements: Array) in: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction := {
        self assert: elements size <= 16rF sz.
        self addInstruction: (FunctionBytecodeAssemblerInstruction new
                    standardOpcode: FunctionBytecode::Opcode::MakeArrayWithElements;
                    operands: (Array with: result) -- elements;
                    yourself)
    }.

    public method makeByteArrayWithElements: (elements: Array) in: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction := {
        self assert: elements size <= 16rF sz.
        self addInstruction: (FunctionBytecodeAssemblerInstruction new
                    standardOpcode: FunctionBytecode::Opcode::MakeByteArrayWithElements;
                    operands: (Array with: result) -- elements;
                    yourself)
    }.

    public method makeDictionaryWithElements: (elements: Array) in: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction := {
        self assert: elements size <= 16rF sz.
        self addInstruction: (FunctionBytecodeAssemblerInstruction new
                    standardOpcode: FunctionBytecode::Opcode::MakeDictionaryWithElements;
                    operands: (Array with: result) -- elements;
                    yourself)
    }.

    public method move: (source: FunctionBytecodeAssemblerVectorOperand) into: (destination: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::Move;
            operands: (Array with: destination with: source);
            yourself).

    public method nop => FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::Nop;
            yourself).

    public method return: (operand: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::Return;
            operands: (Array with: operand);
            yourself).

    public method sendTo: (receiver: FunctionBytecodeAssemblerVectorOperand) selector: (selector: FunctionBytecodeAssemblerVectorOperand) arguments: (arguments: Array) result: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction := {
        self assert: arguments size <= 16rF sz.
        self addInstruction: (FunctionBytecodeAssemblerInstruction new
                    standardOpcode: FunctionBytecode::Opcode::Send;
                    operands: (Array with: result with: selector with: receiver) -- arguments;
                    yourself)
    }.

    public method sendTo: (receiver: FunctionBytecodeAssemblerVectorOperand) receiverLookupType: (receiverLookupType: FunctionBytecodeAssemblerVectorOperand) selector: (selector: FunctionBytecodeAssemblerVectorOperand) arguments: (arguments: Array) result: (result: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction := {
        self assert: arguments size <= 16rF sz.
        self addInstruction: (FunctionBytecodeAssemblerInstruction new
                    standardOpcode: FunctionBytecode::Opcode::SendWithLookup;
                    operands: (Array with: result with: receiverLookupType with: selector with: receiver) -- arguments;
                    yourself)
    }.

    public method storeValue: (value: FunctionBytecodeAssemblerVectorOperand) inPointer: (pointer: FunctionBytecodeAssemblerVectorOperand) ::=> FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::Store;
            operands: (Array with: pointer with: value);
            yourself).

    public method breakpoint => FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::Breakpoint;
            yourself).

    public method unreachable => FunctionBytecodeAssemblerInstruction
        := self addInstruction: (FunctionBytecodeAssemblerInstruction new
            standardOpcode: FunctionBytecode::Opcode::Unreachable;
            yourself).

    public method optimizeTemporaries => Void := {
        self instructionsDo: {:(FunctionBytecodeAssemblerAbstractInstruction)each :: Void |
            each markOperandUsages.
        }.

        self instructionsDo: {:(FunctionBytecodeAssemblerAbstractInstruction)each :: Void  |
            each optimizeLocalOnlyAllocasWith: self
        }.

        ## Optimize out the temporaries that are not used.
        let usedTemporaryCount mutable := 0i16.
        self temporaries do: {:(FunctionBytecodeAssemblerVectorOperand)each :: Void |
            if: each hasNonDestinationUsage then: {
                if: each hasDestinationUsage then: {
                    each index: usedTemporaryCount.
                    usedTemporaryCount := usedTemporaryCount + 1i16
                } else: {
                    let nilLiteral := self literal: nil.
                    each index: nilLiteral index.
                    each vectorType: nilLiteral vectorType.
                }.
            } else: {
                each index: -1i16.
            }
        }.

        self usedTemporaryCount: usedTemporaryCount asSize.
    }.

    public method optimizeJumps => Void := {
        self instructionsDo: {:(FunctionBytecodeAssemblerAbstractInstruction)each :: Void  |
            if: each isBranchInstruction && (each destinationInstruction == each next) then: {
                self removeInstruction: each
            }
        }.
    }.

    public method optimize => Void := {
        self
            optimizeJumps;
            optimizeTemporaries
            
    }.

    public method build => FunctionBytecode := {
        let result := FunctionBytecode new
            literalVector: self literals asArray;
            argumentCount: self arguments size;
            captureVectorSize: self captures size;
            localVectorSize: self usedTemporaryCount;
            yourself.

        let debugSourcePositions := OrderedOffsetTableBuilder new.
        let debugSourceEnvironments := OrderedOffsetTableBuilder new.

        ## Compute the instruction stream size, and the pc of each instruction. Also construct the debug information.
        let instructionOffset mutable := 0sz.
        self instructionsDo: {:(FunctionBytecodeAssemblerAbstractInstruction)eachInstruction :: Void |
            let pc := instructionOffset.
            eachInstruction pc: pc.
            instructionOffset := instructionOffset + eachInstruction assembledSize.

            ## Generate the debug table entries.
            debugSourcePositions withOffset: pc asUInt32 addValue: eachInstruction sourcePosition.
            debugSourceEnvironments withOffset: pc asUInt32 addValue: eachInstruction sourceEnvironment.
        }.

        ## Assemble the instructions.
        let instructionStream := ByteArray new: instructionOffset.
        result instructions: instructionStream.
        self instructionsDo: {:(FunctionBytecodeAssemblerAbstractInstruction)eachInstruction :: Void |
            eachInstruction assembleIn: instructionStream
        }.

        ## Store the debug information tables.
        result
            debugSourcePositions: debugSourcePositions finish;
            debugSourceEnvironments: debugSourceEnvironments finish.

        result
    }.
}.
