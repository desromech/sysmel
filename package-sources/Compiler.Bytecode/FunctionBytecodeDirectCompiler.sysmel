FunctionBytecodeDirectCompiler definition: {
    __Meta__ definition: {
        public override method compileFunctionSourceAnalyzedDefinition: (sourceAnalyzedDefinition: FunctionSourceAnalyzedDefinition) ::=> FunctionBytecode
            := self new compileFunctionSourceAnalyzedDefinition: sourceAnalyzedDefinition.

        public method compileFunctionDefinition: (functionDefinition: FunctionDefinition) ::=> FunctionBytecode
            := self new compileFunctionDefinition: functionDefinition.

        public method compileFunction: (function: Function) ::=> FunctionBytecode
            := self new compileFunction: function.
    }.

    public override method initialize => Void := {
        self assembler: FunctionBytecodeAssembler new.
        self bindingDictionary: MethodDictionary new.
    }.

    public method generateArgumentForNode: (argumentNode: ASTArgumentNode) index: (index: Size) ::=> FunctionBytecodeAssemblerVectorOperand := {
        let binding := argumentNode binding.
        self assert: binding isNotNil.

        let argumentOperand := self assembler makeArgumentWithIndex: index.
        argumentOperand name: binding name.

        self bindingDictionary at: binding put: argumentOperand.

        argumentOperand
    }.

    public method generateCaptureForBinding: (captureBinding: SymbolCaptureBinding) index: (index: Size) ::=> FunctionBytecodeAssemblerVectorOperand := {
        let captureOperand := self assembler makeCaptureWithIndex: index.
        captureOperand name: captureBinding name.

        self bindingDictionary at: captureBinding put: captureOperand.

        captureOperand
    }.

    public method compileFunctionSourceAnalyzedDefinition: (sourceAnalyzedDefinition: FunctionSourceAnalyzedDefinition) ::=> FunctionBytecode := {
        self assembler
            sourcePosition: sourceAnalyzedDefinition sourcePosition;
            arguments: (sourceAnalyzedDefinition argumentNodes collectWithIndex: {:(ASTArgumentNode)argumentNode :(Size)index :: FunctionBytecodeAssemblerVectorOperand |
                self generateArgumentForNode: argumentNode index: index
            }) asArray;
            captures: (sourceAnalyzedDefinition captures collectWithIndex: {:(SymbolCaptureBinding)captureBinding :(Size)index :: FunctionBytecodeAssemblerVectorOperand |
                self generateCaptureForBinding: captureBinding index: index
            }) asArray.

        let resultValue := sourceAnalyzedDefinition bodyNode compileBytecodesDirectlyWith: self.
        self assembler return: resultValue.

        self assembler optimize.
        self assembler build
    }.

    public method compileFunctionDefinition: (functionDefinition: FunctionDefinition) ::=> FunctionBytecode
        := self compileFunctionSourceAnalyzedDefinition: functionDefinition ensureSourceAnalyzedDefinition.

    public method compileFunction: (function: Function) ::=> FunctionBytecode
        := self compileFunctionDefinition: function definition.

    public method getValueForLocalBinding: (localBinding: SymbolAnalysisBinding) ::=> FunctionBytecodeAssemblerVectorOperand
        := self bindingDictionary at: localBinding.

    public method functionDefinitionValueFor: (functionDefinition: FunctionDefinition) ::=> FunctionBytecodeAssemblerVectorOperand
        := self assembler literal: functionDefinition.

    public method setValue: (value: FunctionBytecodeAssemblerVectorOperand) forBinding: (binding: SymbolBinding) ::=> Void := {
        self assert: binding isNotNil.
        self bindingDictionary at: binding put: value
    }.

    public method withBreakLabel: (newBreakLabel: FunctionBytecodeAssemblerLabel) continueLabel: (newContinueLabel: FunctionBytecodeAssemblerLabel) do: (aBlock: () => Void) ::=> Void := {
        let oldBreakLabel := self breakLabel.
        let oldContinueLabel := self continueLabel.

        self breakLabel: newBreakLabel.
        self continueLabel: newContinueLabel.

        {|
            aBlock().
        } ensure: {:: Void |
            self breakLabel: oldBreakLabel.
            self continueLabel: oldContinueLabel.
        }
    }.
}.

