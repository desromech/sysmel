FunctionDefinition
    withSelector: #asFunctionWithCaptureVector: addMethod: {:(FunctionDefinition)self :(Array)captureVector :: Function |
        Function new
            flags: self flags;
            argumentCount: self argumentCount;
            definition: self;
            yourself
    };
    withSelector: #asFunction addMethod: {:(FunctionDefinition)self :: Function |
        self asFunctionWithCaptureVector: #()
    }.

let opcodeNameDictionary := #{
    FunctionBytecode::Opcode::Nop : #nop.
    FunctionBytecode::Opcode::Breakpoint : #breakpoint.
    FunctionBytecode::Opcode::Unreachable : #unreachable.

    FunctionBytecode::Opcode::Return : #return.
    FunctionBytecode::Opcode::Jump : #jump.
    FunctionBytecode::Opcode::CountExtension : #countExtension.

    FunctionBytecode::Opcode::Alloca : #alloca.
    FunctionBytecode::Opcode::Move : #move.
    FunctionBytecode::Opcode::Load : #load.
    FunctionBytecode::Opcode::LoadSymbolValueBinding : #loadSymbolValueBinding.
    FunctionBytecode::Opcode::Store : #store.
    FunctionBytecode::Opcode::JumpIfTrue : #jumpIfTrue.
    FunctionBytecode::Opcode::JumpIfFalse : #jumpIfFalse.
    FunctionBytecode::Opcode::SetDebugValue : #setDebugValue.

    FunctionBytecode::Opcode::AllocaWithValue : #allocaWithValue.
    FunctionBytecode::Opcode::CoerceValue : #coerceValue.
    FunctionBytecode::Opcode::DownCastValue : #downCastValue.
    FunctionBytecode::Opcode::UncheckedDownCastValue : #uncheckedDownCastValue.
    FunctionBytecode::Opcode::MakeAssociation : #makeAssociation.
    FunctionBytecode::Opcode::MakeClosureWithVector : #makeClosureWithVector.
    FunctionBytecode::Opcode::SlotAt : #slotAt.
    FunctionBytecode::Opcode::SlotReferenceAt : #slotReferenceAt.
    FunctionBytecode::Opcode::SlotAtPut : #slotAtPut.
    FunctionBytecode::Opcode::RefSlotAt : #refSlotAt.
    FunctionBytecode::Opcode::RefSlotReferenceAt : #refSlotReferenceAt.
    FunctionBytecode::Opcode::RefSlotAtPut : #refSlotAtPut.

    FunctionBytecode::Opcode::Call : #call.
    FunctionBytecode::Opcode::UncheckedCall : #uncheckedCall.
    FunctionBytecode::Opcode::Send : #send.
    FunctionBytecode::Opcode::SendWithLookup : #sendWithLookup.

    FunctionBytecode::Opcode::MakeArrayWithElements : #makeArrayWithElements.
    FunctionBytecode::Opcode::MakeByteArrayWithElements : #makeByteArrayWithElements.
    FunctionBytecode::Opcode::MakeClosureWithCaptures : #makeClosureWithCaptures.
    FunctionBytecode::Opcode::MakeDictionaryWithElements : #makeDictionaryWithElements.
    FunctionBytecode::Opcode::MakeTupleWithElements : #makeTupleWithElements.

    FunctionBytecode::Opcode::CaseJump : #caseJump.
}.
public: #FunctionBytecode::OpcodeNameDictionary with: opcodeNameDictionary.

let operandVectorNameDictionary := #{
    FunctionBytecode::OperandVectorName::Arguments : #arguments.
    FunctionBytecode::OperandVectorName::Captures : #captures.
    FunctionBytecode::OperandVectorName::Literal : #literal.
    FunctionBytecode::OperandVectorName::Local : #local.
}.
public: #FunctionBytecode::OperandVectorNameDictionary with: operandVectorNameDictionary.

FunctionBytecode definition: {

    public final method computeOperandCountForOpcode: (opcode: UInt8) countExtension: (countExtension: Size) ::=> Size := {
        if: opcode >= FunctionBytecode::Opcode::FirstVariable then: {
            let standardOpcode := opcode & 16rF0 u8.
            let opcodeVariantNumber := opcode & 16r0F u8.
            let variantSize := (countExtension << 4sz) | (opcodeVariantNumber asSize).
            let implicitOperandCount := (FunctionBytecode::OpcodeExtraImplicitOperandCountTable __uncheckedByteSlotAt__: standardOpcode asSize) asSize.

            if: standardOpcode = FunctionBytecode::Opcode::CaseJump then: {
                variantSize*2sz + implicitOperandCount
            } else: {
                variantSize + implicitOperandCount
            }
        } else: {
            (opcode >> 4u8) asSize
        }
    }.

    public final method isBranchOpcode: (opcode: UInt8) ::=> Boolean
        := (opcode = FunctionBytecode::Opcode::Jump) ||
            (opcode = FunctionBytecode::Opcode::JumpIfTrue) ||
            (opcode = FunctionBytecode::Opcode::JumpIfFalse).

    public method decodedInstructionsDo: aBlock ::=> Void := {
        let instructions := self instructions.
        let instructionsSize := instructions size.
        let pc mutable := 0sz.
        let countExtension mutable := 0sz.
        let instructionPC mutable := 0sz.

        while: pc < instructionsSize do: {
            let opcode := instructions __uncheckedByteSlotAt__: pc.
            pc := pc + 1sz.

            opcode = FunctionBytecode::Opcode::CountExtension ifTrue: {
                let lowByte := (instructions __uncheckedByteSlotAt__: pc).
                let highByte := (instructions __uncheckedByteSlotAt__: pc + 1sz).
                pc := pc + 2sz.

                countExtension := (countExtension << 16sz) | (highByte asSize << 8sz) | lowByte asSize.
            } ifFalse: {
                let operandCount := (self computeOperandCountForOpcode: opcode countExtension: countExtension).
                let operands := Array new: operandCount.
                let i mutable := 0sz.
                while: (i < operandCount) do: {
                    let lowByte := (instructions __uncheckedByteSlotAt__: pc).
                    let highByte := (instructions __uncheckedByteSlotAt__: pc + 1sz).
                    let operandIndex := ((lowByte asUInt16) | (highByte asUInt16 << 8u16)) asInt16.
                    operands at: i put: operandIndex.
                    pc := pc + 2sz
                } continueWith: (i := i + 1sz).

                let nextPC := pc.
                aBlock(opcode, operands, instructionPC, nextPC).

                instructionPC := pc.
                countExtension := 0sz.
            }.
        }.
    }.

    public method printOpcodeMnemonic: (opcode: UInt8) on: (stream: Stream) ::=> Void := {
        if: opcode >= FunctionBytecode::Opcode::FirstVariable then: {
            let standardOpcode := opcode & 16rF0 u8.
            let opcodeVariantNumber := opcode & 16r0F u8.
            stream nextPutAll: (opcodeNameDictionary at: standardOpcode); print: opcodeVariantNumber.
        } else: {
            stream nextPutAll: (opcodeNameDictionary at: opcode).
        }
    }.

    public method allBranchTargetsDo: (aBlock: (IntPointer) => Void) := {
        self decodedInstructionsDo: {:(UInt8)opcode :(Array)operands :(Size)pc :(Size)nextPC :: Void |
            (opcode >= FunctionBytecode::Opcode::FirstVariable) && ((opcode & 16rF0 u8) = FunctionBytecode::Opcode::CaseJump) ifTrue: {
                let caseCount := (operands size - 2sz) / 2sz.
                let i mutable := 0sz.
                while: i <= caseCount do: {
                    let jumpDelta => Int16 := operands at: 1sz + caseCount + i.
                    let jumpDestination := nextPC asIntPointer + jumpDelta asIntPointer.
                    aBlock(jumpDestination).
                } continueWith: (i := i + 1sz).

                return: void.
            }.

            (self isBranchOpcode: opcode) ifTrue: {
                let jumpDelta => Int16 := operands last.
                let jumpDestination := nextPC asIntPointer + jumpDelta asIntPointer.
                aBlock(jumpDestination).
                aBlock(nextPC asIntPointer).
            }
        }.
    }.

    public override method fullPrintOn: (stream: Stream) ::=> Void := {
        stream print: self class; nl;
            nextPutAll: "argumentCount: "; print: self argumentCount; nl;
            nextPutAll: "captureVectorSize: "; print: self captureVectorSize; nl;
            nextPutAll: "localVectorSize: "; print: self localVectorSize; nl;
            nextPutAll: "literalVector: "; print: self literalVector; nl;
            nextPutAll: "temporaryTypes: "; print: self temporaryTypes; nl;
            nextPutAll: "instructions: ["; nl.

        self decodedInstructionsDo: {:(UInt8)opcode :(Array)operands :(Size)pc :(Size)nextPC :: Void |
            stream nextPutAll: "  "; nextPutAll: (pc printString padLeft: 4sz with: '0'c8); nextPutAll: " ".
            self printOpcodeMnemonic: opcode on: stream.
            
            let isBranchInstruction := self isBranchOpcode: opcode.
            operands doWithIndex: {:(Int16)each :(Size)operandIndex :: Void |
                stream nextPut: ' 'c8.
                if: isBranchInstruction && ((operandIndex + 1sz) = operands size) then: {
                    stream print: each; nextPut: '|'c8; nextPutAll: ((nextPC asSize + each asSize) printString padLeft: 4sz with: '0'c8)
                } else: {
                    let operandVector := each & FunctionBytecode::OperandVectorName::BitMask.
                    let operandIndex := each >> FunctionBytecode::OperandVectorName::Bits.
                    stream nextPutAll: (operandVectorNameDictionary at: operandVector); nextPut: '@'c8; print: operandIndex.
                    if: operandVector = FunctionBytecode::OperandVectorName::Literal
                        then: (stream nextPut: ':'c8; print: (self literalVector at: operandIndex asSize)).
                }.
            }.
            stream nl.
        }.

        stream nextPutAll: "]"; nl
    }.

    public method asFunctionDefinition => FunctionDefinition
        := FunctionDefinition new
            flags: 0sz;
            argumentCount: self argumentCount;
            bytecode: self;
            yourself.

    public method asFunction => Function
        := self asFunctionDefinition asFunction.
}.
