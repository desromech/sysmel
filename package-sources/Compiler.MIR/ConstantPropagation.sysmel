MIROperation definition: {
    public method addConstantFoldingRule: (aBlock: MIRInstruction => MIRValue) ::=> Void := {
        constantFoldingRules := constantFoldingRules -- (aBlock,)
    }.
}.

MIRInstruction definition: {
    public method evaluateConstantFolding => MIRValue := {
        ## Remove extra move.
        operation isMove && targetPhi isNil && (self size = self firstOperand size) && (self physicalLocationClass == self firstOperand physicalLocationClass) ifTrue: {
            return: self firstOperand
        }.

        let startOperation := operation.
        let rules := startOperation constantFoldingRules,
        let ruleCount := rules size.
        let i mutable := 0sz.
        while: (i < ruleCount) do: {
            let rule => (MIRInstruction => MIRValue) := rules at: i.
            let result := rule(self).
            (self ~~ result) || (self operation ~~ startOperation) ifTrue: {
                return: result
            }
        } continueWith: (i := i + 1sz).
        self 
    }.
}.

MIRFunction definition: {
    public override method performStandardOptimizations => Void := {
        self performConstantPropagation.
        self fuseComparisonAndBranches.
    }.    

    public method performConstantPropagation => Void := {
        let pendingWork := OrderedInsertionIdentitySet new.

        let processInstruction := {:(MIRInstruction)instruction :: Void |
            instruction parentBlock ifNil: {return: void}.

            ## Dead code removal.
            instruction isPure && instruction hasOnlyDebugUsers ifTrue: {
                instruction deleteAllDebugUsers.
                instruction usedValuesDo: {:(MIRValue)eachUsedValue :: Void |
                    eachUsedValue isInstruction && eachUsedValue isPure ifTrue: {
                        pendingWork add: eachUsedValue
                    }
                }.
                
                instruction deleteFromParent.
                return: void
            }.
            
            let startOperation := instruction operation.
            let foldingResult := instruction evaluateConstantFolding.
            (instruction ~~ foldingResult) || (startOperation ~~ instruction operation) ifTrue: {
                instruction usedValuesDo: {:(MIRValue)eachUsedValue :: Void |
                    eachUsedValue isInstruction ifTrue: {
                        pendingWork add: eachUsedValue
                    }
                }.

                instruction usersDo: {:(MIRValue)eachUser :: Void |
                    eachUser isInstruction ifTrue: {
                        pendingWork add: eachUser
                    }
                }.

                instruction replaceWith: foldingResult.
                foldingResult isInstruction ifTrue: {
                    pendingWork add: foldingResult
                }.

                return: void
            }.
        }.

        let processBasicBlock := {:(MIRBasicBlock)basicBlock :: Void |
            basicBlock parent ifNil: {return: void}.

            basicBlock instructionsDo: processInstruction
        }.

        self basicBlocksDo: processBasicBlock.
        while: pendingWork isNotEmpty do: {
            let pendingValue => MIRValue := pendingWork removeLast.
            pendingValue isBasicBlock ifTrue: {
                processBasicBlock(pendingValue uncheckedDownCastTo: MIRBasicBlock)
            } ifFalse: {
                self assert: pendingValue isInstruction.
                processInstruction(pendingValue uncheckedDownCastTo: MIRInstruction)
            }.
        }.

    }.

    public method fuseComparisonAndBranches => Void := {
        self basicBlocksDo: {:(MIRBasicBlock)eachBasicBlock :: Void |
            let position mutable := eachBasicBlock firstInstruction.
            while: position isNotNil do: {
                let nextPosition mutable := position next.
                nextPosition isNotNil &&
                (nextPosition operation == MIR::Operation::ConditionalBranch) &&
                (nextPosition firstOperand == position) && 
                (position userCount = 1sz) ifTrue: {
                    let positionOperation := position operation.
                    let comparisonAndBranchOperation => MIROperation := MIR::ComparisonOperationToBranchMap atOrNil: positionOperation.
                    comparisonAndBranchOperation ifNotNil: {
                        position unregisterFromUsedValues.
                        nextPosition unregisterFromUsedValues.
                        position
                            initializeWithType: Void compilationTarget: self compilationTarget;
                            operation: comparisonAndBranchOperation;
                            unregisterFromUsedValues;
                            operands: position operands -- nextPosition operands allButFirst;
                            registerInUsedValues;
                            next: nextPosition next.
                        eachBasicBlock lastInstruction == nextPosition ifTrue: {
                            eachBasicBlock lastInstruction: position
                        }.

                        nextPosition := nextPosition next
                    }.
                }.

                position := nextPosition.
            }
        }
    }.
}.


MIR::Operation::FatPointerExtractFirst
    addConstantFoldingRule: {:(MIRInstruction)instruction :: MIRValue |
        (instruction firstOperand isInstructionWithOperation: MIR::Operation::FatPointerConstruct) ifTrue: {
            (instruction firstOperand uncheckedDownCastTo: MIRInstruction) firstOperand
        } ifFalse: {
            instruction
        }.
    }.
MIR::Operation::FatPointerExtractSecond
    addConstantFoldingRule: {:(MIRInstruction)instruction :: MIRValue |
        (instruction firstOperand isInstructionWithOperation: MIR::Operation::FatPointerConstruct) ifTrue: {
            (instruction firstOperand uncheckedDownCastTo: MIRInstruction) secondOperand
        } ifFalse: {
            instruction
        }.
    }.
