public class SysmelScanner superclass: Object; definition: {
    public field sourceCode => SourceCode.
    public field sourceString => String.
    public field position => Size.

    public method scanString: (string: String) ::=> Array := {
        self scanSourceCode: (SourceCode new
            text: string;
            name: "string";
            yourself)
    }.

    public method scanSourceCode: (theSourceCode: SourceCode) ::=> Array := {
        sourceCode := theSourceCode.
        sourceString := sourceCode text.
        position := 0sz.

        let tokens := OrderedCollection new.
        while: self atEnd not do: {
            let token := self scanNextToken.
            token ifNotNil: {
                tokens add: token
            }
        }.

        tokens asArray
    }.

    public inline method peek: (offset: Size) ::=> Int32 := {
        let peekPosition := position + offset.
        peekPosition < sourceString size
            ifTrue: (sourceString char8At: peekPosition) asInt32
            ifFalse: -1i32
    }.

    public inline method peek ::=> Int32
        := self peek: 0sz.

    public inline method advance: (increment: Size) ::=> Void := {
        position := position + increment min: sourceString size
    }.

    public inline method advance ::=> Void
        := self advance: 1sz.

    public method atEnd => Boolean
        := position >= sourceString size.

    public method sourcePositionFrom: (startIndex: Size) ::=> SourcePosition
        := SourcePosition for: sourceCode startIndex: startIndex asUInt32 endIndex: position asUInt32.

    public method isOperatorCharacter: (character: Int32) ::=> Boolean := {
        switch: character withCases: #{
        '+'i32 : true.
        '-'i32 : true.
        '/'i32 : true.
        '\\'i32 : true.
        '*'i32 : true.
        '~'i32 : true.
        '<'i32 : true.
        '>'i32 : true.
        '='i32 : true.
        '@'i32 : true.
        '%'i32 : true.
        '|'i32 : true.
        '&'i32 : true.
        '?'i32 : true.
        '!'i32 : true.
        '^'i32 : true.
        _: false
        }
    }.

    public method isNewlineCharacter: (character: Int32) ::=> Boolean
        := (character = '\n'i32) || (character = '\r'i32).

    public method isWhiteCharacter: (character: Int32) ::=> Boolean
        := (0i32 <= character) && (character <= ' 'i32).

    public method isIdentifierStart: (character: Int32) ::=> Boolean
        := (('A'i32 <= character) && (character <= 'Z'i32)) ||
           (('a'i32 <= character) && (character <= 'z'i32)) ||
           ('_'i32 = character).

    public method isIdentifierMiddle: (character: Int32) ::=> Boolean
        := (('A'i32 <= character) && (character <= 'Z'i32)) ||
           (('a'i32 <= character) && (character <= 'z'i32)) ||
           (('0'i32 <= character) && (character <= '9'i32)) ||
           ('_'i32 = character).

    public method isSign: (character: Int32) ::=> Boolean
        := ('+'i32 = character) || ('-'i32 = character).

    public method isRadixR: (character: Int32) ::=> Boolean
        := ('r'i32 = character) || ('R'i32 = character).

    public method isExponentE: (character: Int32) ::=> Boolean
        := ('e'i32 = character) || ('E'i32 = character).

    public method isDigit: (character: Int32) ::=> Boolean
        := ('0'i32 <= character) && (character <= '9'i32).

    public method isDigitOrUnderscore: (character: Int32) ::=> Boolean
        := (('0'i32 <= character) && (character <= '9'i32)) || ('_'i32 = character).

    public method skipSingleLineComment => Boolean := {
        (self peek = '#'i32) && ((self peek: 1sz) = '#'i32) ifFalse: {
            return: false
        }.

        self advance: 2sz.
        while: self atEnd not && (self isNewlineCharacter: self peek) not do: {
            self advance
        }.

        true
    }.

    public method skipMultiLineComment => Boolean := {
        (self peek = '#'i32) && ((self peek: 1sz) = '*'i32) ifFalse: {
            return: false
        }.

        self advance: 2sz.
        let nestingLevel mutable := 1i32.
        while: (self atEnd not) && (nestingLevel > 0i32) do: {
            (self peek = '*'i32) && ((self peek: 1sz) = '#'i32) ifTrue: {
                self advance: 2sz.
                nestingLevel := nestingLevel - 1i32.
            } ifFalse: {
                (self peek = '#'i32) && ((self peek: 1sz) = '*'i32) ifTrue: {
                    self advance: 2sz.
                    nestingLevel := nestingLevel + 1i32.
                } ifFalse: {
                    self advance
                }
            }
        }.

        true
    }.

    public method skipWhite => Void := {
        let hasSeenComments mutable := false.
        do: {
            hasSeenComments := false.

            while: (self isWhiteCharacter: self peek) do: {
                self advance
            }.

            self skipSingleLineComment ifTrue: {
                hasSeenComments := true.
            }.
            self skipMultiLineComment ifTrue: {
                hasSeenComments := true.
            }.
        } while: (hasSeenComments && self atEnd not)
    }.

    public method makeToken: (kind: UInt8) from: (startPosition: Size) ::=> SysmelToken
        := SysmelToken kind: kind value: (sourceString copyFrom: startPosition until: position) asSymbol sourcePosition: (self sourcePositionFrom: startPosition).

    public method advanceKeyword => Boolean := {
        (self isIdentifierStart: self peek) ifFalse: {
            return: false
        }.

        let startPosition := position.
        do: {
            self advance
        } while: (self isIdentifierMiddle: self peek).

        ':'i32 = self peek ifFalse: {
            position := startPosition.
            false
        } ifTrue: {
            self advance.
            true
        }
    }.
    
    public method scanNextIdentifierLikeForSymbol: (isSymbol: Boolean) startPosition: (startPosition: Size)::=> SysmelToken := {
        let symbolStartPosition := position.
        while: (self isIdentifierMiddle: self peek) do: {
            self advance
        }.

        ## Chope the scope resolution
        while: (':'i32 = self peek) && (':'i32 = (self peek: 1sz)) && (self isIdentifierStart: (self peek: 2sz)) do: {
            self advance: 3sz.
            while: (self isIdentifierMiddle: self peek) do: {
                self advance
            }.
        }.

        ## Operator with scope
        (':'i32 = self peek) && (':'i32 = (self peek: 1sz)) && (self isOperatorCharacter: (self peek: 2sz)) ifTrue: {
            self advance: 3sz.
            while: (self isOperatorCharacter: self peek) do: {
                self advance
            }.

            return: (SysmelToken kind: (isSymbol ifTrue: SysmelTokenKind::Symbol ifFalse: SysmelTokenKind::Operator)
                value: (sourceString copyFrom: symbolStartPosition until: position) asSymbol
                sourcePosition: (self sourcePositionFrom: startPosition))
        }.

        ## Keyword
        ':'i32 = self peek ifTrue: {
            self advance.
            let hasMultikeyword mutable := false.
            while: self advanceKeyword do: {
                hasMultikeyword := true
            }.

            return: (SysmelToken
                kind: (isSymbol
                    ifTrue: SysmelTokenKind::Symbol
                    ifFalse: (hasMultikeyword
                        ifTrue: SysmelTokenKind::MultiKeyword
                        ifFalse: SysmelTokenKind::Keyword)
                )
                value: (sourceString copyFrom: symbolStartPosition until: position) asSymbol
                sourcePosition: (self sourcePositionFrom: startPosition))
        }.

        return: (SysmelToken kind: (isSymbol ifTrue: SysmelTokenKind::Symbol ifFalse: SysmelTokenKind::Identifier)
            value: (sourceString copyFrom: symbolStartPosition until: position) asSymbol
            sourcePosition: (self sourcePositionFrom: startPosition))
    }.

    public method scanNextToken => SysmelToken := {
        self skipWhite.
        self atEnd ifTrue: {return: nil}.
        
        let startPosition := position.
        let firstChar := self peek.

        ## Identifiers.
        (self isIdentifierStart: firstChar) ifTrue: {
            return: (self scanNextIdentifierLikeForSymbol: false startPosition: startPosition)
        }.

        ## Numbers
        (self isDigit: firstChar) || ((self isSign: firstChar) && (self isDigit: (self peek: 1sz))) ifTrue: {
            self advance.
            while: (self isDigitOrUnderscore: self peek) do: {
                self advance
            }.

            (self isRadixR: self peek) ifTrue: {
                self advance.
                while: (self isIdentifierMiddle: self peek) do: {
                    self advance
                }.

                return: (SysmelToken kind: SysmelTokenKind::Integer
                    value: (Integer parseString: (sourceString copyFrom: startPosition until: position))
                    sourcePosition: (self sourcePositionFrom: startPosition))
            }.

            (self peek = '.'i32) && (self isDigit: (self peek: 1sz)) ifTrue: {
                self advance.
                while: (self isDigitOrUnderscore: self peek) do: {
                    self advance
                }.

                (self isExponentE: self peek) ifTrue: {
                    self advance.
                    (self isSign: self peek) ifTrue: {
                        self advance.
                    }.
                    while: (self isDigit: self peek) do: {
                        self advance
                    }.
                }.

                return: (SysmelToken kind: SysmelTokenKind::Float
                    value: (Float64 parseString: (sourceString copyFrom: startPosition until: position))
                    sourcePosition: (self sourcePositionFrom: startPosition))
            } ifFalse: {
                return: (SysmelToken kind: SysmelTokenKind::Integer
                    value: (Integer parseString: (sourceString copyFrom: startPosition until: position))
                    sourcePosition: (self sourcePositionFrom: startPosition))
            }
        }.
        
        ## Character
        '\''i32 = firstChar ifTrue: {
            self advance.

            while: self atEnd not && (self peek ~= '\''i32) do: {
                '\\'i32 = self peek ifTrue: {
                    self advance.
                    self atEnd ifTrue: {
                        return: (SysmelToken kind: SysmelTokenKind::Error value: "Incomplete character." sourcePosition: (self sourcePositionFrom: startPosition))
                    }.
                }.

                self advance
            }.

            self peek = '\''i32 ifFalse: {
                return: (SysmelToken kind: SysmelTokenKind::Error value: "Incomplete character." sourcePosition: (self sourcePositionFrom: startPosition))
            }.
            self advance.

            let characterString := (sourceString copyFrom: startPosition + 1sz until: position - 1sz) parseCEscapeSequences.
            characterString isEmpty ifTrue: {
                return: (SysmelToken kind: SysmelTokenKind::Error value: "Empty character." sourcePosition: (self sourcePositionFrom: startPosition))
            } ifFalse: {
                return: (SysmelToken kind: SysmelTokenKind::Character
                    value: characterString first asChar32
                    sourcePosition: (self sourcePositionFrom: startPosition))
            }.
        }.

        ## String
        '"'i32 = firstChar ifTrue: {
            self advance.

            while: self atEnd not && (self peek ~= '"'i32) do: {
                '\\'i32 = self peek ifTrue: {
                    self advance.
                    self atEnd ifTrue: {
                        return: (SysmelToken kind: SysmelTokenKind::Error value: "Incomplete string." sourcePosition: (self sourcePositionFrom: startPosition))
                    }.
                }.

                self advance
            }.

            self peek = '"'i32 ifFalse: {
                return: (SysmelToken kind: SysmelTokenKind::Error value: "Incomplete string." sourcePosition: (self sourcePositionFrom: startPosition))
            }.
            self advance.

            return: (SysmelToken kind: SysmelTokenKind::String
                value: (sourceString copyFrom: startPosition + 1sz until: position - 1sz) parseCEscapeSequences
                sourcePosition: (self sourcePositionFrom: startPosition))
        }.

        ## Different kind of symbols.
        '#'i32 = firstChar ifTrue: {
            let secondChar := self peek: 1sz.

            ## Identifier symbol.
            (self isIdentifierStart: secondChar) ifTrue: {
                self advance.
                return: (self scanNextIdentifierLikeForSymbol: true startPosition: startPosition)
            }.

            ## Operator symbol.
            (self isOperatorCharacter: secondChar) ifTrue: {
                self advance.
                do: {
                    self advance
                } while: (self isOperatorCharacter: self peek).

                return: (SysmelToken kind: SysmelTokenKind::Symbol
                    value: (sourceString copyFrom: startPosition + 1sz until: position) asSymbol
                    sourcePosition: (self sourcePositionFrom: startPosition))
            }.

            switch: secondChar withCases: #{
            '['i32 : {
                self advance: 2sz.
                return: (SysmelToken kind: SysmelTokenKind::ByteArrayStart value: #"#[" sourcePosition: (self sourcePositionFrom: startPosition))
            }.
            '('i32 : {
                self advance: 2sz.
                return: (SysmelToken kind: SysmelTokenKind::LiteralArrayStart value: #"#(" sourcePosition: (self sourcePositionFrom: startPosition))
            }.
            '{'i32 : {
                self advance: 2sz.
                return: (SysmelToken kind: SysmelTokenKind::DictionaryStart value: #"#{" sourcePosition: (self sourcePositionFrom: startPosition))
            }.
            '"'i32 : {
                self advance: 2sz.

                while: self atEnd not && (self peek ~= '"'i32) do: {
                    '\\'i32 = self peek ifTrue: {
                        self advance.
                        self atEnd ifTrue: {
                            return: (SysmelToken kind: SysmelTokenKind::Error value: "Incomplete string symbol." sourcePosition: (self sourcePositionFrom: startPosition))
                        }.
                    }.

                    self advance
                }.

                self peek = '"'i32 ifFalse: {
                    return: (SysmelToken kind: SysmelTokenKind::Error value: "Incomplete string symbol." sourcePosition: (self sourcePositionFrom: startPosition))
                }.
                self advance.

                return: (SysmelToken kind: SysmelTokenKind::Symbol
                    value: (sourceString copyFrom: startPosition + 2sz until: position - 1sz) parseCEscapeSequences asSymbol
                    sourcePosition: (self sourcePositionFrom: startPosition))
            }.
            _: {}
            }.
        }.

        ## Operators
        switch: firstChar withCases: #{
            '('i32 : {
                self advance.
                SysmelToken kind: SysmelTokenKind::LeftParent value: #"(" sourcePosition: (self sourcePositionFrom: startPosition)
            }.
            ')'i32 : {
                self advance.
                SysmelToken kind: SysmelTokenKind::RightParent value: #")" sourcePosition: (self sourcePositionFrom: startPosition)
            }.
            '['i32 : {
                self advance.
                SysmelToken kind: SysmelTokenKind::LeftBracket value: #"[" sourcePosition: (self sourcePositionFrom: startPosition)
            }.
            ']'i32 : {
                self advance.
                SysmelToken kind: SysmelTokenKind::RightBracket value: #"]" sourcePosition: (self sourcePositionFrom: startPosition)
            }.
            '{'i32 : {
                self advance.
                SysmelToken kind: SysmelTokenKind::LeftCurlyBracket value: #"{" sourcePosition: (self sourcePositionFrom: startPosition)
            }.
            '}'i32 : {
                self advance.
                SysmelToken kind: SysmelTokenKind::RightCurlyBracket value: #"}" sourcePosition: (self sourcePositionFrom: startPosition)
            }.
            ';'i32 : {
                self advance.
                SysmelToken kind: SysmelTokenKind::Semicolon value: #";" sourcePosition: (self sourcePositionFrom: startPosition)
            }.
            ','i32 : {
                self advance.
                SysmelToken kind: SysmelTokenKind::Comma value: #"," sourcePosition: (self sourcePositionFrom: startPosition)
            }.
            '.'i32 : {
                self advance.
                (self peek = '.'i32) && ((self peek: 1sz) = '.'i32) ifTrue: {
                    self advance: 2sz.
                    SysmelToken kind: SysmelTokenKind::Ellipsis value: #"..." sourcePosition: (self sourcePositionFrom: startPosition)
                } ifFalse: {
                    SysmelToken kind: SysmelTokenKind::Dot value: #"." sourcePosition: (self sourcePositionFrom: startPosition)
                }.
            }.
            ':'i32 : {
                self advance.
                (self peek = ':'i32) ifTrue: {
                    self advance.
                    SysmelToken kind: SysmelTokenKind::ColonColon value: #"::" sourcePosition: (self sourcePositionFrom: startPosition)
                } ifFalse: {
                    (self peek = '='i32) ifTrue: {
                        self advance.
                        SysmelToken kind: SysmelTokenKind::Assignment value: #":=" sourcePosition: (self sourcePositionFrom: startPosition)
                    } ifFalse: {
                        SysmelToken kind: SysmelTokenKind::Colon value: #":" sourcePosition: (self sourcePositionFrom: startPosition)
                    }
                }.
            }.
            '`'i32 : {
                self advance.
                switch: self peek withCases: #{
                '\''i32 : {
                    self advance.
                    SysmelToken kind: SysmelTokenKind::Quote value: #"`'" sourcePosition: (self sourcePositionFrom: startPosition)
                }.
                '`'i32 : {
                    self advance.
                    SysmelToken kind: SysmelTokenKind::QuasiQuote value: #"``" sourcePosition: (self sourcePositionFrom: startPosition)
                }.
                ','i32 : {
                    self advance.
                    SysmelToken kind: SysmelTokenKind::QuasiUnquote value: #"`," sourcePosition: (self sourcePositionFrom: startPosition)
                }.
                '@'i32 : {
                    self advance.
                    SysmelToken kind: SysmelTokenKind::Splice value: #"`@" sourcePosition: (self sourcePositionFrom: startPosition)
                }.
                _: {
                    self advance.
                    SysmelToken kind: SysmelTokenKind::Error value: "Unexpected character " -- firstChar asChar8 printString sourcePosition: (self sourcePositionFrom: startPosition)
                }
                }.
            }.
            _: {
                (self isOperatorCharacter: firstChar) ifTrue: {
                    do: {
                        self advance
                    } while: (self isOperatorCharacter: self peek).
                    
                    let operatorSize := position - startPosition.
                    operatorSize = 1sz ifTrue: {
                        switch: firstChar withCases: #{
                        '<'i32 : {
                            return: (SysmelToken kind: SysmelTokenKind::LessThan value: #"<" sourcePosition: (self sourcePositionFrom: startPosition))
                        }.
                        '>'i32 : {
                            return: (SysmelToken kind: SysmelTokenKind::GreaterThan value: #">" sourcePosition: (self sourcePositionFrom: startPosition))
                        }.
                        '*'i32 : {
                            return: (SysmelToken kind: SysmelTokenKind::Star value: #"*" sourcePosition: (self sourcePositionFrom: startPosition))
                        }.
                        '|'i32 : {
                            return: (SysmelToken kind: SysmelTokenKind::Bar value: #"|" sourcePosition: (self sourcePositionFrom: startPosition))
                        }.
                        _: {}
                        }
                    }.

                    self makeToken: SysmelTokenKind::Operator from: startPosition
                } ifFalse: {
                    self advance.
                    SysmelToken kind: SysmelTokenKind::Error value: "Unexpected character " -- firstChar asChar8 printString sourcePosition: (self sourcePositionFrom: startPosition)
                }.

            }
        }
    }.
}.
