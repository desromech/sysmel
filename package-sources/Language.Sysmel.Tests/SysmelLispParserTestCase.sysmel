public class SysmelLispParserTestCase superclass: TestCase; definition: {
    public method parseString: (string: String) ::=> ASTNode
        := SysmelLispLanguage parseSourceCode: (SourceCode text: string directory: "" name: "test" language: #tlisp).

    public method testEmptyString => Void := {
        let ast := self parseString: "".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 0sz.
    }.
    public method testSingleLineComment => Void := {
        let ast := self parseString: "## Single line comment".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 0sz.
    }.

    public method testMultiLineComment => Void := {
        let ast := self parseString: "
        #**
         * Multi line comment
         *#
        ".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 0sz.
    }.

    public method testIdentifierReference => Void := {
        let ast := self parseString: "identifier".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isIdentifierReferenceNode.
        let identifierNode := sequenceNode expressions first downCastTo: ASTIdentifierReferenceNode.
        self assert: identifierNode value equals: #identifier.
    }.

    public method testKeywordIdentifierReference => Void := {
        let ast := self parseString: "identifier:".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isIdentifierReferenceNode.
        let identifierNode := sequenceNode expressions first downCastTo: ASTIdentifierReferenceNode.
        self assert: identifierNode value equals: #identifier:.
    }.

    public method testMultiKeywordIdentifierReference => Void := {
        let ast := self parseString: "if:then:else:".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isIdentifierReferenceNode.
        let identifierNode := sequenceNode expressions first downCastTo: ASTIdentifierReferenceNode.
        self assert: identifierNode value equals: #if:then:else:.
    }.

    public method testLiteralInteger => Void := {
        let ast := self parseString: "1234".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isLiteralNode.
        let literalNode := sequenceNode expressions first downCastTo: ASTLiteralNode.
        self assert: literalNode value equals: 1234.
    }.

    public method testLiteralSymbol => Void := {
        let ast := self parseString: "#test".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isLiteralNode.
        let literalNode := sequenceNode expressions first downCastTo: ASTLiteralNode.
        self assert: literalNode value equals: #test.
    }.

    public method testUnexpandedEmptySExpression => Void := {
        let ast := self parseString: "()".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isUnexpandedSExpressionNode.
        let sexpression := sequenceNode expressions first downCastTo: ASTUnexpandedSExpressionNode.
        self assert: sexpression elements isEmpty.
    }.

    public method testUnexpandedEmptySExpression2 => Void := {
        let ast := self parseString: "[]".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isUnexpandedSExpressionNode.
        let sexpression := sequenceNode expressions first downCastTo: ASTUnexpandedSExpressionNode.
        self assert: sexpression elements isEmpty.
    }.

    public method testUnexpandedEmptySExpression3 => Void := {
        let ast := self parseString: "{}".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isUnexpandedSExpressionNode.
        let sexpression := sequenceNode expressions first downCastTo: ASTUnexpandedSExpressionNode.
        self assert: sexpression elements isEmpty.
    }.

    public method testUnexpandedSExpression => Void := {
        let ast := self parseString: "(function)".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isUnexpandedSExpressionNode.

        let sexpression := sequenceNode expressions first downCastTo: ASTUnexpandedSExpressionNode.
        self assert: sexpression elements size equals: 1sz.

        self assert: sexpression elements first isIdentifierReferenceNode.
        let element := sexpression elements first downCastTo: ASTIdentifierReferenceNode.
        self assert: element value equals: #function.
    }.

    public method testUnexpandedSExpression2 => Void := {
        let ast := self parseString: "[function]".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isUnexpandedSExpressionNode.

        let sexpression := sequenceNode expressions first downCastTo: ASTUnexpandedSExpressionNode.
        self assert: sexpression elements size equals: 1sz.

        self assert: sexpression elements first isIdentifierReferenceNode.
        let element := sexpression elements first downCastTo: ASTIdentifierReferenceNode.
        self assert: element value equals: #function.
    }.

    public method testUnexpandedSExpression3 => Void := {
        let ast := self parseString: "{function}".
        self assert: ast isNotNil.
        self assert: ast isSequenceNode.

        let sequenceNode := ast downCastTo: ASTSequenceNode.
        self assert: sequenceNode pragmas size equals: 0sz.
        self assert: sequenceNode expressions size equals: 1sz.

        self assert: sequenceNode expressions first isUnexpandedSExpressionNode.

        let sexpression := sequenceNode expressions first downCastTo: ASTUnexpandedSExpressionNode.
        self assert: sexpression elements size equals: 1sz.

        self assert: sexpression elements first isIdentifierReferenceNode.
        let element := sexpression elements first downCastTo: ASTIdentifierReferenceNode.
        self assert: element value equals: #function.
    }.

}.
