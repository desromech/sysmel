public final class HIRModuleCompilationContext superclass: Object; definition: {
    public field compilationTarget => HIRCompilationTarget.
    public field hirContext => HIRContext.
    public field hirModule => HIRModule.
    public field usedModules => OrderedCollection.
    public field exclusiveCompilationMode => Boolean.
    public field compileFromBytecode => Boolean.

    protected field translatedValueDictionary => ObjectPointerDictionary.

    __Meta__ extend: {
        public method forTarget: (compilationTarget: HIRCompilationTarget) ::=> self
            := self new
                initializeWithTarget: compilationTarget;
                yourself.

        public method forDefaultTarget => self
            := self forTarget: HIRCompilationTarget default.
    }.

    public method initializeWithTarget: (theCompilationTarget: HIRCompilationTarget) ::=> Void := {
        compilationTarget := theCompilationTarget.
        hirContext := HIRContext new.
        hirModule := HIRModule forContext: hirContext.
        translatedValueDictionary := ObjectPointerDictionary new.
        usedModules := OrderedCollection new.
        compileFromBytecode := true.
    }.

    public method virtualTableSetSource: (virtualTableSetSource: VirtualTableSetSource) ::=> Void := {
        hirModule virtualTableSetSource: virtualTableSetSource
    }.

    public method addUsedModule: (usedModule: HIRModule) ::=> Void := {
        usedModules add: usedModule.
    }.

    public method findValueInUsedModule: value ::=> HIRValue := {
        let i mutable := 0sz.
        while: (i < usedModules size) do: {
            let module := usedModules at: i.
            let moduleValue := module getGlobalValueOrNilFor: value.
            moduleValue ifNotNil: {
                return: moduleValue 
            }
        } continueWith: (i := i + 1sz).
        nil
    }.

    public method compileFunctions: (functions: SequenceableCollection) definitions: (functionDefinitions: SequenceableCollection) ::=> Void := {
        let ssaFunctionDefinitions := functionDefinitions collect: {:(FunctionDefinition)eachFunctionDefinition :: HIRFunctionDefinition |
            self declareFunctionDefinition: eachFunctionDefinition
        }.

        functions do: {:(Function)eachFunction :: Void |
            self declareFunction: eachFunction
        }.

        ssaFunctionDefinitions doWithIndex: {:(HIRFunctionDefinition)eachHIRFunctionDefinition :(Size)index :: Void |
            let eachFunctionDefinition => FunctionDefinition := functionDefinitions at: index.
            self compileFunctionDefinition: eachFunctionDefinition into: eachHIRFunctionDefinition
        }.
    }.

    public method compileFunctionsWithDefinitions: (functions: SequenceableCollection) ::=> Void 
        := self compileFunctions: functions definitions: (functions collect: {:(Function)each :: FunctionDefinition | each definition}).

    public method compileFunctionDefinition: (functionDefinition: FunctionDefinition) ::=> Void := {
        let ssaFunctionDefinition := self declareFunctionDefinition: functionDefinition.
        self compileFunctionDefinition: functionDefinition into: ssaFunctionDefinition
    }.

    public method exportMainEntryPointFunction: (entryPointFunction: Function) ::=> Void := {
        let ssaEntryPointFunction => HIRFunction := translatedValueDictionary atOrNil: entryPointFunction.
        ssaEntryPointFunction ifNil: {return: void}.

        ssaEntryPointFunction exportedSymbols: ssaEntryPointFunction exportedSymbols -- (Array with: #main).
    }.

    public method generateArgumentForBinding: (binding: SymbolArgumentBinding) ::=> HIRFunctionArgument := {
        (HIRFunctionArgument forContext: hirContext)
            name: binding name;
            type: binding type;
            sourceBinding: binding;
            yourself
    }.

    public method generateDefinitionArguments: (functionDefinition: FunctionDefinition) ::=> Array := {
        compileFromBytecode ifTrue: {
            (functionDefinition bytecode arguments collect: {:(SymbolArgumentBinding)binding :: HIRFunctionArgument |
                self generateArgumentForBinding: binding
            }) asArray
        } ifFalse: {
            (functionDefinition sourceAnalyzedDefinition argumentNodes collect: {:(ASTArgumentNode)argumentNode :: HIRFunctionArgument |
                let binding := argumentNode binding.
                self assert: binding isNotNil.
                self generateArgumentForBinding: binding
            }) asArray
        }.
    }.

    public method generateCaptureForBinding: (captureBinding: SymbolCaptureBinding) ::=> HIRFunctionCapture := {
        (HIRFunctionCapture forContext: hirContext)
            name: captureBinding name;
            type: captureBinding type;
            sourceBinding: captureBinding;
            yourself
    }.

    public method generateDefinitionCaptures: (functionDefinition: FunctionDefinition) ::=> Array := {
        compileFromBytecode ifTrue: {
            (functionDefinition bytecode captures collect: {:(SymbolCaptureBinding)captureBinding :: HIRFunctionCapture |
                self generateCaptureForBinding: captureBinding
            }) asArray
        } ifFalse: {
            (functionDefinition sourceAnalyzedDefinition captures collect: {:(SymbolCaptureBinding)captureBinding :: HIRFunctionCapture |
                self generateCaptureForBinding: captureBinding
            }) asArray
        }
    }.

    public method declareFunctionDefinition: (functionDefinition: FunctionDefinition) ::=> HIRFunctionDefinition := {
        (translatedValueDictionary includesKey: functionDefinition) ifTrue: {
            return: (translatedValueDictionary at: functionDefinition)
        }.

        functionDefinition ensureAnalysis.
        ## HACK: Make sure this is properly done by the analysis section.
        functionDefinition boxDescriptor = 0uptr ifTrue: {
            functionDefinition boxDescriptor: functionDefinition type applicationBoxDescriptor
        }.

        let translatedValue := (HIRFunctionDefinition forContext: hirContext)
            type: FunctionDefinition;
            sourceObject: functionDefinition;
            name: functionDefinition programEntityQualifiedNameSymbol;
            functionType: functionDefinition type;
            importedSymbols: functionDefinition importedSymbols asArray;
            primitiveName: functionDefinition primitiveName;
            sourcePosition: functionDefinition sourcePosition;
            isNoGC: functionDefinition isNoGC;
            callingConvention: functionDefinition callingConventionName;
            arguments: (self generateDefinitionArguments: functionDefinition);
            captures: (self generateDefinitionCaptures: functionDefinition);
            yourself.

        hirModule addGlobalValue: translatedValue.
        translatedValueDictionary at: functionDefinition put: translatedValue.
        translatedValue
    }.

    public method compileFunctionDefinition: (functionDefinition: FunctionDefinition) into: (ssaFunctionDefinition: HIRFunctionDefinition) ::=> Void := {
        compileFromBytecode || (functionDefinition bytecode isNotNil && functionDefinition sourceAnalyzedDefinition isNil) ifTrue: {
            HIRFunctionBytecodeCompilationContext new
                moduleCompilationContext: self;
                compileFunctionDefinition: functionDefinition into: ssaFunctionDefinition.
        } ifFalse: {
            HIRFunctionASTCompilationContext new
                moduleCompilationContext: self;
                compileFunctionDefinition: functionDefinition into: ssaFunctionDefinition.
        }.
    }.

    public method declareFunction: (function: Function) ::=> HIRFunction := {
        (translatedValueDictionary includesKey: function) ifTrue: {
            return: (translatedValueDictionary at: function)
        }.
        
        function ensureAnalysis.
        let translatedValue := hirContext getOrCreateTranslatedFunctionFor: function.
        hirModule addGlobalValue: translatedValue.
        translatedValueDictionary at: function put: translatedValue.

        function definition ifNotNil: {
            translatedValue definition: ((self translateFunctionDefinition: function definition) downCastTo: HIRFunctionDefinition).
        }.
        
        translatedValue
    }.

    public method translateFunction: (function: Function) withBuilder: (builder: HIRInstructionBuilder) ::=> HIRValue := {
        translatedValueDictionary at: function ifAbsent: { :: HIRValue |
            let importedValue := self findValueInUsedModule: function.
            importedValue ifNotNil: {
                translatedValueDictionary at: function put: importedValue.
                importedValue
            } ifNil: {
                exclusiveCompilationMode ifTrue: {
                    builder literal: function type: function class
                } ifFalse: {
                    self declareFunction: function
                }
            }.
        }
    }.

    public method translateFunction: (function: Function) ::=> HIRValue
        := self translateFunction: function withBuilder: nil.

    public method translateFunctionDefinition: (functionDefinition: FunctionDefinition) withBuilder: (builder: HIRInstructionBuilder) ::=> HIRValue := {
        functionDefinition ensureAnalysis.
        translatedValueDictionary at: functionDefinition ifAbsent: { :: HIRValue |
            let importedValue := self findValueInUsedModule: functionDefinition.
            importedValue ifNotNil: {
                translatedValueDictionary at: functionDefinition put: importedValue.
                importedValue downCastTo: HIRFunctionDefinition
            } ifNil: {
                exclusiveCompilationMode ifTrue: {
                    builder ifNotNil: (builder literal: functionDefinition type: functionDefinition class)
                } ifFalse: {
                    let ssaFunctionDefinition := self declareFunctionDefinition: functionDefinition.
                    self compileFunctionDefinition: functionDefinition into: ssaFunctionDefinition.
                    ssaFunctionDefinition
                }
            }
        }
    }.

    public method translateFunctionDefinition: (functionDefinition: FunctionDefinition) ::=> HIRValue
        := self translateFunctionDefinition: functionDefinition withBuilder: nil.

    public method declareGlobalVariableForSymbolValueBinding: (binding: SymbolValueBinding) ::=> HIRGlobalVariable := {
        let translatedValue := (HIRGlobalVariable forContext: hirContext)
            sourceBinding: binding;
            referenceValue: binding value;
            name: binding programEntityQualifiedNameSymbol;
            type: binding type;
            valueType: binding valueType;
            isExternal: binding isExternal;
            isThreadLocal: binding isThreadLocal;
            yourself.

        hirModule addGlobalValue: translatedValue.
        translatedValueDictionary at: binding put: translatedValue.

        translatedValue
    }.

    public method getOrCreateGlobalVariableForSymbolValueBinding: (binding: SymbolValueBinding) ::=> HIRGlobalVariable := {
        self assert: binding isMutable.
        translatedValueDictionary at: binding ifAbsent: { :: HIRGlobalVariable |
            let importedValue := self findValueInUsedModule: binding.
            importedValue ifNotNil: {
                translatedValueDictionary at: binding put: importedValue.
                importedValue downCastTo: HIRGlobalVariable
            } ifNil: {
                self declareGlobalVariableForSymbolValueBinding: binding
            }
        }.
    }.

    public method finish => HIRModule := {
        hirModule
    }.
}.
