public class ParsecStreamEndMarkClass definition: {
    let singleton := SelfType new.
    __Meta__ definition: {
        public method uniqueInstance => ParsecStreamEndMarkClass
            := singleton.
    }.
}.

public global ParsecStreamEndMark := ParsecStreamEndMarkClass uniqueInstance.

public class ParsecState definition: {
    public field sourceCollection => SequenceableCollection.
    public field sourceCode => SourceCode.
    public field position => Size.
    public field memoizationTable => Dictionary.

    __Meta__ definition: {
        public method for: (sourceCollection: SequenceableCollection) ::=> self
            := self new sourceCollection: sourceCollection; yourself.

        public method forSourceCode: (sourceCode: SourceCode) ::=> self
            := self new
                sourceCollection: sourceCode text;
                sourceCode: sourceCode;
                yourself.
    }.

    public inline method memento => Size
        := position.

    public inline method restoreMemento: (memento: Size) ::=> Void := {
        position := memento
    }.

    public method remainingSize => Size
        := position <= sourceCollection size
            ifTrue: sourceCollection size - position
            ifFalse: 0sz.

    public method peek: (offset: Size) ::=> AnyValue := {
        let peekPosition := position + offset.
        peekPosition < sourceCollection size
            ifTrue: (sourceCollection at: peekPosition)
            ifFalse: ParsecStreamEndMark
    }.

    public method peek ::=> AnyValue
        := self peek: 0sz.

    public method advance: (increment: Size) ::=> Void := {
        position := position + increment min: sourceCollection size
    }.

    public method advance ::=> Void
        := self advance: 1sz.

    public method atEnd => Boolean
        := position >= sourceCollection size.

    public virtual method sourcePositionFrom: (startIndex: Size) until: (endIndex: Size) ::=> SourcePosition
        := SourcePosition for: sourceCode startIndex: startIndex asUInt32 endIndex: endIndex asUInt32.

    public virtual method sourcePositionUntilEnd => SourcePosition
        := SourcePosition for: sourceCode startIndex: position asUInt32 endIndex: sourceCollection size asUInt32.

    public virtual method sourcePositionAtEnd => SourcePosition
        := SourcePosition for: sourceCode startIndex: sourceCollection size asUInt32 endIndex: sourceCollection size asUInt32.
}.

public abstract class ParsecResult superclass: Object; definition: {
    public field state => ParsecState.
    public field value.
    public field startPosition => Size.
    public field endPosition => Size.

    public abstract method isError => Boolean := false.
    public method isValid => Boolean := self isError not.

    public method sourceValue => SequenceableCollection
        := state sourceCollection copyFrom: startPosition until: endPosition.

    public method sourceStringValue => String
        := self sourceValue downCastTo: String.

    public method sourceStringValueWithoutFirst: (startTrim: Size) ::=> String
        := (state sourceCollection copyFrom: startPosition + startTrim until: endPosition) downCastTo: String.

    public method sourceStringValueWithoutFirst: (startTrim: Size) last: (endTrim: Size)::=> String
        := (state sourceCollection copyFrom: startPosition + startTrim until: endPosition - endTrim) downCastTo: String.

    public method sourcePosition => SourcePosition
        := state sourcePositionFrom: startPosition until: endPosition.

    public method sourcePositionWithoutFirst: (startTrim: Size) last: (endTrim: Size) ::=> SourcePosition
        := state sourcePositionFrom: startPosition + startTrim until: endPosition - endTrim.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream print: startPosition; nextPut: '-'c8; print: endPosition; nextPutAll: ": "; print: value
    }.

    public virtual method errorMessage => String := "No an error".
}.

public class ParsecErrorResult superclass: ParsecResult; definition: {
    public field message => String.
    public field messageTemplate => String.
    public field messageTemplateParameters => Array.
    
    public abstract method isError => Boolean := true.

    public override method errorMessage => String := {
        message ifNil: {
            message := messageTemplate
                ifNil: ("Unknown error")
                ifNotNil: (messageTemplate)
        }.
        message.
    }.

    public override method printOn: (stream: Stream) ::=> Void := {
        stream print: startPosition; nextPut: '-'c8; print: endPosition; nextPutAll: ": "; nextPutAll: message
    }.
}.

public abstract class Parsec definition: {
    __Meta__ extend: {
        public method end => Parsec
            := MonadicEndParser new.

        public method any => Parsec
            := MonadicAnyParser new.

        public method predicate: predicate errorMessage: (errorMessage: String) ::=> Parsec
            := MonadicPredicateParser new
                predicate: predicate;
                errorMessage: errorMessage;
                yourself.

        public method white ::=> Parsec
            := self predicate: {:(Char8)character :: Boolean | character <= ' 'c8 } errorMessage: "Expected a whitespace.".

        public method digit ::=> Parsec
            := self predicate: {:(Char8)character :: Boolean | ('0'c8 <= character) && (character <= '9'c8) } errorMessage: "Expected a digit.".

        public method alpha ::=> Parsec
            := self predicate: {:(Char8)character :: Boolean |
                (('A'c8 <= character) && (character <= 'Z'c8)) ||
                (('a'c8 <= character) && (character <= 'z'c8))
            } errorMessage: "Expected an alphabetic character.".

        public method alphaNum ::=> Parsec
            := self predicate: {:(Char8)character :: Boolean |
                (('A'c8 <= character) && (character <= 'Z'c8)) ||
                (('a'c8 <= character) && (character <= 'z'c8)) ||
                (('0'c8 <= character) && (character <= '9'c8))
            } errorMessage: "Expected an alphanumeric character.".

        public method identifierStart ::=> Parsec
            := self predicate: {:(Char8)character :: Boolean |
                (('A'c8 <= character) && (character <= 'Z'c8)) ||
                (('a'c8 <= character) && (character <= 'z'c8)) ||
                (character = '_'c8)
            } errorMessage: "Expected an alphabetic character.".

        public method identifierMiddle ::=> Parsec
            := self predicate: {:(Char8)character :: Boolean |
                (('A'c8 <= character) && (character <= 'Z'c8)) ||
                (('a'c8 <= character) && (character <= 'z'c8)) ||
                (('0'c8 <= character) && (character <= '9'c8)) ||
                (character = '_'c8)
            } errorMessage: "Expected an alphanumeric character.".
    }.

    public field isOmmittingValue => Boolean.

    public method withoutValue => Parsec := {
        isOmmittingValue := true.
        self
    }.

    public method parse: (sourceCollection: SequenceableCollection) ::=> ParsecResult
        := self parseWithState: (ParsecState for: sourceCollection).

    public method parseSourceCode: (sourceCode: SourceCode) ::=> ParsecResult
        := self parseWithState: (ParsecState forSourceCode: sourceCode).

    public abstract method parseWithState: (state: ParsecState) ::=> ParsecResult
        := self subclassResponsibility.

    public method makeResult: value withState: (state: ParsecState) ::=> ParsecResult
        := ParsecResult new
            state: state;
            value: value;
            startPosition: state memento;
            endPosition: state memento;
            yourself.

    public method makeResultWithState: (state: ParsecState) ::=> ParsecResult
        := ParsecResult new
            state: state;
            startPosition: state memento;
            endPosition: state memento;
            yourself.

    public method makeResult: value from: (startPosition: Size) withState: (state: ParsecState) ::=> ParsecResult
        := ParsecResult new
            state: state;
            value: value;
            startPosition: startPosition;
            endPosition: state memento;
            yourself.

    public method makeResultFrom: (startPosition: Size) withState: (state: ParsecState) ::=> ParsecResult
        := ParsecResult new
            state: state;
            startPosition: startPosition;
            endPosition: state memento;
            yourself.

    public method makeError: (message: String) withState: (state: ParsecState) ::=> ParsecResult
        := ParsecErrorResult new
            state: state;
            message: message;
            startPosition: state memento;
            endPosition: state memento;
            yourself.

    public method makeError: (messageTemplate: String) formatWith: (messageTemplateParameters: Array) withState: (state: ParsecState) ::=> ParsecResult
        := ParsecErrorResult new
            state: state;
            messageTemplate: messageTemplate;
            messageTemplateParameters: messageTemplateParameters;
            startPosition: state memento;
            endPosition: state memento;
            yourself.

    public virtual method -- (nextParser: Parsec) ::=> Parsec
        := MonadicCombinatorSequenceParser new
            parsers: (Array with: self with: nextParser);
            yourself.

    public virtual method | (nextParser: Parsec) ::=> Parsec
        := MonadicCombinatorAlternativesParser new
            parsers: (Array with: self with: nextParser);
            yourself.

    public virtual method memoized => Parsec 
        := MonadicMemoizedDelegateParser new
            parser: self;
            yourself.

    public method optional => Parsec
        := MonadicCombinatorOptionalParser new
            parser: self;
            yourself.

    public method star => Parsec
        := MonadicCombinatorRepetitionParser new
            parser: self;
            yourself.

    public method plus => Parsec
        := MonadicCombinatorRepetitionParser new
            parser: self;
            minimalCount: 1sz;
            yourself.
    public method plusN: (minimalCount: Size) ::=> Parsec
        := MonadicCombinatorRepetitionParser new
            parser: self;
            minimalCount: minimalCount;
            yourself.

    public method negate => Parsec
        := MonadicCombinatorNegateParser new
            parser: self;
            yourself.

    public method not => Parsec
        := MonadicCombinatorNotParser new
            parser: self;
            yourself.

    public method trim: (trimmingParser: Parsec) ::=> Parsec
        := MonadicCombinatorTrimParser new
            trimmingParser: trimmingParser;
            parser: self;
            yourself.

    public method ==> (valueComputationBlock: (ParsecResult) => AnyValue) ::=> Parsec
        := MonadicValueComputationParser new
            parser: self;
            valueComputationBlock: valueComputationBlock;
            yourself.
}.

public class MonadicEpsilonParser superclass: Parsec; definition: {
    public override method parseWithState: (state: ParsecState) ::=> ParsecResult
        := self makeResult: nil withState: state.
}.

public class MonadicEndParser superclass: Parsec; definition: {
    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        state atEnd ifTrue: {
            self makeResult: nil withState: state. 
        } ifFalse: {
            self makeError: "Expected the end." withState: state.
        }
    }
}.

public class MonadicElementParser superclass: Parsec; definition: {
    public field expectedElement => AnyValue.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        let startPosition := state memento.
        state atEnd not && (expectedElement = state peek) ifTrue: {
            state advance.
            self makeResultFrom: startPosition withState: state.
        } ifFalse: {
            self makeError: "Expected {0}." formatWith: (Array with: expectedElement) withState: state.
        }.
    }
}.

AnyValue extend: {
    public method asMonadicElementParser => MonadicElementParser
        := MonadicElementParser new expectedElement: self; yourself
}.

public class MonadicPredicateParser superclass: Parsec; definition: {
    public field predicate.
    public field errorMessage => String.

    __Meta__ definition: {
        public method with: (predicate: (AnyValue => Boolean)) ::=> self
            := self new predicate: predicate; yourself
    }.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        let startPosition := state memento.
        state atEnd not && predicate(state peek) ifTrue: {
            state advance.
            self makeResultFrom: startPosition withState: state
        } ifFalse: {
            self makeError: errorMessage withState: state.
        }
    }.
}.

public class MonadicAnyParser superclass: Parsec; definition: {
    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        let startPosition := state memento.
        state atEnd ifTrue: {
            self makeError: "Unexpected end." withState: state.
        } ifFalse: {
            let value := state peek.
            state advance.
            self makeResult: value from: startPosition withState: state
        }
    }.
}.

public class MonadicSequenceParser superclass: Parsec; definition: {
    public field expectedSequence => SequenceableCollection.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        let startPosition := state memento.
        (expectedSequence size <= state remainingSize) && (expectedSequence allSatisfyWithIndex: {:expectedElement :(Size)index :: Boolean |
            expectedElement = (state peek: index)
        }) ifTrue: {
            state advance: expectedSequence size.
            self makeResultFrom: startPosition withState: state.
        } ifFalse: {
            self makeError: "Expected {0}" formatWith: (Array with: expectedSequence) withState: state.
        }.
    }
}.

SequenceableCollection extend: {
    public method asParsec => Parsec
        := MonadicSequenceParser new expectedSequence: self; yourself.
}.

public class MonadicSetParser superclass: Parsec; definition: {
    public field expectedSet => Collection.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        let startPosition := state memento.
        state atEnd not && (expectedSet includes: state peek) ifTrue: {
            state advance.
            self makeResultFrom: startPosition withState: state
        } ifFalse: {
            self makeError: "Element not in set." withState: state.
        }
    }
}.

Collection extend: {
    public method asMonadicSetParser => Parsec
        := MonadicSetParser new expectedSet: self; yourself.
}.

public class MonadicCombinatorSequenceParser superclass: Parsec; definition: {
    public field parsers => Array.

    public override method -- (nextParser: Parsec) ::=> Parsec
        := MonadicCombinatorSequenceParser new
            parsers: parsers -- (Array with: nextParser);
            yourself.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        let startPosition := state memento.
        let parserCount := parsers size.
        let i mutable := 0sz.
        let resultValue => Array := isOmmittingValue ifTrue: nil ifFalse: (Array new: parserCount).
        while: (i < parserCount) do: {
            let parser => Parsec := parsers at: i.
            let parserResult := parser parseWithState: state.
            parserResult isError ifTrue: {return: parserResult}.

            isOmmittingValue ifFalse: {
                resultValue at: i put: parserResult value.
            }
        } continueWith: (i := i + 1sz).

        self makeResult: resultValue from: startPosition withState: state.
    }.
}.

public class MonadicCombinatorAlternativesParser superclass: Parsec; definition: {
    public field parsers => Array.

    public override method | (nextParser: Parsec) ::=> Parsec
        := MonadicCombinatorAlternativesParser new
            parsers: parsers -- (Array with: nextParser);
            yourself.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        let startPosition := state memento.
        let parserResult mutable => ParsecResult := nil.
        let i mutable := 0sz.
        let parserCount := parsers size.
        while: (i < parserCount) do: {
            let parser => Parsec := parsers at: i.
            parserResult := parser parseWithState: state.
            parserResult isValid ifTrue: {return: parserResult}.
            state restoreMemento: startPosition.
        } continueWith: (i := i + 1sz).

        parserResult
    }.
}.

public class MonadicCombinatorOptionalParser superclass: Parsec; definition: {
    public field parser => Parsec.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        let startPosition := state memento.
        let parseResult := parser parseWithState: state.
        parseResult isError ifTrue: {
            state restoreMemento: startPosition.
            self makeResultWithState: state.
        } ifFalse: {
            parseResult
        }
    }.
}.

public class MonadicCombinatorNegateParser superclass: Parsec; definition: {
    public field parser => Parsec.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        let startPosition := state memento.
        let parseResult := parser parseWithState: state.
        parseResult isValid ifTrue: {
            self makeError: "Unexpected" withState: state
        } ifFalse: {
            state restoreMemento: startPosition.
            state advance.
            self makeResultWithState: state
        }
    }.
}.

public class MonadicCombinatorNotParser superclass: Parsec; definition: {
    public field parser => Parsec.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        let startPosition := state memento.
        let parseResult := parser parseWithState: state.
        parseResult isValid ifTrue: {
            self makeError: "Unexpected" withState: state
        } ifFalse: {
            state restoreMemento: startPosition.
            self makeResultWithState: state
        }
    }.
}.

public class MonadicCombinatorRepetitionParser superclass: Parsec; definition: {
    public field parser => Parsec.
    public field minimalCount => Size.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        let startPosition := state memento.
        let currentPosition mutable := startPosition.

        let resultValue => OrderedCollection := isOmmittingValue ifTrue: nil ifFalse: OrderedCollection new.
        let nextParseResult mutable => ParsecResult := nil.
        let i mutable := 0sz.
        while: (i < minimalCount) do: {
            nextParseResult := parser parseWithState: state.
            nextParseResult isError ifTrue: {return: nextParseResult}.
            isOmmittingValue ifFalse: {
                resultValue add: nextParseResult value.
            }.
        } continueWith: (i := i + 1sz).

        currentPosition := state memento.
        while: ((nextParseResult := parser parseWithState: state) isValid) do: {
            isOmmittingValue ifFalse: {
                resultValue add: nextParseResult value.
            }.
            currentPosition := state memento.
        }.

        state restoreMemento: currentPosition.
        self makeResult: resultValue from: startPosition withState: state
    }.
}.

public class MonadicCombinatorTrimParser superclass: Parsec; definition: {
    public field trimmingParser => Parsec.
    public field parser => Parsec.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        {
            let trimLeftPosition := state memento.
            let trimLeftResult := trimmingParser parseWithState: state.
            trimLeftResult isError ifTrue: {
                state restoreMemento: trimLeftPosition
            }.
        }.

        let parseResult := parser parseWithState: state.
        parseResult isError ifTrue: {return: parseResult}.

        {
            let trimRightPosition := state memento.
            let trimRightResult := trimmingParser parseWithState: state.
            trimRightResult isError ifTrue: {
                state restoreMemento: trimRightPosition
            }.
        }.

        parseResult
    }.
}.

public class MonadicValueComputationParser superclass: Parsec; definition: {
    public field parser => Parsec.
    public field valueComputationBlock => ((ParsecResult) => AnyValue).

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        let parseResult := parser parseWithState: state.
        parseResult isValid ifTrue: {
            parseResult copy
                value: valueComputationBlock(parseResult);
                yourself
        } ifFalse: {
            parseResult
        }
    }
}.

public class MonadicDelegateParser superclass: Parsec; definition: {
    public field parser => Parsec.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult
        := parser parseWithState: state.

    (public method := (newParser: Parsec)) ::=> Void := {
        parser := newParser
    }.
}.

public class MonadicMemoizedDelegateParser superclass: MonadicDelegateParser; definition: {
    public override method memoized => Parsec
        := self.

    public override method parseWithState: (state: ParsecState) ::=> ParsecResult := {
        state parseWithMemoizationOf: parser
    }.
}.

ParsecState extend: {
    public method validMemoizationTable => Dictionary
        := memoizationTable ifNil: {memoizationTable := Dictionary new}.

    public method parseWithMemoizationOf: (parser: Parsec) ::=> ParsecResult := {
        let memoizedResult => ParsecResult := self validMemoizationTable at: (Array with: position with: parser) ifAbsentPut: {:: ParsecResult |
            parser parseWithState: self
        }.

        position := memoizedResult endPosition.
        memoizedResult
    }.
}.
