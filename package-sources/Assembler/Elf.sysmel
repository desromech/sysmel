public global Elf32::Addr := UInt32.
public global Elf32::Off := UInt32.
public global Elf32::Half := UInt16.
public global Elf32::Word := UInt32.
public global Elf32::Sword := Int32.

public global Elf64::Addr := UInt64.
public global Elf64::Off := UInt64.
public global Elf64::Half := UInt16.
public global Elf64::Word := UInt32.
public global Elf64::Sword := Int32.
public global Elf64::Xword := UInt64.
public global Elf64::Sxword := Int64.

public global Elf::Ident::Magic0 := 0sz.
public global Elf::Ident::Magic1 := 1sz.
public global Elf::Ident::Magic2 := 2sz.
public global Elf::Ident::Magic3 := 3sz.
public global Elf::Ident::Class := 4sz.
public global Elf::Ident::Data := 5sz.
public global Elf::Ident::Version := 6sz.
public global Elf::Ident::OSAbi := 7sz.
public global Elf::Ident::AbiVersion := 8sz.
public global Elf::Ident::NIdent := 16sz.

public global Elf::Ident::Class32 := 1u8.
public global Elf::Ident::Class64 := 2u8.

public global Elf::Ident::Data2LSB := 1u8.
public global Elf::Ident::Data2MSB := 2u8.

public global Elf::Ident::CurrentVersion := 1u8.
public global Elf::CurrentVersion := 1u32.

public global Elf::Machine::I386 := 3u16.
public global Elf::Machine::ARM := 40u16.
public global Elf::Machine::X86_64 := 62u16.
public global Elf::Machine::AARCH64 := 183u16.
public global Elf::Machine::RISCV := 243u16.

public global Elf::Flags::RISCV::RVC := 16r0001 u32.

public global Elf::Flags::RISCV::FloatAbiSoft := 16r0000 u32.
public global Elf::Flags::RISCV::FloatAbiSingle := 16r0002 u32.
public global Elf::Flags::RISCV::FloatAbiDouble := 16r0004 u32.
public global Elf::Flags::RISCV::FloatAbiQuad := 16r0006 u32.

public global Elf::Flags::RISCV::RVE := 16r0008 u32.
public global Elf::Flags::RISCV::TSO := 16r0010 u32.

public global Elf::SectionHeaderType::Null := 0u32.
public global Elf::SectionHeaderType::Progbits := 1u32.
public global Elf::SectionHeaderType::Symtab := 2u32.
public global Elf::SectionHeaderType::Strtab := 3u32.
public global Elf::SectionHeaderType::Rela := 4u32.
public global Elf::SectionHeaderType::Hash := 5u32.
public global Elf::SectionHeaderType::Dynamic := 6u32.
public global Elf::SectionHeaderType::Note := 7u32.
public global Elf::SectionHeaderType::Nobits := 8u32.
public global Elf::SectionHeaderType::Rel := 9u32.
public global Elf::SectionHeaderType::Shlib := 10u32.
public global Elf::SectionHeaderType::Dynsym := 11u32.

public global Elf::SectionHeaderFlag::Write := 16r01 u32.
public global Elf::SectionHeaderFlag::Alloc := 16r02 u32.
public global Elf::SectionHeaderFlag::ExecInstr := 16r04 u32.
public global Elf::SectionHeaderFlag::Merge := 16r10 u32.
public global Elf::SectionHeaderFlag::Strings := 16r20 u32.
public global Elf::SectionHeaderFlag::InfoLink := 16r40 u32.
public global Elf::SectionHeaderFlag::Group := 16r200 u32.
public global Elf::SectionHeaderFlag::TLS := 16r400 u32.

public global Elf::SymbolTableBind::Local := 0u8.
public global Elf::SymbolTableBind::Global := 1u8.
public global Elf::SymbolTableBind::Weak := 2u8.

public global Elf::SymbolTableType::Notype := 0u8.
public global Elf::SymbolTableType::Object := 1u8.
public global Elf::SymbolTableType::Func := 2u8.
public global Elf::SymbolTableType::Section := 3u8.
public global Elf::SymbolTableType::File := 4u8.
public global Elf::SymbolTableType::Common := 5u8.
public global Elf::SymbolTableType::TLS := 6u8.

public global Elf::Type::None := 0u16.
public global Elf::Type::Rel := 1u16.
public global Elf::Type::Exec := 2u16.
public global Elf::Type::Dyn := 3u16.
public global Elf::Type::Core := 4u16.

public global Elf::I386::Rel::None := 0u32.
public global Elf::I386::Rel::A32 := 1u32.
public global Elf::I386::Rel::PC32 := 2u32.

public global Elf::X86_64::Rel::None := 0u32.
public global Elf::X86_64::Rel::A64 := 1u32.
public global Elf::X86_64::Rel::PC32 := 2u32.
public global Elf::X86_64::Rel::GOT32 := 3u32.
public global Elf::X86_64::Rel::PLT32 := 4u32.
public global Elf::X86_64::Rel::GOTPCREL := 9u32.
public global Elf::X86_64::Rel::A32 := 10u32.
public global Elf::X86_64::Rel::A32S := 11u32.
public global Elf::X86_64::Rel::A16 := 12u32.
public global Elf::X86_64::Rel::PC16 := 13u32.
public global Elf::X86_64::Rel::A8 := 14u32.
public global Elf::X86_64::Rel::PC8 := 15u32.
public global Elf::X86_64::Rel::TPOff64 := 18u32.
public global Elf::X86_64::Rel::TPOff32 := 23u32.

public final class Elf32::Header superclass: ByteSerializableObject; definition: {
    public field ident => UInt8[Elf::Ident::NIdent].
    public field type => Elf32::Half.
    public field machine => Elf32::Half.
    public field version => Elf32::Word.
    public field entry => Elf32::Addr.
    public field programHeaderOffset => Elf32::Off.
    public field sectionHeaderOffset => Elf32::Off.
    public field flags => Elf32::Word.
    public field elfHeaderSize => Elf32::Half.
    public field programHeaderEntrySize => Elf32::Half.
    public field programHeaderEntryNumber => Elf32::Half.
    public field sectionHeaderEntrySize => Elf32::Half.
    public field sectionHeaderEntryNumber => Elf32::Half.
    public field sectionNameStringStringTableIndex => Elf32::Half.

    public override method initialize => Void := {
        ident
            at: Elf::Ident::Magic0 put: 16r7f u8;
            at: Elf::Ident::Magic1 put: 'E' asUInt8;
            at: Elf::Ident::Magic2 put: 'L' asUInt8;
            at: Elf::Ident::Magic3 put: 'F' asUInt8;
            at: Elf::Ident::Class put: Elf::Ident::Class32;
            at: Elf::Ident::Data put: Elf::Ident::Data2LSB;
            at: Elf::Ident::Version put: Elf::Ident::CurrentVersion.
        
        version := Elf::CurrentVersion.
        elfHeaderSize := self __type__ validInstanceSize asUInt16.
        sectionHeaderEntrySize := Elf32::SectionHeader validInstanceSize asUInt16.
    }.
}.

public final class Elf64::Header superclass: ByteSerializableObject; definition: {
    public field ident => UInt8[Elf::Ident::NIdent].
    public field type => Elf64::Half.
    public field machine => Elf64::Half.
    public field version => Elf64::Word.
    public field entry => Elf64::Addr.
    public field programHeaderOffset => Elf64::Off.
    public field sectionHeaderOffset => Elf64::Off.
    public field flags => Elf64::Word.
    public field elfHeaderSize => Elf64::Half.
    public field programHeaderEntrySize => Elf64::Half.
    public field programHeaderEntryNumber => Elf64::Half.
    public field sectionHeaderEntrySize => Elf64::Half.
    public field sectionHeaderEntryNumber => Elf64::Half.
    public field sectionNameStringStringTableIndex => Elf64::Half.

    public override method initialize => Void := {
        ident
            at: Elf::Ident::Magic0 put: 16r7f u8;
            at: Elf::Ident::Magic1 put: 'E' asUInt8;
            at: Elf::Ident::Magic2 put: 'L' asUInt8;
            at: Elf::Ident::Magic3 put: 'F' asUInt8;
            at: Elf::Ident::Class put: Elf::Ident::Class64;
            at: Elf::Ident::Data put: Elf::Ident::Data2LSB;
            at: Elf::Ident::Version put: Elf::Ident::CurrentVersion.
        
        version := Elf::CurrentVersion.
        elfHeaderSize := self __type__ validInstanceSize asUInt16.
        sectionHeaderEntrySize := Elf64::SectionHeader validInstanceSize asUInt16.
    }.
}.

public final class Elf32::SectionHeader superclass: ByteSerializableObject; definition: {
    public field name => Elf32::Word.
    public field type => Elf32::Word.
    public field flags => Elf32::Word.
    public field addr => Elf32::Addr.
    public field offset => Elf32::Off.
    public field size => Elf32::Word.
    public field link => Elf32::Word.
    public field info => Elf32::Word.
    public field addrAlign => Elf32::Word.
    public field entrySize => Elf32::Word.
}.

public final class Elf64::SectionHeader superclass: ByteSerializableObject; definition: {
    public field name => Elf64::Word.
    public field type => Elf64::Word.
    public field flags => Elf64::Xword.
    public field addr => Elf64::Addr.
    public field offset => Elf64::Off.
    public field size => Elf64::Xword.
    public field link => Elf64::Word.
    public field info => Elf64::Word.
    public field addrAlign => Elf64::Xword.
    public field entrySize => Elf64::Xword.
}.

public final class Elf32::Symbol superclass: ByteSerializableObject; definition: {
    public field name => Elf32::Word.
    public field value => Elf32::Addr.
    public field size => Elf32::Word.
    public field info => UInt8.
    public field other => UInt8.
    public field sectionHeaderIndex => Elf32::Half.

    public method bind: (bind: UInt8) type: (type: UInt8) ::=> Void := {
        info := (bind << 4u8) | type
    }.

    public method makeSectionSymbol => Void := {
        self bind: Elf::SymbolTableBind::Local type: Elf::SymbolTableType::Section
    }.
}.

public final class Elf64::Symbol superclass: ByteSerializableObject; definition: {
    public field name => Elf64::Word.
    public field info => UInt8.
    public field other => UInt8.
    public field sectionHeaderIndex => Elf64::Half.
    public field value => Elf64::Addr.
    public field size => Elf64::Xword.

    public method bind: (bind: UInt8) type: (type: UInt8) ::=> Void := {
        info := (bind << 4u8) | type
    }.

    public method makeSectionSymbol => Void := {
        self bind: Elf::SymbolTableBind::Local type: Elf::SymbolTableType::Section
    }.
}.

public final class Elf32::Rel superclass: ByteSerializableObject; definition: {
    public field offset => Elf32::Addr.
    public field info => Elf32::Word.

    public method symbol: (symbol: UInt32) type: (type: UInt32) ::=> Void := {
        info := (symbol << 8u32) | type
    }.
}.

public final class Elf64::Rel superclass: ByteSerializableObject; definition: {
    public field offset => Elf64::Addr.
    public field info => Elf64::Xword.

    public method symbol: (symbol: UInt32) type: (type: UInt32) ::=> Void := {
        info := (symbol asUInt64 << 32u64) | type asUInt64
    }.
}.

public final class Elf32::Rela superclass: ByteSerializableObject; definition: {
    public field offset => Elf32::Addr.
    public field info => Elf32::Word.
    public field addend => Elf32::Sword.

    public method symbol: (symbol: UInt32) type: (type: UInt32) ::=> Void := {
        info := (symbol << 8u32) | type
    }.
}.

public final class Elf64::Rela superclass: ByteSerializableObject; definition: {
    public field offset => Elf64::Addr.
    public field info => Elf64::Xword.
    public field addend => Elf64::Sxword.

    public method symbol: (symbol: UInt32) type: (type: UInt32) ::=> Void := {
        info := (symbol asUInt64 << 32u64) | type asUInt64
    }.
}.

let elfSymbolVisibilityMap := #{
    AsmSymbol::Visibility::Private : Elf::SymbolTableBind::Local.
    AsmSymbol::Visibility::Public : Elf::SymbolTableBind::Global.
    AsmSymbol::Visibility::Weak : Elf::SymbolTableBind::Weak.
}.

let elfSymbolTypeMap := #{
    AsmSymbol::Type::None : Elf::SymbolTableType::Notype.
    AsmSymbol::Type::Function : Elf::SymbolTableType::Func.
    AsmSymbol::Type::Variable : Elf::SymbolTableType::Object.
    AsmSymbol::Type::TLS : Elf::SymbolTableType::TLS.
}.

public final class Elf32::SymbolTable superclass: Object; definition: {
    public field stringTable => AsmObjectCodeCStringTable.
    public field privateSymbols => OrderedCollection.
    public field publicSymbols => OrderedCollection.
    protected field privateSymbolDictionary => ObjectPointerDictionary.
    protected field publicSymbolDictionary => ObjectPointerDictionary.
    protected field sectionIndexTable => ObjectPointerDictionary.

    public override method initialize => Void := {
        publicSymbols := OrderedCollection new.
        privateSymbols := OrderedCollection new.
        privateSymbolDictionary := ObjectPointerDictionary new.
        publicSymbolDictionary := ObjectPointerDictionary new.
        sectionIndexTable := ObjectPointerDictionary new.
        privateSymbols add: Elf32::Symbol new.
    }.

    public method addSection: (section: AsmObjectCodeSection) index: (sectionIndex: Size) ::=> Void := {
        privateSymbols add: (Elf32::Symbol new
            sectionHeaderIndex: sectionIndex asUInt16;
            makeSectionSymbol;
            yourself).
        sectionIndexTable at: section put: sectionIndex.
    }.

    public method addSymbol: (symbol: AsmSymbol) ::=> Void := {
        symbol isPrivate ifTrue: (return: void).

        let elfSymbol := Elf32::Symbol new
            bind: (elfSymbolVisibilityMap at: symbol visibility) type: (elfSymbolTypeMap at: symbol type);
            value: symbol value asUInt32;
            size: symbol size asUInt32;
            yourself.

        symbol name ifNotNil: {:name :: Void |
            elfSymbol name: (stringTable addSymbol: name) asUInt32.
        }.

        symbol section ifNotNil: {:section :: Void |
            elfSymbol sectionHeaderIndex: (sectionIndexTable at: section) asUInt16
        }.

        symbol isPublic ifTrue: {
            publicSymbolDictionary at: symbol put: publicSymbols size asUInt32.
            publicSymbols add: elfSymbol
        } ifFalse: {
            privateSymbols add: elfSymbol.
            privateSymbolDictionary at: symbol put: privateSymbols size asUInt32
        }.
    }.

    public method indexOfSymbol: (symbol: AsmSymbol) ::=> UInt32 := {
        symbol isPrivate ifTrue: {
            sectionIndexTable at: symbol section
        } ifFalse: {
            symbol isInternal
                ifTrue: (privateSymbolDictionary at: symbol)
                ifFalse: ((publicSymbolDictionary at: symbol) + privateSymbols size asUInt32)
        }.
    }.

    public method totalSymbolCount => Size
        := privateSymbols size + publicSymbols size.

    public method sectionSize => Size
        := self totalSymbolCount * Elf32::Symbol validInstanceSize.
}.

public final class Elf64::SymbolTable superclass: Object; definition: {
    public field stringTable => AsmObjectCodeCStringTable.
    public field privateSymbols => OrderedCollection.
    public field publicSymbols => OrderedCollection.
    protected field privateSymbolDictionary => ObjectPointerDictionary.
    protected field publicSymbolDictionary => ObjectPointerDictionary.
    protected field sectionIndexTable => ObjectPointerDictionary.

    public override method initialize => Void := {
        publicSymbols := OrderedCollection new.
        privateSymbols := OrderedCollection new.
        privateSymbolDictionary := ObjectPointerDictionary new.
        publicSymbolDictionary := ObjectPointerDictionary new.
        sectionIndexTable := ObjectPointerDictionary new.
        privateSymbols add: Elf64::Symbol new.
    }.

    public method addSection: (section: AsmObjectCodeSection) index: (sectionIndex: Size) ::=> Void := {
        privateSymbols add: (Elf64::Symbol new
            sectionHeaderIndex: sectionIndex asUInt16;
            makeSectionSymbol;
            yourself).
        sectionIndexTable at: section put: sectionIndex.
    }.

    public method addSymbol: (symbol: AsmSymbol) ::=> Void := {
        symbol isPrivate ifTrue: (return: void).
        let elfSymbol := Elf64::Symbol new
            bind: (elfSymbolVisibilityMap at: symbol visibility) type: (elfSymbolTypeMap at: symbol type);
            value: symbol value asUInt64;
            size: symbol size asUInt64;
            yourself.

        symbol name ifNotNil: {:name :: Void |
            elfSymbol name: (stringTable addSymbol: name) asUInt32.
        }.

        symbol section ifNotNil: {:section :: Void |
            elfSymbol sectionHeaderIndex: (sectionIndexTable at: section) asUInt16
        }.

        symbol isPublic ifTrue: {
            publicSymbolDictionary at: symbol put: publicSymbols size asUInt32.
            publicSymbols add: elfSymbol
        } ifFalse: {
            privateSymbols add: elfSymbol.
            privateSymbolDictionary at: symbol put: privateSymbols size asUInt32
        }.
    }.

    public method indexOfSymbol: (symbol: AsmSymbol) ::=> UInt32 := {
        symbol isPrivate ifTrue: {
            (sectionIndexTable at: symbol section) asUInt32
        } ifFalse: {
            symbol isInternal
                ifTrue: (privateSymbolDictionary at: symbol)
                ifFalse: ((publicSymbolDictionary at: symbol) + privateSymbols size asUInt32)
        }.
    }.

    public method totalSymbolCount => Size
        := privateSymbols size + publicSymbols size.

    public method sectionSize => Size
        := self totalSymbolCount * Elf64::Symbol validInstanceSize.
}.

AsmObjectCodeSection extend: {
    public method elfSectionType => UInt32
        := nobits
            ifTrue: Elf::SectionHeaderType::Nobits
            ifFalse: Elf::SectionHeaderType::Progbits.

    public method elfSectionFlags => UInt32 := {
        let elfFlags mutable := 0u32.
        readable ifTrue: (elfFlags := elfFlags | Elf::SectionHeaderFlag::Alloc).
        writeable ifTrue: (elfFlags := elfFlags | Elf::SectionHeaderFlag::Write).
        executable ifTrue: (elfFlags := elfFlags | Elf::SectionHeaderFlag::ExecInstr).
        tls ifTrue: (elfFlags := elfFlags | Elf::SectionHeaderFlag::TLS).
        elfFlags
    }.
}.

public final class AsmObjectElf32FileWriter superclass: AsmObjectFileWriter; definition: {
    public override method encodeObjectCode: (objectCode: AsmObjectCode) ::=> ByteArray := {
        let compilationTarget := objectCode compilationTarget.

        let header := Elf32::Header new
            type: Elf::Type::Rel;
            machine: compilationTarget elfMachine;
            flags: compilationTarget elfFlags;
            yourself.

        let fileLayout := OrderedCollection new.
        fileLayout
            add: header;
            addAll: objectCode sections.

        let stringTable := AsmObjectCodeCStringTable new.
        let sectionNameStringTable := AsmObjectCodeCStringTable new.

        let symbolTable := Elf32::SymbolTable new.
        symbolTable stringTable: stringTable.

        ## Section headers with their corresponding data elements.
        let sectionHeaders := OrderedCollection new.
        let sectionDataElements := OrderedCollection new.
        sectionHeaders add: Elf32::SectionHeader new. ## Null section
        sectionDataElements add: nil.

        ## Emit the sections.
        objectCode sections do: {:(AsmObjectCodeSection)eachSection :: Void |
            let sectionHeader := Elf32::SectionHeader new
                name: (sectionNameStringTable addSymbol: eachSection name) asUInt32;
                type: eachSection elfSectionType;
                flags: eachSection elfSectionFlags;
                size: eachSection size asUInt32;
                addrAlign: eachSection alignment asUInt32;
                yourself.
            symbolTable addSection: eachSection index: sectionHeaders size.
            sectionHeaders add: sectionHeader.
            sectionDataElements add: eachSection.
        }.

        ## Convert the symbols.
        objectCode symbols do: {:(AsmSymbol)eachSymbol :: Void |
            symbolTable addSymbol: eachSymbol
        }.

        ## Emit the relocations.
        let relSectionHeaders := OrderedCollection new.

        objectCode sections doWithIndex: {:(AsmObjectCodeSection)eachSection :(Size)index :: Void |
            let sectionHeaderIndex := index + 1sz.
            let sectionHeader := sectionHeaders at: sectionHeaderIndex.
            let relocations := eachSection relocations.
            relocations size > 0sz ifTrue: {
                objectCode compilationTarget usesElfRelStyleRelocations ifTrue: {
                    let relLabel := ByteStreamEncodingLabel new.
                    fileLayout add: relLabel;
                        addAll: (relocations collect: {:(AsmObjectCodeRelocation)each |
                            each applyAddendInTargetSection: eachSection.
                            compilationTarget convertRelocationIntoElf32Rel: each withSymbolTable: symbolTable
                        }).

                    let relSectionHeader := Elf32::SectionHeader new
                        name: (sectionNameStringTable addString: eachSection name asString -- ".rel") asUInt32;
                        type: Elf::SectionHeaderType::Rel;
                        size: (relocations size * Elf32::Rel validInstanceSize) asUInt32;
                        addrAlign: 1u32;
                        entrySize: Elf32::Rel validInstanceSize asUInt32;
                        info: sectionHeaderIndex asUInt32;
                        yourself.

                    relSectionHeaders add: relSectionHeader.
                    sectionHeaders add: relSectionHeader.
                    sectionDataElements add: relLabel

                } ifFalse: {
                    let relaLabel := ByteStreamEncodingLabel new.
                    fileLayout add: relaLabel;
                        addAll: (relocations collect: {:(AsmObjectCodeRelocation)each |
                            compilationTarget convertRelocationIntoElf32Rela: each withSymbolTable: symbolTable
                        }).

                    let relaSectionHeader := Elf32::SectionHeader new
                        name: (sectionNameStringTable addString: eachSection name asString -- ".rela") asUInt32;
                        type: Elf::SectionHeaderType::Rela;
                        size: (relocations size * Elf32::Rela validInstanceSize) asUInt32;
                        addrAlign: 1u32;
                        entrySize: Elf32::Rela validInstanceSize asUInt32;
                        info: sectionHeaderIndex asUInt32;
                        yourself.

                    relSectionHeaders add: relaSectionHeader.
                    sectionHeaders add: relaSectionHeader.
                    sectionDataElements add: relaLabel
                }.

            }.
        }.

        ## Symbol table.
        {
            let tableLabel := ByteStreamEncodingLabel new.
            fileLayout
                add: tableLabel;
                addAll: symbolTable privateSymbols;
                addAll: symbolTable publicSymbols.
            let symbolTableIndex := sectionHeaders size asUInt32.
            relSectionHeaders do: {:(Elf32::SectionHeader)each :: Void |
                each link: symbolTableIndex 
            }.
            sectionHeaders add: (Elf32::SectionHeader new
                name: (sectionNameStringTable addString: ".symtab") asUInt32;
                type: Elf::SectionHeaderType::Symtab;
                size: symbolTable sectionSize asUInt32;
                addrAlign: 1u32;
                entrySize: Elf32::Symbol validInstanceSize asUInt32;
                info: symbolTable privateSymbols size asUInt32;
                link: sectionHeaders size asUInt32 + 1u32;
                yourself).
            sectionDataElements add: tableLabel.            
        }.

        fileLayout
            add: stringTable;
            add: sectionNameStringTable.

        ## String table.
        {
            stringTable finish.
            sectionHeaders add: (Elf32::SectionHeader new
                name: (sectionNameStringTable addString: ".strtab") asUInt32;
                type: Elf::SectionHeaderType::Strtab;
                size: stringTable size asUInt32;
                addrAlign: 1u32;
                yourself).
            sectionDataElements add: stringTable.
        }.

        ## Section name string table.
        {
            header sectionNameStringStringTableIndex: sectionHeaders size asUInt16.
            let sectionNameStringTableHeader := Elf32::SectionHeader new
                name: (sectionNameStringTable addString: ".shstrtab") asUInt32;
                type: Elf::SectionHeaderType::Strtab;
                addrAlign: 1u32;
                yourself.
            sectionNameStringTable finish.
            sectionNameStringTableHeader size: sectionNameStringTable size asUInt32.
            sectionHeaders add: sectionNameStringTableHeader.
            sectionDataElements add: sectionNameStringTable.
        }.

        let sectionsHeadersLabel := ByteStreamEncodingLabel new.
        fileLayout
            add: sectionsHeadersLabel;
            addAll: sectionHeaders;
            computeOffsetsOfEncodedElementsInByteStream.

        sectionDataElements doWithIndex: {:dataElement :(Size)index :: Void |
            dataElement ifNotNil: {
                (sectionHeaders at: index)
                    offset: dataElement offsetOfEncodedElementInByteStream asUInt32
            }.
        }.

        header
            sectionHeaderOffset: sectionsHeadersLabel offsetOfEncodedElementInByteStream asUInt32;
            sectionHeaderEntryNumber: sectionHeaders size asUInt16.

        fileLayout encodedElementsInByteArray
    }.
}.

public final class AsmObjectElf64FileWriter superclass: AsmObjectFileWriter; definition: {
    public override method encodeObjectCode: (objectCode: AsmObjectCode) ::=> ByteArray := {
        let compilationTarget := objectCode compilationTarget.

        let header := Elf64::Header new
            type: Elf::Type::Rel;
            machine: compilationTarget elfMachine;
            flags: compilationTarget elfFlags;
            yourself.

        let fileLayout := OrderedCollection new.
        fileLayout
            add: header;
            addAll: objectCode sections.

        let stringTable := AsmObjectCodeCStringTable new.
        let sectionNameStringTable := AsmObjectCodeCStringTable new.

        let symbolTable := Elf64::SymbolTable new.
        symbolTable stringTable: stringTable.

        ## Section headers with their corresponding data elements.
        let sectionHeaders := OrderedCollection new.
        let sectionDataElements := OrderedCollection new.
        sectionHeaders add: Elf64::SectionHeader new. ## Null section
        sectionDataElements add: nil.

        ## Emit the sections.
        objectCode sections do: {:(AsmObjectCodeSection)eachSection :: Void |
            let sectionHeader := Elf64::SectionHeader new
                name: (sectionNameStringTable addSymbol: eachSection name) asUInt32;
                type: eachSection elfSectionType;
                flags: eachSection elfSectionFlags asUInt64;
                size: eachSection size asUInt64;
                addrAlign: eachSection alignment asUInt64;
                yourself.
            symbolTable addSection: eachSection index: sectionHeaders size.
            sectionHeaders add: sectionHeader.
            sectionDataElements add: eachSection.
        }.

        ## Convert the symbols.
        {|
        objectCode symbols do: {:(AsmSymbol)eachSymbol :: Void |
            symbolTable addSymbol: eachSymbol
        }.
        } printTimeToRunInMillisecondsWithTitle: "Elf symbol table conversion".

        ## Emit the relocations.
        let relSectionHeaders := OrderedCollection new.
        {|

        objectCode sections doWithIndex: {:(AsmObjectCodeSection)eachSection :(Size)index :: Void |
            let sectionHeaderIndex := index + 1sz.
            let sectionHeader := sectionHeaders at: sectionHeaderIndex.
            let relocations := eachSection relocations.
            relocations size > 0sz ifTrue: {
                objectCode compilationTarget usesElfRelStyleRelocations ifTrue: {
                    let relLabel := ByteStreamEncodingLabel new.
                    fileLayout add: relLabel;
                        addAll: (relocations collect: {:(AsmObjectCodeRelocation)each |
                            each applyAddendInTargetSection: eachSection.
                            compilationTarget convertRelocationIntoElf64Rel: each withSymbolTable: symbolTable
                        }).

                    let relSectionHeader := Elf64::SectionHeader new
                        name: (sectionNameStringTable addString: eachSection name asString -- ".rel") asUInt32;
                        type: Elf::SectionHeaderType::Rel;
                        size: (relocations size * Elf64::Rel validInstanceSize) asUInt64;
                        addrAlign: 1u64;
                        entrySize: Elf64::Rel validInstanceSize asUInt64;
                        info: sectionHeaderIndex asUInt32;
                        yourself.

                    relSectionHeaders add: relSectionHeader.
                    sectionHeaders add: relSectionHeader.
                    sectionDataElements add: relLabel

                } ifFalse: {
                    let relaLabel := ByteStreamEncodingLabel new.
                    fileLayout add: relaLabel;
                        addAll: (relocations collect: {:(AsmObjectCodeRelocation)each |
                            compilationTarget convertRelocationIntoElf64Rela: each withSymbolTable: symbolTable
                        }).

                    let relaSectionHeader := Elf64::SectionHeader new
                        name: (sectionNameStringTable addString: eachSection name asString -- ".rela") asUInt32;
                        type: Elf::SectionHeaderType::Rela;
                        size: (relocations size * Elf64::Rela validInstanceSize) asUInt64;
                        addrAlign: 1u64;
                        entrySize: Elf64::Rela validInstanceSize asUInt64;
                        info: sectionHeaderIndex asUInt32;
                        yourself.

                    relSectionHeaders add: relaSectionHeader.
                    sectionHeaders add: relaSectionHeader.
                    sectionDataElements add: relaLabel
                }.

            }.
        }.
        } printTimeToRunInMillisecondsWithTitle: "Elf relocations".

        ## No exec stack note.
        {
            sectionHeaders add: (Elf64::SectionHeader new
                name: (sectionNameStringTable addString: ".note.GNU-stack") asUInt32;
                type: Elf::SectionHeaderType::Progbits;
                addrAlign: 1u64;
                yourself).
            sectionDataElements add: nil.
        }.

        ## Symbol table.
        {
            let tableLabel := ByteStreamEncodingLabel new.
            fileLayout
                add: tableLabel;
                addAll: symbolTable privateSymbols;
                addAll: symbolTable publicSymbols.
            let symbolTableIndex := sectionHeaders size asUInt32.
            relSectionHeaders do: {:(Elf64::SectionHeader)each :: Void |
                each link: symbolTableIndex 
            }.
            sectionHeaders add: (Elf64::SectionHeader new
                name: (sectionNameStringTable addString: ".symtab") asUInt32;
                type: Elf::SectionHeaderType::Symtab;
                size: symbolTable sectionSize asUInt64;
                addrAlign: 1u64;
                entrySize: Elf64::Symbol validInstanceSize asUInt64;
                info: symbolTable privateSymbols size asUInt32;
                link: sectionHeaders size asUInt32 + 1u32;
                yourself).
            sectionDataElements add: tableLabel.            
        }.

        fileLayout
            add: stringTable;
            add: sectionNameStringTable.

        ## String table.
        {
            stringTable finish.
            sectionHeaders add: (Elf64::SectionHeader new
                name: (sectionNameStringTable addString: ".strtab") asUInt32;
                type: Elf::SectionHeaderType::Strtab;
                size: stringTable size asUInt64;
                addrAlign: 1u64;
                yourself).
            sectionDataElements add: stringTable.
        }.

        ## Section name string table.
        {
            header sectionNameStringStringTableIndex: sectionHeaders size asUInt16.
            let sectionNameStringTableHeader := Elf64::SectionHeader new
                name: (sectionNameStringTable addString: ".shstrtab") asUInt32;
                type: Elf::SectionHeaderType::Strtab;
                addrAlign: 1u64;
                yourself.
            sectionNameStringTable finish.
            sectionNameStringTableHeader size: sectionNameStringTable size asUInt64.
            sectionHeaders add: sectionNameStringTableHeader.
            sectionDataElements add: sectionNameStringTable.
        }.

        let sectionsHeadersLabel := ByteStreamEncodingLabel new.
        fileLayout
            add: sectionsHeadersLabel;
            addAll: sectionHeaders;
            computeOffsetsOfEncodedElementsInByteStream.

        sectionDataElements doWithIndex: {:dataElement :(Size)index :: Void |
            dataElement ifNotNil: {
                (sectionHeaders at: index)
                    offset: dataElement offsetOfEncodedElementInByteStream asUInt64
            }.
        }.

        header
            sectionHeaderOffset: sectionsHeadersLabel offsetOfEncodedElementInByteStream asUInt64;
            sectionHeaderEntryNumber: sectionHeaders size asUInt16.

        {|
        fileLayout encodedElementsInByteArray
        } printTimeToRunInMillisecondsWithTitle: "Elf encode as byte array"
    }.
}.

AsmCompilationTarget extend: {
    public virtual method usesElfRelStyleRelocations => Boolean
        := false.

    public virtual method elfMachine => UInt16
        := 0u16.

    public virtual method elfFlags => UInt32
        := 0u32.

    public method usesElfRelaStyleRelocations => Boolean
        := self usesElfRelStyleRelocations not.

    public method useElf => self __type__ := {
        self pointerSize = 8sz
            ifTrue: (self useElf64)
            ifFalse: (self useElf32).
        self
    }.

    public method useElf32 => self __type__ := {
        objectFileWriter := AsmObjectElf32FileWriter new.
        self
    }.

    public method useElf64 => self __type__ := {
        objectFileWriter := AsmObjectElf64FileWriter new.
        self
    }.

    public abstract method convertRelocationIntoElf32Rel: (relocation: AsmObjectCodeRelocation) withSymbolTable: (symbolTable: Elf32::SymbolTable) ::=> Elf32::Rel
        := self subclassResponsibility.

    public abstract method convertRelocationIntoElf32Rela: (relocation: AsmObjectCodeRelocation) withSymbolTable: (symbolTable: Elf32::SymbolTable) ::=> Elf32::Rela
        := self subclassResponsibility.

    public abstract method convertRelocationIntoElf64Rel: (relocation: AsmObjectCodeRelocation) withSymbolTable: (symbolTable: Elf64::SymbolTable) ::=> Elf64::Rel
        := self subclassResponsibility.

    public abstract method convertRelocationIntoElf64Rela: (relocation: AsmObjectCodeRelocation) withSymbolTable: (symbolTable: Elf64::SymbolTable) ::=> Elf64::Rela
        := self subclassResponsibility.
}.